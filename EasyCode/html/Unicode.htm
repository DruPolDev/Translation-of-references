<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252"><title>ANSI / Unicode applications</title>

</head>
<body style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">
<p><a name="unicode"></a><b><font color="#004080" face="Arial" size="6">ANSI
/ Unicode
applications</font></b></p>
<hr>
<p><font face="Arial" size="2">Easy Code
visual projects can
build ANSI or Unicode applications in a very easy way. To
switch between ANSI and Unicode mode, just check/uncheck
the <b>This project will run in Unicode mode (Windows NT
or later)</b> option in the </font><a href="Project.htm#project2"><font face="Arial" size="2">Project Properties</font></a><font face="Arial" size="2">. If that option is checked,
the built application
will be <b>Unicode</b>, otherwise it will be <b>ANSI</b>
(default).<br>
<br>
In order to maintain compatibilty with all Windows platforms,
32-bit Unicode applications will dynamically switch to ANSI
when running on Windows 95/98/ME. On the other hand,
applications not built as Unicode (that is, having the
<b>This project will run in Unicode mode</b> option
unchecked) will always be ANSI although they run on Windows
NT or later systems. For you to know which mode your
application is running in, call the <a href="AppUnicode.htm"><font color="#800080">IsAppUnicode</font></a>
method, which returns <font color="#000080"><b>TRUE</b></font>
or <font color="#000080"><b>FALSE</b></font>
depending on
whether the application is running as Unicode or not. That
way, you can prepare an application to work fine in all Windows
versions. To do so, just take care of using the appropiate
functions and messages when they are related to text, and
passing the text strings in the right format.<br>
<br>
Easy Code also defines the <font color="#800080"><b>APP_UNICODE</b></font>
constant, ONLY if
the application is built as Unicode. This constant is
defined at compile time and it is also available for classic
projects. However, if the project is running on Windows95/98/ME,
it will be running as ANSI even though the <font color="#800080"><b>APP_UNICODE</b></font>
is defined.
<br>
<br>
There are some macros to deal with ANSI/Unicode
text. <a href="ECMacros.htm#TextStrA"><font color="#800080">TextStrA</font></a> always
returns
an ANSI string, <a href="ECMacros.htm#TextStrW"><font color="#800080">TextStrW</font></a> always
returns a
Unicode string and <a href="ECMacros.htm#TextStr"><font color="#800080">TextStr</font></a> returns an
ANSI or
Unicode string, depending on whether the
<b>This project will run in Unicode mode</b> option is
checked or not. Also, all <b>Easy Code methods</b>
using text strings have their corresponding ANSI
and Unicode versions. For example, the <a href="easy01kk.htm"><font color="#800080">SetText</font></a>
method is complemented with <a href="easy01kk.htm"><font color="#800080">SetTextA</font></a>
and <a href="easy01kk.htm"><font color="#800080">SetTextW</font></a>.
The <a href="easy01kk.htm"><font color="#800080">SetText</font></a>
method automatically calls the ANSI or Unicode version
depending on which platform of Windows it is running on
and whether the application was built as Unicode or not,
while <a href="easy01kk.htm"><font color="#800080">SetTextA</font></a>
and <a href="easy01kk.htm"><font color="#800080">SetTextW</font></a>
always call, respectively, the ANSI and Unicode version
of the method (see <a href="ECMethod.htm">Easy
Code methods</a>). That way
you can mix ANSI and Unicode text in the same application.
Let's see some sample code (where <b>hWnd</b>
is the handle to the object which text is to be set):<br>
<br>
</font></p>
<blockquote style="margin-right: 0px;" dir="ltr"><font face="Arial" size="2"> </font>
<p dir="ltr"><font face="Arial" size="2"><font face="Courier New" size="2"><b><font color="#0000ff">IFDEF</font> <font color="#800080">APP_UNICODE</font><br>
&nbsp;&nbsp;&nbsp; <font color="#ff0000">Mov</font>
<font color="#808000">Eax/Rax</font>, <font color="#800080">TextStrW("Hello")</font> <font color="#808080">;Unicode
mode</font><br>
<font color="#0000ff">ELSE</font><br>
&nbsp;&nbsp;&nbsp; <font color="#808080"><font color="#ff0000">Mov</font> <font color="#808000">Eax/Rax</font>,
<font color="#800080">TextStrA("Hello")</font>
;ANSI mode</font><br>
<font color="#0000ff">ENDIF</font><br>
<font color="#0000ff">Invoke</font> <font color="#800080">SetText</font>,
hWnd, <font color="#808000">Eax/Rax</font></b></font></font></p>
</blockquote>
<font face="Arial" size="2"><br>
Also, you can use ANSI strings in Unicode applications:<br>
<br>
</font>
<blockquote style="margin-right: 0px;" dir="ltr"><font face="Arial" size="2"> </font>
<p dir="ltr"><font face="Arial" size="2"><font face="Courier New" size="2"><strong><font color="#0000ff">Invoke</font> <font color="#800080">SetTextA</font>,
hWnd, <font color="#800080">TextStrA("Hello")</font></strong></font></font></p>
</blockquote>
<font face="Arial" size="2"><br>
If you are using API functions, just take care of calling the
appropiate function and setting
the right format for strings:<br>
<br>
</font>
<blockquote style="margin-right: 0px;" dir="ltr"><font face="Arial" size="2"> </font>
<p dir="ltr"><font face="Arial" size="2"><font face="Courier New" size="2"><strong><font color="#0000ff">Invoke</font> <font color="#800080">IsAppUnicode</font><br>
<font color="#008000">.If</font> <font color="#808000">Eax/Rax</font><br>
&nbsp;&nbsp;&nbsp; <font color="#0000ff">Invoke</font>
SetWindowTextW, hWnd, <font color="#800080">TextStrW("Hello")</font>
<font color="#808080">;Unicode
mode</font><br>
<font color="#008000">.Else</font><br>
&nbsp;&nbsp;&nbsp; <font color="#0000ff">Invoke</font>
SetWindowTextA, hWnd, <font color="#800080">TextStrA("Hello")</font>
<font color="#808080">;ANSI
mode</font><br>
<font color="#008000">.EndIf</font><br>
</strong></font></font></p>
</blockquote>
<font face="Arial" size="2"><br>
By using the <a href="ECMacros.htm#TextStr"><font color="#800080">TextStr</font></a>
(or <a href="ECMacros.htm#TextStr"><font color="#800080">TextStr</font></a>) macro
you can even save some lines of code. The following
instruction will work both, ANSI or Unicode mode:<br>
<br>
</font>
<blockquote style="margin-right: 0px;" dir="ltr">
<p dir="ltr"><font face="Courier New" size="2"><b><font color="#0000ff">Invoke</font> <font color="#800080">SetText</font>,
hWnd, <font color="#800080">TextStr("Hello")</font></b></font></p>
</blockquote>
<p><font face="Arial"><font><font size="2"><br>
For GoAsm projects you may want to use
the <font color="#800080"><b>DSS</b></font>
type (Easy Code defined), which makes a text
string to be ANSI, in ANSI projects, or to be a Unicode string in
Unicode projects.</font></font></font></p>
<blockquote style="margin-right: 0px;" dir="ltr">
<p dir="ltr"><font face="Arial"><font><font face="Courier New" size="2"><b>szHello <font color="#800080">DSS</font>
<font color="#ff00ff">'Hello'</font>, <font color="#0080c0">0</font></b></font></font></font></p>
</blockquote>
<p><font face="Arial"><font><font face="Arial"><font><font size="2"><br>
Also,
Easy Code defines the <b><font color="#800080">CHARSIZE</font></b>
constant, which has a value of <b>1</b>
or <b>2</b>
depending on whether ANSI or Unicode mode is being used. So, if you
need to increase a string pointer by one character,
you can use the <b><font color="#800080">CHARSIZE</font></b>
constant as follows:</font></font></font></font></font></p>
<dl>
<dd>
<div><font face="Arial"><font><font><font><font size="2"><font face="Courier New"><b><font color="#ff0000">Mov</font></b>
<b><font color="#808000">Esi</font><font color="#ff00ff">,
[</font></b></font></font><b><font face="Courier New" size="2">lpszString<font color="#ff00ff">]</font><br>
</font></b></font></font><font><font><font size="2"><font face="Courier New"><b><font color="#ff0000">Add</font></b>
<b><font color="#808000">Esi</font><font color="#ff00ff">,
</font></b><b><font color="#800080">CHARSIZE</font></b></font></font></font></font></font></font></div>
</dd>
</dl>
<font face="Arial"><font><font face="Arial" size="2"><br>
<b>REMARKS</b>: All lines
above has been written in MASM syntax. Please take that
into account when working with other assemblers in order
to make the necessary syntax changes.</font><br>
<br>
<font face="Arial" size="2"><br>
If your using the <b>MASM32 v11</b> SDK for 32-bit JWASM
/ MASM / POASM projects (recommended), you can take
advantage of its new <b>__UNICODE__</b> constant,
which makes the compiler to refer to Unicode or ANSI
versions of the API functions depending, respectively,
on whether <b>__UNICODE__</b> is defined or not.
<b>Easy Code</b> and the <b>Masm32 Unicode mode</b>
option in the <a href="Project.htm#project2">Project
Properties</a>, internally take care of the
<b>__UNICODE__</b> constant. Checking this option will make
<b>__UNICODE__</b> to be defined and Unicode versions to be
called. On the other hand, if the <b>Masm32 Unicode mode</b>
option is unchecked, <b>__UNICODE__</b> will not be
defined
and ANSI versions will be called. For example, a call to
<b>SetWindowText</b> will result in a call to
<b>SetWindowTextA</b> (if <b>Masm32 Unicode mode</b>
option is unchecked) or to <b>SetWindowTextW</b>
(if <b>Masm32
Unicode mode</b> option is checked).<br>
<font face="Arial" size="2"><br>
<b>REMARKS</b>: The <b>Masm32
Unicode mode</b> option only has effect if the
<b>MASM32 SDK</b> include files are used (by
default, JWASM, MASM and POASM 32-bit
projects).</font><br>
<br>
</font><font face="Arial" size="2"><br>
Keep in mind that all <b>Easy
Code</b> methods using text
strings expect and return Unicode strings
if the application has been built as Unicode
and it is running on Windows NT or later (unless
you specify their ANSI "A" or Unicode "W" version).
Otherwise they will expect and return ANSI
strings. For example, the <a href="easy7ib8.htm"><font color="#800080">GetText</font></a> method may
return
an ANSI or Unicode string depending on where and how
the application is running on, so use the <a href="AppUnicode.htm"><font color="#800080">IsAppUnicode</font></a> method,
or the
<font color="#800080"><b>APP_UNICODE</b></font>
constant,
to always know the right format for text strings. If you
want to call an ANSI method in a Unicode application
or a Unicode method in an ANSI application, call its
especific version. For example, <a href="easy7ib8.htm"><font color="#800080">GetTextA</font></a> always
returns an
ANSI string, while <a href="easy7ib8.htm"><font color="#800080">GetTextW</font></a> always
returns a
Unicode string.<br>
<br>
Also, remember that only applications built with the <b>This
project will run in Unicode mode</b> option checked, in the
<a href="Project.htm#project2">Project
Properties</a>, will be Unicode if they are running on
Windows NT or later. On the other hand, applications built
with the <b>This project will run in Unicode mode</b>
option unchecked will be always ANSI.</font>
</font></font>
<p></p>
</body></html>