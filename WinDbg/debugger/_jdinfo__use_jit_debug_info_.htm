<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:mssdk="winsdk" xmlns:script="urn:script" xmlns:build="urn:build" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<meta name="Description" content="The .jdinfo command uses a JIT_DEBUG_INFO structure as the source of the exception and context for just in time (JIT) debugging."/>
<meta name="MSHAttr" content="PreferredSiteName:MSDN"/>
<meta name="MSHAttr" content="PreferredLib:/library/windows/hardware"/>
<title>.jdinfo (Use JIT_DEBUG_INFO)</title>

<meta name="MS-HAID" content="rAppendix_1_a83fc497-9907-46c8-8163-47327946ec9c.xml"/>


<link rel="STYLESHEET" type="text/css" HREF="../common/backsdk4.css"/>


</head>
<body>

<div id="mainSection">
<div class="clsServerSDKContent">
<h1><a id="debugger._jdinfo__use_jit_debug_info_"></a>.jdinfo (Use JIT_DEBUG_INFO)</h1>
</div>
<p>The <b>.jdinfo</b> command uses a JIT_DEBUG_INFO structure as the source of the exception and context for just in time (JIT) debugging. The address to the structure is passed to the  <b>.jdinfo</b> command using the %p parameter that is specified in the AeDebug registry entry.</p>
<p>For more information about the registry keys used, see <a href="enabling_postmortem_debugging.htm">Enabling Postmortem Debugging</a>. For more information about register contexts, see <a href="changing_contexts.htm">Changing Contexts</a>.</p>
<pre class="syntax"><b>.jdinfo </b><i>Address</i> </pre>
<h2><a id="ddk_apc_meta_use_jit_debug_info_dbg"></a><a id="DDK_APC_META_USE_JIT_DEBUG_INFO_DBG"></a>Parameters</h2>
<p></p>
<dl>
<dt><a id="_______Address______"></a><a id="_______address______"></a><a id="_______ADDRESS______"></a>       <i>Address</i>      </dt>
<dd>
<p>Specifies the address of the JIT_DEBUG_INFO structure. The address to the structure is passed to the <b>.jdinfo</b> command using the %p parameter that is specified in the AeDebug registry entry.</p>
</dd>
</dl>
<h3><a id="Environment"></a><a id="environment"></a><a id="ENVIRONMENT"></a>Environment</h3>
<table>
<tr>
<td>
<p><b>
          Modes</b></p>
</td>
<td>
<p>User mode</p>
</td>
</tr>
<tr>
<td>
<p><b>
          Targets</b></p>
</td>
<td>
<p>Live, crash dump</p>
</td>
</tr>
<tr>
<td>
<p><b>
          Platforms</b></p>
</td>
<td>
<p>All </p>
</td>
</tr>
</table>
<p>Â </p>
<h3><a id="Example"></a><a id="example"></a><a id="EXAMPLE"></a>Example</h3>
<p>This example show how the AeDebug registry entry can be configured to use the WinDbg can be used as the JIT debugger.</p>
<pre class="syntax" xml:space="preserve"><code>Debugger = "Path\WinDbg.EXE -p %ld -e %ld -c ".jdinfo 0x%p"</code></pre>
<p>Then, when a crash occurs, the configured JIT debugger is invoked and the %p parameter is used to pass the address of the JIT_DEBUG_INFO structure to the  <b>.jdinfo</b> command that is executed after the debugger is started.</p>
<pre class="syntax" xml:space="preserve"><code>nMicrosoft (R) Windows Debugger Version 10.0.10240.9 AMD64
Copyright (c) Microsoft Corporation. All rights reserved.

*** wait with pending attach
Executable search path is: 
...
ModLoad: 00000000`68a20000 00000000`68ac3000   C:\WINDOWS\WinSxS\amd64_microsoft.vc90.crt_1fc8b3b9a1e18e3b_9.0.30729.9247_none_08e394a1a83e212f\MSVCR90.dll
(153c.5d0): Break instruction exception - code 80000003 (first chance)
Processing initial command '.jdinfo 0x00000000003E0000'
ntdll!DbgBreakPoint:
00007ffc`81a986a0 cc              int     3
0:003&gt; .jdinfo 0x00000000003E0000
----- Exception occurred on thread 0:15c8
ntdll!ZwWaitForMultipleObjects+0x14:
00007ffc`81a959a4 c3              ret

----- Exception record at 00000000`003e0028:
ExceptionAddress: 00007ff791d81014 (CrashAV_x64!wmain+0x0000000000000014)
   ExceptionCode: c0000005 (Access violation)
  ExceptionFlags: 00000000
NumberParameters: 2
   Parameter[0]: 0000000000000001
   Parameter[1]: 0000000000000000
Attempt to write to address 0000000000000000

----- Context record at 00000000`003e00c0:
rax=0000000000000000 rbx=0000000000000000 rcx=00007ffc81a954d4
rdx=0000000000000000 rsi=0000000000000000 rdi=0000000000000001
rip=00007ff791d81014 rsp=00000000006ff8b0 rbp=0000000000000000
 r8=00000000006ff808  r9=0000000000000000 r10=0000000000000000
r11=0000000000000000 r12=0000000000000000 r13=0000000000000000
r14=0000000000000000 r15=0000000000000000
iopl=0         nv up ei pl zr na po nc
cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010246
CrashAV_x64!wmain+0x14:
00007ff7`91d81014 45891b          mov     dword ptr [r11],r11d ds:00000000`00000000=????????
</code></pre>
<h2>Remarks</h2>
<p>The <b>.jdinfo</b> command uses the <b>AeDebug</b> registry information introduced in Windows Vista. For more information about the registry keys used, see <a href="enabling_postmortem_debugging.htm">Enabling Postmortem Debugging</a>. The <b>.jdinfo</b>  command takes the address of a JIT_DEBUG_INFO that the system set up for <b>AeDebug</b> and sets the context to the exception that caused the crash.</p>
<p>You can use the <b>.jdinfo</b> command instead of <b>-g</b> in <b>AeDebug</b> to have your debugger set to the <b>AeDebug</b> state without requiring execution.</p>
<p>This state can be advantageous, because under usual conditions, when a user-mode exception occurs, the following sequence occurs:</p>
<ol>
<li>
<p>The Microsoft Windows operating system halts execution of   the application.</p>
</li>
<li>
<p>The postmortem debugger is started.</p>
</li>
<li>
<p>The debugger attaches to the application.</p>
</li>
<li>
<p>The debugger issues a "Go" command. (This command is caused by the <b>-g</b> in the <b>AeDebug</b> key.)</p>
</li>
<li>
<p>The target attempts to execute and may or may not encounter the same exception.</p>
</li>
<li>
<p>This exception breaks into the debugger.</p>
</li>
</ol>
<p>There are several problems that can occur because of these events:</p>
<ul>
<li>
<p>Exceptions do not always repeat, possibly because of a transient condition that no longer exists when the exception is restarted.</p>
</li>
<li>
<p>Another event, such as a different exception, might occur. There is no way of knowing whether it is identical to the original event.</p>
</li>
<li>
<p>Attaching a debugger involves injecting a new thread, which can be blocked if a thread is holding the loader lock. Injecting a new thread can be a significant disturbance  of the process.</p>
</li>
</ul>
<p>If you use <b>-c .jdinfo</b> instead of <b>-g</b> in your <b>AeDebug</b> key, no execution occurs. Instead, the exception information is retrieved from the JIT_DEBUG_INFO structure using the %p variable.</p>
<p>For example, consider the following <b>AeDebug</b> key. </p>
<pre class="syntax" xml:space="preserve"><code>ntsd -p %ld -e %ld -c ".jdinfo 0x%p"</code></pre>
<p>The following example is even less invasive. The <b>-pv</b> switch causes the debugger to attach noninvasively, which does not inject any new threads into the target. </p>
<pre class="syntax" xml:space="preserve"><code>ntsd -pv -p %ld -e %ld -c ".jdinfo 0x%p"</code></pre>
<p>If you use this noninvasive option, exiting the debugger does not end the process. You can use the <a href="_kill__kill_process_.htm"><b>.kill (Kill Process)</b></a> command to end the process.</p>
<p>If you want to use this for dump file debugging, you should use <a href="_dump__create_dump_file_.htm"><b>.dump /j</b></a> to add the JIT_DEBUG_INFO structure to your dump file, when the dump file is created.  </p>
<p></p>
<p>The JIT_DEBUG_INFO structure is defined as follows.</p>
<pre class="syntax" xml:space="preserve"><code>typedef struct _JIT_DEBUG_INFO {
    DWORD dwSize;
    DWORD dwProcessorArchitecture;
    DWORD dwThreadID;
    DWORD dwReserved0;
    ULONG64 lpExceptionAddress;
    ULONG64 lpExceptionRecord;
    ULONG64 lpContextRecord;
} JIT_DEBUG_INFO, *LPJIT_DEBUG_INFO;</code></pre>
<p>You can use the dt command to display the  JIT_DEBUG_INFO structure.</p>
<pre class="syntax" xml:space="preserve"><code>0: kd&gt; dt JIT_DEBUG_INFO
nt!JIT_DEBUG_INFO
   +0x000 dwSize           : Uint4B
   +0x004 dwProcessorArchitecture : Uint4B
   +0x008 dwThreadID       : Uint4B
  +0x00c dwReserved0      : Uint4B
   +0x010 lpExceptionAddress : Uint8B
   +0x018 lpExceptionRecord : Uint8B
   +0x020 lpContextRecord  : Uint8B</code></pre>
<p><b>Viewing the Exception Record, Call Stack and LastEvent Using WinDbg</b></p>
<p>After the .jdinfo command has been used to set the context to the moment of failure, you can view the exception record returned by .jdinfo, the call stack and the lastevent, as shown below, to investigate cause. </p>
<pre class="syntax" xml:space="preserve"><code>
0:000&gt; .jdinfo  0x00000000003E0000
----- Exception occurred on thread 0:15c8
ntdll!NtWaitForMultipleObjects+0x14:
00007ffc`81a959a4 c3              ret

----- Exception record at 00000000`003e0028:
ExceptionAddress: 00007ff791d81014 (CrashAV_x64!wmain+0x0000000000000014)
   ExceptionCode: c0000005 (Access violation)
  ExceptionFlags: 00000000
NumberParameters: 2
   Parameter[0]: 0000000000000001
   Parameter[1]: 0000000000000000
Attempt to write to address 0000000000000000
...

0:000&gt; k
  *** Stack trace for last set context - .thread/.cxr resets it
 # Child-SP          RetAddr           Call Site
00 00000000`006ff8b0 00007ff7`91d811d2 CrashAV_x64!wmain+0x14 [c:\my\my_projects\crash\crashav\crashav.cpp @ 14]
01 00000000`006ff8e0 00007ffc`7fa38364 CrashAV_x64!__tmainCRTStartup+0x11a [f:\dd\vctools\crt_bld\self_64_amd64\crt\src\crtexe.c @ 579]
02 00000000`006ff910 00007ffc`81a55e91 KERNEL32!BaseThreadInitThunk+0x14
03 00000000`006ff940 00000000`00000000 ntdll!RtlUserThreadStart+0x21

0:000&gt; .lastevent
Last event: 153c.5d0: Break instruction exception - code 80000003 (first chance)
  debugger time: Thu Sep  8 12:55:08.968 2016 (UTC - 7:00)
</code></pre>
<p>Â </p>
<p>Â </p>
<p><a href="mailto:wsddocfb@microsoft.com?subject=Documentation%20feedback [debugger\debugger]:%20.jdinfo (Use JIT_DEBUG_INFO)%20 RELEASE:%20(3/16/2017)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AWe use your feedback to improve the documentation. We don't use your email address for any other purpose, and we'll remove your email address from our system after the issue that you're reporting is fixed. While we're working to fix this issue, we might send you an email message to ask for more info. Later, we might also send you an email message to let you know that we've addressed your feedback.%0A%0AFor more info about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx." title="Send comments about this topic to Microsoft">Send comments about this topic to Microsoft</a></p>
</div>
<p style="text-align:left;font-family:Arial,sanserif;font-size:100%;color:black">
&#x00a9;&#x00a0;2016 Microsoft. All rights reserved.</p>

</body>
</html>
