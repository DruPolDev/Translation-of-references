<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:mssdk="winsdk" xmlns:script="urn:script" xmlns:build="urn:build" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<meta name="Description" content="Controlling Breakpoint Flags and Parameters"/>
<meta name="MSHAttr" content="PreferredSiteName:MSDN"/>
<meta name="MSHAttr" content="PreferredLib:/library/windows/hardware"/>
<title>Controlling Breakpoint Flags and Parameters</title>

<meta name="MS-HAID" content="Engine_DG_139ab0e2-36b9-463b-bfdd-05cd64791d4f.xml"/>


<link rel="STYLESHEET" type="text/css" HREF="../common/backsdk4.css"/>


</head>
<body>

<div id="mainSection">
<div class="clsServerSDKContent">
<h1><a id="debugger.controlling_breakpoint_flags_and_parameters"></a>Controlling Breakpoint Flags and Parameters</h1>
</div>
<h2><a id="controlling_breakpoint_flags_and_parameters"></a><a id="CONTROLLING_BREAKPOINT_FLAGS_AND_PARAMETERS"></a></h2>
<p>There are a number of methods that can be used to determine basic information about breakpoints:</p>
<ul>
<li>
<p><a href="getid.htm"><b>GetId</b></a> returns the breakpoint ID.</p>
</li>
<li>
<p><a href="gettype.htm"><b>GetType</b></a> returns the breakpoint type (software or processor) and the type of the effective processor on which the breakpoint is set.</p>
</li>
<li>
<p><a href="getadder.htm"><b>GetAdder</b></a> returns the client that added the breakpoint.</p>
</li>
<li>
<p><a href="getoffset.htm"><b>GetOffset</b></a> returns the address of a breakpoint.</p>
</li>
<li>
<p><a href="getoffsetexpression.htm"><b>GetOffsetExpression</b></a> returns the expression string that specifies the location of the breakpoint.</p>
</li>
</ul>
<p>In addition to its location and breakpoint type, a breakpoint has several parameters controlling its behavior.</p>
<p>Breakpoint parameters can be controlled through a variety of specific methods. In addition, most of the parameters may be queried together using <a href="getparameters.htm"><b>GetParameters</b></a>.</p>
<h3><a id="breakpoint_flags"></a><a id="BREAKPOINT_FLAGS"></a>Breakpoint Flags</h3>
<p>Breakpoint flags are one kind of breakpoint parameters.</p>
<p>Breakpoint flags can be queried using <a href="getflags.htm"><b>GetFlags</b></a>. They can be changed by using <a href="addflags.htm"><b>AddFlags</b></a>, <a href="removeflags.htm"><b>RemoveFlags</b></a>, or <a href="setflags.htm"><b>SetFlags</b></a>.</p>
<p>Breakpoint flags form a bit field.  The possible flags that can be used in this bit field, and their meanings, are as follows:</p>
<p></p>
<dl>
<dt><a id="DEBUG_BREAKPOINT_ENABLED"></a><a id="debug_breakpoint_enabled"></a>DEBUG_BREAKPOINT_ENABLED</dt>
<dd>
<p>When this flag is set, the breakpoint is <i>enabled</i> and will have its normal effect.  When this flag is not set, the breakpoint is <i>disabled</i> and will not have any effect.  If you wish to temporarily deactivate a breakpoint, you can remove this flag; it is then easy to add this flag back when you want to re-enable this breakpoint.</p>
</dd>
<dt><a id="DEBUG_BREAKPOINT_ADDER_ONLY"></a><a id="debug_breakpoint_adder_only"></a>DEBUG_BREAKPOINT_ADDER_ONLY</dt>
<dd>
<p>When this flag is set, the breakpoint is a <i>private breakpoint</i>.  This breakpoint is visible only to the client that added it.  In this case, other clients will not be able to query the engine for the breakpoint, and the engine will not send events generated by the breakpoint to other clients.  All callbacks (event and <a href="using_input_and_output.htm#output">output</a>) related to this breakpoint will be sent only to this client.  See <a href="getadder.htm"><b>GetAdder</b></a>.</p>
</dd>
<dt><a id="DEBUG_BREAKPOINT_GO_ONLY"></a><a id="debug_breakpoint_go_only"></a>DEBUG_BREAKPOINT_GO_ONLY</dt>
<dd>
<p>When this flag is set, the breakpoint will only be triggered if the target is in unrestricted execution.  It will not be triggered if the engine is stepping through instructions in the target.  </p>
</dd>
<dt><a id="DEBUG_BREAKPOINT_ONE_SHOT"></a><a id="debug_breakpoint_one_shot"></a>DEBUG_BREAKPOINT_ONE_SHOT</dt>
<dd>
<p>When this flag is set, the breakpoint will automatically remove itself the first time it is triggered.</p>
</dd>
<dt><a id="DEBUG_BREAKPOINT_DEFERRED"></a><a id="debug_breakpoint_deferred"></a>DEBUG_BREAKPOINT_DEFERRED</dt>
<dd>
<p>When this flag is set, the breakpoint is <i>deferred</i>. This flag is set by the engine when the offset of the breakpoint is specified using a symbolic expression, and the engine cannot evaluate the expression.  Every time a module is loaded or unleaded in the target, the engine will attempt reevaluate the expression for all breakpoints whose location is specified using an expression.  Those that cannot be evaluated are flagged as deferred.  <u>This flag cannot be modified by any client.</u></p>
</dd>
</dl>
<h3><a id="other_breakpoint_parameters"></a><a id="OTHER_BREAKPOINT_PARAMETERS"></a>Other Breakpoint Parameters</h3>
<p>Breakpoint parameters also include:</p>
<p></p>
<dl>
<dt><a id="Pass_count"></a><a id="pass_count"></a><a id="PASS_COUNT"></a><i>Pass count</i></dt>
<dd>
<p>If the breakpoint has a pass count associated with it, it will not be activated until the target has passed the breakpoint the specified number of times.  The pass count that was originally set can be found by using <a href="getpasscount.htm"><b>GetPassCount</b></a>. The number of times remaining that the engine will pass the breakpoint before it is activated can be found using <a href="getcurrentpasscount.htm"><b>GetCurrentPassCount</b></a>. The pass count can be reset to a new value by using <a href="setpasscount.htm"><b>SetPassCount</b></a>.</p>
</dd>
<dt><a id="Match_thread"></a><a id="match_thread"></a><a id="MATCH_THREAD"></a><i>Match thread</i></dt>
<dd>
<p>If the breakpoint has a thread associated with it, it will be ignored by the engine when it is encountered by any other thread.  The thread can be found by using <a href="getmatchthreadid.htm"><b>GetMatchThreadId</b></a>, and can be changed by using <a href="setmatchthreadid.htm"><b>SetMatchThreadId</b></a>.</p>
</dd>
<dt><a id="Command"></a><a id="command"></a><a id="COMMAND"></a><i>Command</i></dt>
<dd>
<p>The breakpoint may have a command associated with it.  The command is executed when the breakpoint is activated.  This command can be found by using <a href="getcommand.htm"><b>GetCommand</b></a>, and can be changed by using <a href="setcommand.htm"><b>SetCommand</b></a>.</p>
</dd>
<dt><a id="Size"></a><a id="size"></a><a id="SIZE"></a><i>Size</i></dt>
<dd>
<p>If the breakpoint is a processor breakpoint, it must have a specified size.  This determines the size of the block of memory whose access will activate the breakpoint -- the beginning of the block is the breakpoint's location.  The size  can be found by using <a href="getdataparameters.htm"><b>GetDataParameters</b></a>, and can be changed by using <a href="setdataparameters.htm"><b>SetDataParameters</b></a>.</p>
</dd>
<dt><a id="Access_type"></a><a id="access_type"></a><a id="ACCESS_TYPE"></a><i>Access type</i></dt>
<dd>
<p>If the breakpoint is a processor breakpoint, it must have an access type.  This determines the type of access that will activate the breakpoint.  For example, the breakpoint may be activated if the target reads from, writes to, or executes the memory specified by the breakpoint.  The access type can be found by using <a href="getdataparameters.htm"><b>GetDataParameters</b></a>, and can be changed by using <a href="setdataparameters.htm"><b>SetDataParameters</b></a>.</p>
</dd>
</dl>
<h3><a id="valid_parameters_for_processor_breakpoints"></a><a id="VALID_PARAMETERS_FOR_PROCESSOR_BREAKPOINTS"></a>Valid Parameters for Processor Breakpoints</h3>
<p>The following access types are available for processor breakpoints:</p>
<table>
<tr>
<th>Value</th>
<th>Description</th>
</tr>
<tr>
<td>
<p>DEBUG_BREAK_READ</p>
</td>
<td>
<p>The breakpoint will be triggered when the CPU reads memory in the breakpoint's memory block.</p>
</td>
</tr>
<tr>
<td>
<p>DEBUG_BREAK_WRITE</p>
</td>
<td>
<p>The breakpoint will be triggered when the CPU writes memory in the breakpoint's memory block.</p>
</td>
</tr>
<tr>
<td>
<p>
<dl>
<dt>DEBUG_BREAK_READ</dt>
<dt>| DEBUG_BREAK_WRITE</dt>
</dl>
</p>
</td>
<td>
<p>The breakpoint will be triggered when the CPU reads or writes memory in the breakpoint's memory block.</p>
</td>
</tr>
<tr>
<td>
<p>DEBUG_BREAK_EXECUTE</p>
</td>
<td>
<p>The breakpoint will be triggered when the CPU fetches the instruction in the breakpoint's memory block.</p>
</td>
</tr>
<tr>
<td>
<p>DEBUG_BREAK_IO</p>
</td>
<td>
<p>The breakpoint will be triggered when the I/O port in the breakpoints memory block is accessed.  (Windows XP and Microsoft Windows Server 2003 only, kernel mode only, x86 only)</p>
</td>
</tr>
</table>
<p>Â </p>
<p>Not all access types and sizes are supported on all processors.  The following access types and sizes are supported:</p>
<p></p>
<dl>
<dt><a id="x86"></a><a id="X86"></a>x86</dt>
<dd>
<p>All access types are supported.  DEBUG_BREAK_READ behaves like DEBUG_BREAK_READ | DEBUG_BREAK_WRITE.  The size must be 1, 2, or 4.  The breakpoint's address must be a multiple of the size.</p>
</dd>
<dt><a id="x64"></a><a id="X64"></a>x64</dt>
<dd>
<p>All access types are supported.  DEBUG_BREAK_READ behaves like DEBUG_BREAK_READ | DEBUG_BREAK_WRITE.  The size must be 1, 2, 4, or 8.  The breakpoint's address must be a multiple of the size.</p>
</dd>
<dt><a id="Itanium"></a><a id="itanium"></a><a id="ITANIUM"></a>Itanium</dt>
<dd>
<p>All access types except DEBUG_BREAK_IO are supported.  The size must be a power of two; for DEBUG_BREAK_EXECUTE, the size must be 16.  The breakpoint's address must be a multiple of the size.</p>
</dd>
<dt><a id="Itanium_running_in_x86_mode"></a><a id="itanium_running_in_x86_mode"></a><a id="ITANIUM_RUNNING_IN_X86_MODE"></a>Itanium running in x86 mode</dt>
<dd>
<p>The is the same as for x86, except that DEBUG_BREAK_IO is not supported.</p>
</dd>
</dl>
<p>Â </p>
<p>Â </p>
<p><a href="mailto:wsddocfb@microsoft.com?subject=Documentation%20feedback [debugger\debugger]:%20Controlling Breakpoint Flags and Parameters%20 RELEASE:%20(3/16/2017)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AWe use your feedback to improve the documentation. We don't use your email address for any other purpose, and we'll remove your email address from our system after the issue that you're reporting is fixed. While we're working to fix this issue, we might send you an email message to ask for more info. Later, we might also send you an email message to let you know that we've addressed your feedback.%0A%0AFor more info about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx." title="Send comments about this topic to Microsoft">Send comments about this topic to Microsoft</a></p>
</div>
<p style="text-align:left;font-family:Arial,sanserif;font-size:100%;color:black">
&#x00a9;&#x00a0;2016 Microsoft. All rights reserved.</p>

</body>
</html>
