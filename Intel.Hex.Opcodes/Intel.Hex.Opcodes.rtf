{\rtf1\ansi\deff0
{\fonttbl{\f0\fswiss Arial;}{\f1\fswiss Times New Roman;}{\f2\fswiss Courier New;}}
{\colortbl;\red0\green0\blue255;\red0\green0\blue127;\red255\green0\blue0;}
{\stylesheet{\fs20 \snext0 Normal;}
}\pard\plain
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0001}
{\up $}{\footnote\pard\plain{\up $} IntelHexOpcodesAndMnemonics}
{\up #}{\footnote\pard\plain{\up #} IntelHexOpcodesAndMnemonics}
\pard\keepn \fs20 
\par 
\par \pard \f1\b\fs50\cf1 Intel Hex Opcodes And Mnemonics
\par \plain\f1\fs24         
\par         \uldb \f2\b Intel 8086 Family Architecture\plain\f2\b\fs24 {\v Intel8086FamilyArchitecture>main} 
\par \plain\f1\fs24         \uldb \f2\b Instruction Clock Cycle Calculation\plain\f2\b\fs24 {\v InstructionClockCycleCalculation>main} 
\par \plain\f1\fs24         \uldb \f2\b 8088/8086\plain\f2\b\fs24 {\v 80888086>main} Effective Address (EA) Calculation 
\par \plain\f1\fs24         \uldb \f2\b Task State Calculation\plain\f2\b\fs24 {\v TaskStateCalculation>main} 
\par \plain\f1\fs24         \uldb \f2\b FLAGS - Intel 8086 Family Flags Register\plain\f2\b\fs24 {\v FLAGS-Intel8086FamilyFlagsRegister>main} 
\par \plain\f1\fs24         \uldb \f2\b MSW - Machine Status Word (286+ only)\plain\f2\b\fs24 {\v MSW-MachineStatusWord286only>main} 
\par \plain\f1\fs24         \uldb \f2\b Bare Hex Opcodes And Mnemonics\plain\f2\b\fs24 {\v BareHexOpcodesAndMnemonics>main} 
\par \pard \plain\f1\fs24         \uldb \f2\b Conditional Jump Table\plain\f2\b\fs24 {\v Jxx>main}
\par \fs20      
\par \plain\fs20 
\par \f1\b\fs30\cf1     8086/80186/80286/80386/80486 Instruction Set
\par \plain\fs20 
\par \f2\b       \uldb AAA\plain\f2\b\fs20 {\v AAA>main} - Ascii Adjust for Addition 
\par       \uldb AAD\plain\f2\b\fs20 {\v AAD>main} - Ascii Adjust for Division 
\par       \uldb AAM\plain\f2\b\fs20 {\v AAM>main} - Ascii Adjust for Multiplication 
\par       \uldb AAS\plain\f2\b\fs20 {\v AAS>main} - Ascii Adjust for Subtraction 
\par       \uldb ADC\plain\f2\b\fs20 {\v ADC>main} - Add With Carry 
\par       \uldb ADD\plain\f2\b\fs20 {\v ADD>main} - Arithmetic Addition 
\par       \uldb AND\plain\f2\b\fs20 {\v AND>main} - Logical And 
\par       \uldb ARPL\plain\f2\b\fs20 {\v ARPL>main} - Adjusted Requested Privilege Level of Selector (286+ PM) 
\par \pard       \uldb BOUND\plain\f2\b\fs20 {\v BOUND>main} - Array Index Bound Check (80188+) 
\par       \uldb BSF\plain\f2\b\fs20 {\v BSF>main} - Bit Scan Forward (386+) 
\par       \uldb BSR\plain\f2\b\fs20 {\v BSR>main} - Bit Scan Reverse  (386+) 
\par       \uldb BSWAP\plain\f2\b\fs20 {\v BSWAP>main} - Byte Swap         (486+) 
\par       \uldb BT\plain\f2\b\fs20 {\v BT>main} - Bit Test         (386+) 
\par       \uldb BTC\plain\f2\b\fs20 {\v BTC>main} - Bit Test with Compliment (386+) 
\par       \uldb BTR\plain\f2\b\fs20 {\v BTR>main} - Bit Test with Reset (386+) 
\par       \uldb BTS\plain\f2\b\fs20 {\v BTS>main} - Bit Test and Set  (386+) 
\par       \uldb CALL\plain\f2\b\fs20 {\v CALL>main} - Procedure Call 
\par       \uldb CBW\plain\f2\b\fs20 {\v CBW>main} - Convert Byte to Word 
\par \pard       \uldb CDQ\plain\f2\b\fs20 {\v CDQ>main} - Convert Double to Quad (386+) 
\par       \uldb CLC\plain\f2\b\fs20 {\v CLC>main} - Clear Carry 
\par       \uldb CLD\plain\f2\b\fs20 {\v CLD>main} - Clear Direction Flag 
\par       \uldb CLI\plain\f2\b\fs20 {\v CLI>main} - Clear Interrupt Flag (disable) 
\par       \uldb CLTS\plain\f2\b\fs20 {\v CLTS>main} - Clear Task Switched Flag (286+ privileged) 
\par       \uldb CMC\plain\f2\b\fs20 {\v CMC>main} - Complement Carry Flag 
\par       \uldb CMP\plain\f2\b\fs20 {\v CMP>main} - Compare 
\par       \uldb CMPS\plain\f2\b\fs20 {\v CMPS>main} - Compare String (Byte, Word or Doubleword) 
\par       \uldb CMPXCHG\plain\f2\b\fs20 {\v CMPXCHG>main} - Compare and Exchange 
\par       \uldb CWD\plain\f2\b\fs20 {\v CWD>main} - Convert Word to Doubleword 
\par \pard       \uldb CWDE\plain\f2\b\fs20 {\v CWDE>main} - Convert Word to Extended Doubleword (386+) 
\par       \uldb DAA\plain\f2\b\fs20 {\v DAA>main} - Decimal Adjust for Addition 
\par       \uldb DAS\plain\f2\b\fs20 {\v DAS>main} - Decimal Adjust for Subtraction 
\par       \uldb DEC\plain\f2\b\fs20 {\v DEC>main} - Decrement 
\par       \uldb DIV\plain\f2\b\fs20 {\v DIV>main} - Divide 
\par       \uldb ENTER\plain\f2\b\fs20 {\v ENTER>main} - Make Stack Frame  (80188+) 
\par       \uldb ESC\plain\f2\b\fs20 {\v ESC>main} - Escape 
\par       \uldb HLT\plain\f2\b\fs20 {\v HLT>main} - Halt CPU 
\par       \uldb IDIV\plain\f2\b\fs20 {\v IDIV>main} - Signed Integer Division 
\par       \uldb IMUL\plain\f2\b\fs20 {\v IMUL>main} - Signed Multiply 
\par       \uldb IN\plain\f2\b\fs20 {\v IN>main} - Input Byte or Word From Port 
\par \pard       \uldb INC\plain\f2\b\fs20 {\v INC>main} - Increment 
\par       \uldb INS\plain\f2\b\fs20 {\v INS>main} - Input String from Port  (80188+) 
\par       \uldb INT\plain\f2\b\fs20 {\v INT>main} - Interrupt 
\par       \uldb INTO\plain\f2\b\fs20 {\v INTO>main} - Interrupt on Overflow 
\par       \uldb INVD\plain\f2\b\fs20 {\v INVD>main} - Invalidate Cache  (486+) 
\par       \uldb INVLPG\plain\f2\b\fs20 {\v INVLPG>main} - Invalidate Translation Look-Aside Buffer Entry (486+) 
\par       \uldb IRET/IRETD\plain\f2\b\fs20 {\v IRETIRETD>main} - Interrupt Return 
\par       \uldb Jxx\plain\f2\b\fs20 {\v Jxx>main} - Jump Instructions Table 
\par       \uldb JCXZ/JECXZ\plain\f2\b\fs20 {\v JCXZJECXZ>main} - Jump if Register (E)CX is Zero 
\par \pard       \uldb JMP\plain\f2\b\fs20 {\v JMP>main} - Unconditional Jump 
\par       \uldb LAHF\plain\f2\b\fs20 {\v LAHF>main} - Load Register AH From Flags 
\par       \uldb LAR\plain\f2\b\fs20 {\v LAR>main} - Load Access Rights (286+ protected) 
\par       \uldb LDS\plain\f2\b\fs20 {\v LDS>main} - Load Pointer Using DS 
\par       \uldb LEA\plain\f2\b\fs20 {\v LEA>main} - Load Effective Address 
\par       \uldb LEAVE\plain\f2\b\fs20 {\v LEAVE>main} - Restore Stack for Procedure Exit (80188+) 
\par       \uldb LES\plain\f2\b\fs20 {\v LES>main} - Load Pointer Using ES 
\par       \uldb LFS\plain\f2\b\fs20 {\v LFS>main} - Load Pointer Using FS (386+) 
\par       \uldb LGDT\plain\f2\b\fs20 {\v LGDT>main} - Load Global Descriptor Table (286+ privileged) 
\par \pard       \uldb LIDT\plain\f2\b\fs20 {\v LIDT>main} - Load Interrupt Descriptor Table (286+ privileged) 
\par       \uldb LGS\plain\f2\b\fs20 {\v LGS>main} - Load Pointer Using GS (386+) 
\par       \uldb LLDT\plain\f2\b\fs20 {\v LLDT>main} - Load Local Descriptor Table (286+ privileged) 
\par       \uldb LMSW\plain\f2\b\fs20 {\v LMSW>main} - Load Machine Status Word (286+ privileged) 
\par       \uldb LOCK\plain\f2\b\fs20 {\v LOCK>main} - Lock Bus 
\par       \uldb LODS\plain\f2\b\fs20 {\v LODS>main} - Load String (Byte, Word or Double) 
\par       \uldb LOOP\plain\f2\b\fs20 {\v LOOP>main} - Decrement CX and Loop if CX Not Zero 
\par       \uldb LOOPE/LOOPZ\plain\f2\b\fs20 {\v LOOPELOOPZ>main} - Loop While Equal / Loop While Zero 
\par \pard       \uldb LOOPNZ/LOOPNE\plain\f2\b\fs20 {\v LOOPNZLOOPNE>main} - Loop While Not Zero / Loop While Not Equal 
\par       \uldb LSL\plain\f2\b\fs20 {\v LSL>main} - Load Segment Limit (286+ protected) 
\par       \uldb LSS\plain\f2\b\fs20 {\v LSS>main} - Load Pointer Using SS (386+) 
\par       \uldb LTR\plain\f2\b\fs20 {\v LTR>main} - Load Task Register (286+ privileged) 
\par       \uldb MOV\plain\f2\b\fs20 {\v MOV>main} - Move Byte or Word 
\par       \uldb MOVS\plain\f2\b\fs20 {\v MOVS>main} - Move String (Byte or Word) 
\par       \uldb MOVSX\plain\f2\b\fs20 {\v MOVSX>main} - Move with Sign Extend (386+) 
\par       \uldb MOVZX\plain\f2\b\fs20 {\v MOVZX>main} - Move with Zero Extend (386+) 
\par       \uldb MUL\plain\f2\b\fs20 {\v MUL>main} - Unsigned Multiply 
\par \pard       \uldb NEG\plain\f2\b\fs20 {\v NEG>main} - Two's Complement Negation 
\par       \uldb NOP\plain\f2\b\fs20 {\v NOP>main} - No Operation (90h) 
\par       \uldb NOT\plain\f2\b\fs20 {\v NOT>main} - One's Compliment Negation (Logical NOT) 
\par       \uldb OR\plain\f2\b\fs20 {\v OR>main} - Inclusive Logical OR 
\par       \uldb OUT\plain\f2\b\fs20 {\v OUT>main} - Output Data to Port 
\par       \uldb OUTS\plain\f2\b\fs20 {\v OUTS>main} - Output String to Port  (80188+) 
\par       \uldb POP\plain\f2\b\fs20 {\v POP>main} - Pop Word off Stack 
\par       \uldb POPA/POPAD\plain\f2\b\fs20 {\v POPAPOPAD>main} - Pop All Registers onto Stack    (80188+) 
\par       \uldb POPF/POPFD\plain\f2\b\fs20 {\v POPFPOPFD>main} - Pop Flags off Stack 
\par \pard       \uldb PUSH\plain\f2\b\fs20 {\v PUSH>main} - Push Word onto Stack 
\par       \uldb PUSHA/PUSHAD\plain\f2\b\fs20 {\v PUSHAPUSHAD>main} - Push All Registers onto Stack  (80188+) 
\par       \uldb PUSHF/PUSHFD\plain\f2\b\fs20 {\v PUSHFPUSHFD>main} - Push Flags onto Stack 
\par       \uldb RCL\plain\f2\b\fs20 {\v RCL>main} - Rotate Through Carry Left 
\par       \uldb RCR\plain\f2\b\fs20 {\v RCR>main} - Rotate Through Carry Right 
\par       \uldb REP\plain\f2\b\fs20 {\v REP>main} - Repeat String Operation 
\par       \uldb REPE/REPZ\plain\f2\b\fs20 {\v REPEREPZ>main} - Repeat Equal / Repeat Zero 
\par       \uldb REPNE/REPNZ\plain\f2\b\fs20 {\v REPNEREPNZ>main} - Repeat Not Equal / Repeat Not Zero 
\par       \uldb RET/RETF\plain\f2\b\fs20 {\v RETRETF>main} - Return From Procedure 
\par \pard       \uldb ROL\plain\f2\b\fs20 {\v ROL>main} - Rotate Left 
\par       \uldb ROR\plain\f2\b\fs20 {\v ROR>main} - Rotate Right 
\par       \uldb SAHF\plain\f2\b\fs20 {\v SAHF>main} - Store AH Register into FLAGS 
\par       \uldb SAL/SHL\plain\f2\b\fs20 {\v SALSHL>main} - Shift Arithmetic Left / Shift Logical Left 
\par       \uldb SAR\plain\f2\b\fs20 {\v SAR>main} - Shift Arithmetic Right 
\par       \uldb SBB\plain\f2\b\fs20 {\v SBB>main} - Subtract with Borrow/Carry 
\par       \uldb SCAS\plain\f2\b\fs20 {\v SCAS>main} - Scan String  (Byte, Word or Doubleword) 
\par       \uldb SETAE/SETNB\plain\f2\b\fs20 {\v SETAESETNB>main} - Set if Above or Equal / Set if Not Below (386+) 
\par       \uldb SETB/SETNAE\plain\f2\b\fs20 {\v SETBSETNAE>main} - Set if Below / Set if Not Above or Equal (386+) 
\par \pard       \uldb SETBE/SETNA\plain\f2\b\fs20 {\v SETBESETNA>main} - Set if Below or Equal / Set if Not Above (386+) 
\par       \uldb SETE/SETZ\plain\f2\b\fs20 {\v SETESETZ>main} - Set if Equal / Set if Zero (386+) 
\par       \uldb SETNE/SETNZ\plain\f2\b\fs20 {\v SETNESETNZ>main} - Set if Not Equal / Set if Not Zero (386+) 
\par       \uldb SETL/SETNGE\plain\f2\b\fs20 {\v SETLSETNGE>main} - Set if Less / Set if Not Greater or Equal (386+) 
\par       \uldb SETGE/SETNL\plain\f2\b\fs20 {\v SETGESETNL>main} - Set if Greater or Equal / Set if Not Less (386+) 
\par       \uldb SETLE/SETNG\plain\f2\b\fs20 {\v SETLESETNG>main} - Set if Less or Equal / Set if Not greater or Equal 
\par       \uldb SETG/SETNLE\plain\f2\b\fs20 {\v SETGSETNLE>main} - Set if Greater / Set if Not Less or Equal (386+) 
\par \pard       \uldb SETS\plain\f2\b\fs20 {\v SETS>main} - Set if Signed (386+) 
\par       \uldb SETNS\plain\f2\b\fs20 {\v SETNS>main} - Set if Not Signed (386+) 
\par       \uldb SETC\plain\f2\b\fs20 {\v SETC>main} - Set if Carry (386+) 
\par       \uldb SETNC\plain\f2\b\fs20 {\v SETNC>main} - Set if Not Carry (386+) 
\par       \uldb SETO\plain\f2\b\fs20 {\v SETO>main} - Set if Overflow (386+) 
\par       \uldb SETNO\plain\f2\b\fs20 {\v SETNO>main} - Set if Not Overflow (386+) 
\par       \uldb SETP/SETPE\plain\f2\b\fs20 {\v SETPSETPE>main} - Set if Parity / Set if Parity Even  (386+) 
\par       \uldb SETNP/SETPO\plain\f2\b\fs20 {\v SETNPSETPO>main} - Set if No Parity / Set if Parity Odd (386+) 
\par       \uldb SGDT\plain\f2\b\fs20 {\v SGDT>main} - Store Global Descriptor Table (286+ privileged) 
\par \pard       \uldb SIDT\plain\f2\b\fs20 {\v SIDT>main} - Store Interrupt Descriptor Table (286+ privileged) 
\par       \uldb SHL\plain\f2\b\fs20 {\v SHL>main} - Shift Logical Left 
\par       \uldb SHR\plain\f2\b\fs20 {\v SHR>main} - Shift Logical Right 
\par       \uldb SHLD/SHRD\plain\f2\b\fs20 {\v SHLDSHRD>main} - Double Precision Shift (386+) 
\par       \uldb SLDT\plain\f2\b\fs20 {\v SLDT>main} - Store Local Descriptor Table (286+ privileged) 
\par       \uldb SMSW\plain\f2\b\fs20 {\v SMSW>main} - Store Machine Status Word (286+ privileged) 
\par       \uldb STC\plain\f2\b\fs20 {\v STC>main} - Set Carry 
\par       \uldb STD\plain\f2\b\fs20 {\v STD>main} - Set Direction Flag 
\par       \uldb STI\plain\f2\b\fs20 {\v STI>main} - Set Interrupt Flag  (Enable Interrupts) 
\par \pard       \uldb STOS\plain\f2\b\fs20 {\v STOS>main} - Store String  (Byte, Word or Doubleword) 
\par       \uldb STR\plain\f2\b\fs20 {\v STR>main} - Store Task Register (286+ privileged) 
\par       \uldb SUB\plain\f2\b\fs20 {\v SUB>main} - Subtract 
\par       \uldb TEST\plain\f2\b\fs20 {\v TEST>main} - Test For Bit Pattern 
\par       \uldb VERR\plain\f2\b\fs20 {\v VERR>main} - Verify Read (286+ protected) 
\par       \uldb VERW\plain\f2\b\fs20 {\v VERW>main} - Verify Write (286+ protected) 
\par       \uldb WAIT/FWAIT\plain\f2\b\fs20 {\v WAITFWAIT>main} - Event Wait 
\par       \uldb WBINVD\plain\f2\b\fs20 {\v WBINVD>main} - Write-Back and Invalidate Cache (486+) 
\par       \uldb XCHG\plain\f2\b\fs20 {\v XCHG>main} - Exchange 
\par       \uldb XLAT/XLATB\plain\f2\b\fs20 {\v XLATXLATB>main} - Translate 
\par \pard       \uldb XOR\plain\f2\b\fs20 {\v XOR>main} - Exclusive OR 
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0002}
{\up $}{\footnote\pard\plain{\up $} Intel8086FamilyArchitecture}
{\up #}{\footnote\pard\plain{\up #} Intel8086FamilyArchitecture}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} Intel 8086 Family Architecture}

\par 
\par \pard 
\par \f1\b\fs30\cf1 Intel 8086 Family Architecture
\par \plain\fs20 
\par \f2\b         General Purpose Registers               Segment Registers
\par         AH/AL  AX  (EAX)  Accumulator            CS     Code Segment
\par         BH/BL  BX  (EBX)  Base                   DS     Data Segment
\par         CH/CL  CX  (ECX)  Counter                SS     Stack Segment
\par         DH/DL  DX  (EDX)  Data                   ES     Extra Segment
\par                                                 (FS)    \cf1 386\plain\f2\b\fs20  and newer
\par     (Exx) indicates \cf1 386\plain\f2\b\fs20 + \cf1 32\plain\f2\b\fs20  bit register    (GS)    \cf1 386\plain\f2\b\fs20  and newer
\par \pard         Pointer Registers                       Stack Registers
\par         SI (ESI)  Source Index                  SP (ESP)  Stack Pointer
\par         DI (EDI)  Destination Index             BP (EBP)  Base Pointer
\par         IP        Instruction Pointer
\par         Status Registers
\par         FLAGS Status Flags   (see FLAGS)
\par         Special Registers (\cf1 386\plain\f2\b\fs20 + only)
\par         CR\cf1 0\plain\f2\b\fs20      Control Register \cf1 0\plain\f2\b\fs20         DR\cf1 0\plain\f2\b\fs20     Debug Register \cf1 0
\par \plain\f2\b\fs20         CR\cf1 2\plain\f2\b\fs20      Control Register \cf1 2\plain\f2\b\fs20         DR\cf1 1\plain\f2\b\fs20     Debug Register \cf1 1
\par \pard \plain\f2\b\fs20         CR\cf1 3\plain\f2\b\fs20      Control Register \cf1 3\plain\f2\b\fs20         DR\cf1 2\plain\f2\b\fs20     Debug Register \cf1 2
\par \plain\f2\b\fs20                                           DR\cf1 3\plain\f2\b\fs20     Debug Register \cf1 3
\par \plain\f2\b\fs20         TR\cf1 4\plain\f2\b\fs20      Test Register \cf1 4\plain\f2\b\fs20            DR\cf1 6\plain\f2\b\fs20     Debug Register \cf1 6
\par \plain\f2\b\fs20         TR\cf1 5\plain\f2\b\fs20      Test Register \cf1 5\plain\f2\b\fs20            DR\cf1 7\plain\f2\b\fs20     Debug Register \cf1 7
\par \plain\f2\b\fs20         TR\cf1 6\plain\f2\b\fs20      Test Register \cf1 6
\par \plain\f2\b\fs20         TR\cf1 7\plain\f2\b\fs20      Test Register \cf1 7
\par \plain\f2\b\fs20         
\par \pard         Register          Default Segment    Valid Overrides
\par         BP                      SS              DS, ES, CS
\par         SI or DI                DS              ES, SS, CS
\par         DI strings              ES              None
\par         SI strings              DS              ES, SS, CS
\par \plain\fs20 
\par \f2\b     - see  CPU   DETECTING    Instruction Timing
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0003}
{\up $}{\footnote\pard\plain{\up $} InstructionClockCycleCalculation}
{\up #}{\footnote\pard\plain{\up #} InstructionClockCycleCalculation}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} Instruction Clock Cycle Calculation}
\plain\fs20 
\par 
\par \pard \f1\b\fs30\cf1 Instruction Clock Cycle Calculation
\par \plain\fs20 
\par \f2\b         Some instructions require additional clock cycles due to a "Next
\par         Instruction Component" identified by a "+m" in the instruction
\par         clock cycle listings.  This is due to the prefetch queue being
\par         purge on a control transfers.   Below is the general rule for
\par         calculating "m":
\par         \cf1 88\plain\f2\b\fs20 /\cf1 86\plain\f2\b\fs20  not applicable
\par         \cf1 286\plain\f2\b\fs20   "m" is the number of bytes in the next instruction
\par \pard         \cf1 386\plain\f2\b\fs20   "m" is the number of components in the next instruction
\par                 (the instruction coding (each byte), plus the data and
\par                 the displacement are all considered components)
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0004}
{\up $}{\footnote\pard\plain{\up $} 80888086}
{\up #}{\footnote\pard\plain{\up #} 80888086}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} 8088/8086}

\par 
\par \pard \f1\b\fs30\cf1 8088\plain\f1\b\fs30 /\cf1 8086 Effective Address (EA) Calculation
\par \plain\fs20 
\par \f2\b                    Description                            Clock Cycles
\par         Displacement                                            \cf1 6
\par \plain\f2\b\fs20         Base or Index (BX,BP,SI,DI)                             \cf1 5
\par \plain\f2\b\fs20         Displacement+(Base or Index)                            \cf1 9
\par \plain\f2\b\fs20         Base+Index (BP+DI,BX+SI)                                \cf1 7
\par \plain\f2\b\fs20         Base+Index (BP+SI,BX+DI)                                \cf1 8
\par \pard \plain\f2\b\fs20         Base+Index+Displacement (BP+DI,BX+SI)                  \cf1 11
\par \plain\f2\b\fs20         Base+Index+Displacement (BP+SI+disp,BX+DI+disp)        \cf1 12
\par \plain\f2\b\fs20         - add \cf1 4\plain\f2\b\fs20  cycles for word operands at odd addresses
\par         - add \cf1 2\plain\f2\b\fs20  cycles for segment override
\par         - \cf1 80188\plain\f2\b\fs20 /\cf1 80186\plain\f2\b\fs20  timings differ from those of the \cf1 8088\plain\f2\b\fs20 /\cf1 8086\plain\f2\b\fs20 /\cf1 80286
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0005}
{\up $}{\footnote\pard\plain{\up $} TaskStateCalculation}
{\up #}{\footnote\pard\plain{\up #} TaskStateCalculation}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} Task State Calculation}
\plain\fs20 
\par 
\par \pard 
\par \f1\b\fs30\cf1 Task State Calculation
\par \plain\fs20 
\par \f2\b         "TS" is defined as switching from VM/\cf1 486\plain\f2\b\fs20  or \cf1 80286\plain\f2\b\fs20  TSS to one of
\par         the following:
\par                         .---------------------------------------.
\par                         |               New Task                |
\par                         |-------.-------.-------.-------.-------|
\par         .---------------|\cf1 486\plain\f2\b\fs20  TSS|\cf1 486\plain\f2\b\fs20  TSS|\cf1 386\plain\f2\b\fs20  TSS|\cf1 386\plain\f2\b\fs20  TSS|\cf1 286\plain\f2\b\fs20  TSS|
\par         |   Old Task    | (VM=\cf1 0\plain\f2\b\fs20 )| (VM=\cf1 1\plain\f2\b\fs20 )| (VM=\cf1 0\plain\f2\b\fs20 )| (VM=\cf1 1\plain\f2\b\fs20 )|       |
\par \pard         '---------------|-------|-------|-------|-------|-------|
\par         \cf1 386\plain\f2\b\fs20  TSS (VM=\cf1 0\plain\f2\b\fs20 )  |       |       |  \cf1 309\plain\f2\b\fs20   |  \cf1 226\plain\f2\b\fs20   |  \cf1 282\plain\f2\b\fs20   |
\par                         |-------|-------|-------|-------|-------|
\par         \cf1 386\plain\f2\b\fs20  TSS (VM=\cf1 1\plain\f2\b\fs20 )  |       |       |  \cf1 314\plain\f2\b\fs20   |  \cf1 231\plain\f2\b\fs20   |  \cf1 287\plain\f2\b\fs20   |
\par                         |-------|-------|-------|-------|-------|
\par         \cf1 386\plain\f2\b\fs20  CPU/\cf1 286\plain\f2\b\fs20  TSS |       |       |  \cf1 307\plain\f2\b\fs20   |  \cf1 224\plain\f2\b\fs20   |  \cf1 280\plain\f2\b\fs20   |
\par \pard                         |-------|-------|-------|-------|-------|
\par         \cf1 486\plain\f2\b\fs20  CPU/\cf1 286\plain\f2\b\fs20  TSS |  \cf1 199\plain\f2\b\fs20   |  \cf1 177\plain\f2\b\fs20   |       |       |  \cf1 180\plain\f2\b\fs20   |
\par                         '---------------------------------------'
\par                              
\par         Miscellaneous
\par         - all timings are for best case and do not take into account wait
\par           states, instruction alignment, the state of the prefetch queue,
\par           DMA refresh cycles, cache hits/misses or exception processing.
\par \pard         - to convert clocks to nanoseconds divide one microsecond by the
\par           processor speed in MegaHertz:
\par    
\par           (\cf1 1000\plain\f2\b\fs20 MHz/(n MHz)) = X nanoseconds
\par \plain\fs20 
\par \f2\b         - see   \cf1 8086\plain\f2\b\fs20  Architecture
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0006}
{\up $}{\footnote\pard\plain{\up $} FLAGS-Intel8086FamilyFlagsRegister}
{\up #}{\footnote\pard\plain{\up #} FLAGS-Intel8086FamilyFlagsRegister}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} FLAGS - Intel 8086 Family Flags Register}
\plain\fs20 
\par 
\par \pard \f1\b\fs30\cf1 FLAGS - Intel 8086 Family Flags Register
\par \plain\fs20 
\par \f2\b       |\cf1 11\plain\f2\b\fs20 |\cf1 10\plain\f2\b\fs20 |\cf1 F\plain\f2\b\fs20 |\cf1 E\plain\f2\b\fs20 |\cf1 D\plain\f2\b\fs20 |\cf1 C\plain\f2\b\fs20 |\cf1 B\plain\f2\b\fs20 |\cf1 A\plain\f2\b\fs20 |\cf1 9\plain\f2\b\fs20 |\cf1 8\plain\f2\b\fs20 |\cf1 7\plain\f2\b\fs20 |\cf1 6\plain\f2\b\fs20 |\cf1 5\plain\f2\b\fs20 |\cf1 4\plain\f2\b\fs20 |\cf1 3\plain\f2\b\fs20 |\cf1 2\plain\f2\b\fs20 |\cf1 1\plain\f2\b\fs20 |\cf1 0\plain\f2\b\fs20 |
\par         |  | | | | | | | | | | | | | | | | '---  CF Carry Flag
\par         |  | | | | | | | | | | | | | | | '---  \cf1 1
\par \plain\f2\b\fs20         |  | | | | | | | | | | | | | | '---  PF Parity Flag
\par         |  | | | | | | | | | | | | | '---  \cf1 0
\par \plain\f2\b\fs20         |  | | | | | | | | | | | | '---  AF Auxiliary Flag
\par \pard         |  | | | | | | | | | | | '---  \cf1 0
\par \plain\f2\b\fs20         |  | | | | | | | | | | '---  ZF Zero Flag
\par         |  | | | | | | | | | '---  SF Sign Flag
\par         |  | | | | | | | | '---  TF Trap Flag  (Single Step)
\par         |  | | | | | | | '---  IF Interrupt Flag
\par         |  | | | | | | '---  DF Direction Flag
\par         |  | | | | | '---  OF Overflow flag
\par         |  | | | '-----  IOPL I/O Privilege Level  (\cf1 286\plain\f2\b\fs20 + only)
\par         |  | | '-----  NT Nested Task Flag  (\cf1 286\plain\f2\b\fs20 + only)
\par \pard         |  | '-----  \cf1 0
\par \plain\f2\b\fs20         |  '-----  RF Resume Flag (\cf1 386\plain\f2\b\fs20 + only)
\par         '------  VM  Virtual Mode Flag (\cf1 386\plain\f2\b\fs20 + only)
\par         - see   PUSHF  POPF  STI  CLI  STD  CLD
\par \plain\fs20 
\par 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0007}
{\up $}{\footnote\pard\plain{\up $} MSW-MachineStatusWord286only}
{\up #}{\footnote\pard\plain{\up #} MSW-MachineStatusWord286only}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} MSW - Machine Status Word (286+ only)}

\par 
\par \pard \f1\b\fs30\cf1 MSW - Machine Status Word (286+ only)
\par \plain\f2\b\fs20       |\cf1 31\plain\f2\b\fs20 |\cf1 30\plain\f2\b\fs20 -\cf1 5\plain\f2\b\fs20 |\cf1 4\plain\f2\b\fs20 |\cf1 3\plain\f2\b\fs20 |\cf1 2\plain\f2\b\fs20 |\cf1 1\plain\f2\b\fs20 |\cf1 0\plain\f2\b\fs20 |  Machine Status Word
\par         |   |  | | | | '---- Protection Enable (PE)
\par         |   |  | | | '----- Math Present (MP)
\par         |   |  | | '------ Emulation (EM)
\par         |   |  | '------- Task Switched (TS)
\par         |   |  '-------- Extension Type (ET)
\par         |   '---------- Reserved
\par         '------------- Paging (PG)
\par         Bit \cf1 0\plain\f2\b\fs20    PE      Protection Enable, switches processor between
\par \pard                         protected and real mode
\par         Bit \cf1 1\plain\f2\b\fs20    MP      Math Present, controls function of the WAIT
\par                         instruction
\par         Bit \cf1 2\plain\f2\b\fs20    EM      Emulation, indicates whether coprocessor functions
\par                         are to be emulated
\par         Bit \cf1 3\plain\f2\b\fs20    TS      Task Switched, set and interrogated by coprocessor
\par                         on task switches and when interpretting coprocessor
\par                         instructions
\par \pard         Bit \cf1 4\plain\f2\b\fs20    ET      Extension Type, indicates type of coprocessor in
\par                         system
\par         Bits \cf1 5\plain\f2\b\fs20 -\cf1 30\plain\f2\b\fs20        Reserved
\par         bit \cf1 31\plain\f2\b\fs20   PG      Paging, indicates whether the processor uses page
\par                         tables to translate linear addresses to physical
\par                         addresses
\par \plain\fs20 
\par \f2\b         - see   SMSW  LMSW
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0008}
{\up $}{\footnote\pard\plain{\up $} AAA}
{\up #}{\footnote\pard\plain{\up #} AAA}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} AAA}
\plain\fs20 
\par 
\par \pard \f2\b\cf1 AAA\cf2  - Ascii Adjust for Addition
\par \plain\f2\b\fs20         Usage:  AAA
\par         Modifies flags: AF CF (OF,PF,SF,ZF undefined)
\par         Changes contents of AL to valid unpacked decimal.  The high order
\par         nibble is zeroed.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              \cf1 8\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 1
\par \plain\fs20 
\par \pard \f2\b        \cf3  37\plain\f2\b\fs20  AAA ASCII adjust AL after addition
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0009}
{\up $}{\footnote\pard\plain{\up $} AAD}
{\up #}{\footnote\pard\plain{\up #} AAD}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} AAD}
\plain\fs20 
\par 
\par \pard \f2\b\cf1 AAD\cf2  - Ascii Adjust for Division
\par \plain\f2\b\fs20         Usage:  AAD
\par         Modifies flags: SF ZF PF (AF,CF,OF undefined)
\par         Used before dividing unpacked decimal numbers.   Multiplies AH by
\par         \cf1 10\plain\f2\b\fs20  and the adds result into AL.  Sets AH to zero.  This instruction
\par         is also known to have an undocumented behavior.
\par         AL := \cf1 10\plain\f2\b\fs20 *AH+AL
\par         AH := \cf1 0
\par \plain\f2\b\fs20                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         none              \cf1 60\plain\f2\b\fs20     \cf1 14\plain\f2\b\fs20     \cf1 19\plain\f2\b\fs20     \cf1 14\plain\f2\b\fs20             \cf1 2
\par \plain\fs20 
\par \f2\b         \cf3 D5 0A\plain\f2\b\fs20  AAD ASCII adjust AX before division
\par         \cf3 D5\plain\f2\b\fs20  ib (No mnemonic) Adjust AX before division to number base imm\cf1 8
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:000a}
{\up $}{\footnote\pard\plain{\up $} AAM}
{\up #}{\footnote\pard\plain{\up #} AAM}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} AAM}
\plain\fs20 
\par 
\par \pard \f2\b\cf1 AAM\cf2  - Ascii Adjust for Multiplication
\par \plain\f2\b\fs20         Usage:  AAM
\par         Modifies flags: PF SF ZF (AF,CF,OF undefined)
\par         AH := AL / \cf1 10
\par \plain\f2\b\fs20         AL := AL mod \cf1 10
\par \plain\f2\b\fs20         Used after multiplication of two unpacked decimal numbers, this
\par         instruction adjusts an unpacked decimal number.  The high order
\par         nibble of each byte must be zeroed before using this instruction.
\par         This instruction is also known to have an undocumented behavior.
\par \pard                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              \cf1 83\plain\f2\b\fs20     \cf1 16\plain\f2\b\fs20     \cf1 17\plain\f2\b\fs20     \cf1 15\plain\f2\b\fs20             \cf1 2
\par \plain\fs20 
\par \f2\b         \cf3 D4 0A\plain\f2\b\fs20  AAM ASCII adjust AX after multiply
\par         \cf3 D4\plain\f2\b\fs20  ib (No mnemonic) Adjust AX after multiply to number base imm\cf1 8
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:000b}
{\up $}{\footnote\pard\plain{\up $} AAS}
\pard\keepn {\up #}{\footnote\pard\plain{\up #} AAS}
{\up K}{\footnote\pard\plain{\up K} AAS}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 AAS \cf2 - Ascii Adjust for Subtraction
\par \plain\f2\b\fs20         Usage:  AAS
\par         Modifies flags: AF CF (OF,PF,SF,ZF undefined)
\par         Corrects result of a previous unpacked decimal subtraction in AL.
\par         High order nibble is zeroed.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              \cf1 8\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 1
\par \pard \plain\fs20 
\par \f2\b         \cf1 3\plain\f2\b\fs20 F AAS ASCII adjust AL after subtraction
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:000c}
{\up $}{\footnote\pard\plain{\up $} ADC}
{\up #}{\footnote\pard\plain{\up #} ADC}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} ADC}
\plain\fs20 
\par 
\par \pard \f2\b\cf1 ADC\cf2  - Add With Carry
\par \plain\f2\b\fs20         Usage:  ADC     dest,src
\par         Modifies flags: AF CF OF SF PF ZF
\par         Sums two binary operands placing the result in the destination.
\par         If CF is set, a \cf1 1\plain\f2\b\fs20  is added to the destination.
\par                                 Clocks                  Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,reg           \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 2
\par \pard \plain\f2\b\fs20         mem,reg         \cf1 16\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 24\plain\f2\b\fs20 +EA)
\par         reg,mem          \cf1 9\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 13\plain\f2\b\fs20 +EA)
\par         reg,immed         \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 4
\par \plain\f2\b\fs20         mem,immed       \cf1 17\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 6\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 23\plain\f2\b\fs20 +EA)
\par \pard         accum,immed      \cf1 4\plain\f2\b\fs20       \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 14\plain\f2\b\fs20  ib ADC AL, imm\cf1 8\plain\f2\b\fs20  Add with carry imm\cf1 8\plain\f2\b\fs20  to AL
\par         \cf3 15\plain\f2\b\fs20  iw ADC AX, imm\cf1 16\plain\f2\b\fs20  Add with carry imm\cf1 16\plain\f2\b\fs20  to AX
\par        \cf3  15\plain\f2\b\fs20  id ADC EAX, imm\cf1 32\plain\f2\b\fs20  Add with carry imm\cf1 32\plain\f2\b\fs20  to EAX
\par         \cf3 80\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  ib ADC r/m\cf1 8\plain\f2\b\fs20 , imm\cf1 8\plain\f2\b\fs20  Add with carry imm\cf1 8\plain\f2\b\fs20  to r/m\cf1 8
\par \plain\f2\b\fs20         \cf3 81\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  iw ADC r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 16\plain\f2\b\fs20  Add with carry imm\cf1 16\plain\f2\b\fs20  to r/m\cf1 16
\par \pard \plain\f2\b\fs20         \cf3 81\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  id ADC r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 32\plain\f2\b\fs20  Add with CF imm\cf1 32\plain\f2\b\fs20  to r/m\cf1 32
\par \plain\f2\b\fs20         \cf3 83\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  ib ADC r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Add with CF sign-extended imm\cf1 8\plain\f2\b\fs20  to r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 83\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  ib ADC r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Add with CF sign-extended imm\cf1 8\plain\f2\b\fs20  into r/m\cf1 32
\par \plain\f2\b\fs20         \cf3 10\plain\f2\b\fs20  / r ADC r/m\cf1 8\plain\f2\b\fs20 ,r\cf1 8\plain\f2\b\fs20  Add with carry byte register to r/m\cf1 8
\par \plain\f2\b\fs20         \cf3 11\plain\f2\b\fs20  / r ADC r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20  Add with carry r\cf1 16\plain\f2\b\fs20  to r/m\cf1 16
\par \pard \plain\f2\b\fs20         \cf3 11\plain\f2\b\fs20  / r ADC r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20  Add with CF r\cf1 32\plain\f2\b\fs20  to r/m\cf1 32
\par \plain\f2\b\fs20         \cf3 12\plain\f2\b\fs20  / r ADC r\cf1 8\plain\f2\b\fs20 ,r/m\cf1 8\plain\f2\b\fs20  Add with carry r/m\cf1 8\plain\f2\b\fs20  to byte register
\par         \cf3 13\plain\f2\b\fs20  / r ADC r\cf1 16\plain\f2\b\fs20 ,r/m\cf1 16\plain\f2\b\fs20  Add with carry r/m\cf1 16\plain\f2\b\fs20  to r\cf1 16
\par \plain\f2\b\fs20         \cf3 13\plain\f2\b\fs20  / r ADC r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 32\plain\f2\b\fs20  Add with CF r/m\cf1 32\plain\f2\b\fs20  to r\cf1 32
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:000d}
{\up $}{\footnote\pard\plain{\up $} ADD}
{\up #}{\footnote\pard\plain{\up #} ADD}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} ADD}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 ADD \cf2 - Arithmetic Addition
\par \plain\f2\b\fs20         Usage:  ADD     dest,src
\par         Modifies flags: AF CF OF PF SF ZF
\par         Adds "src" to "dest" and replacing the original contents of "dest".
\par         Both operands are binary.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,reg           \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 2
\par \pard \plain\f2\b\fs20         mem,reg         \cf1 16\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 24\plain\f2\b\fs20 +EA)
\par         reg,mem          \cf1 9\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 13\plain\f2\b\fs20 +EA)
\par         reg,immed         \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 4
\par \plain\f2\b\fs20         mem,immed       \cf1 17\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 6\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 23\plain\f2\b\fs20 +EA)
\par \pard         accum,immed       \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 04\plain\f2\b\fs20  ib ADD AL, imm\cf1 8\plain\f2\b\fs20  Add imm\cf1 8\plain\f2\b\fs20  to AL
\par         \cf3 05\plain\f2\b\fs20  iw ADD AX, imm\cf1 16\plain\f2\b\fs20  Add imm\cf1 16\plain\f2\b\fs20  to AX
\par         \cf3 05\plain\f2\b\fs20  id ADD EAX, imm\cf1 32\plain\f2\b\fs20  Add imm\cf1 32\plain\f2\b\fs20  to EAX
\par         \cf3 80\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  ib ADD r/m\cf1 8\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Add imm\cf1 8\plain\f2\b\fs20  to r/m\cf1 8
\par \plain\f2\b\fs20         \cf3 81\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  iw ADD r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 16\plain\f2\b\fs20  Add imm\cf1 16\plain\f2\b\fs20  to r/m\cf1 16
\par \pard \plain\f2\b\fs20         \cf3 81\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  id ADD r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 32\plain\f2\b\fs20  Add imm\cf1 32\plain\f2\b\fs20  to r/m\cf1 32
\par \plain\f2\b\fs20         \cf3 83\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  ib ADD r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Add sign-extended imm\cf1 8\plain\f2\b\fs20  to r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 83\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  ib ADD r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Add sign-extended imm\cf1 8\plain\f2\b\fs20  to r/m\cf1 32
\par \plain\f2\b\fs20         \cf3 00\plain\f2\b\fs20  / r ADD r/m\cf1 8\plain\f2\b\fs20 ,r\cf1 8\plain\f2\b\fs20  Add r\cf1 8\plain\f2\b\fs20  to r/m\cf1 8
\par \plain\f2\b\fs20         \cf3 01\plain\f2\b\fs20  / r ADD r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20  Add r\cf1 16\plain\f2\b\fs20  to r/m\cf1 16
\par \pard \plain\f2\b\fs20         \cf3 01\plain\f2\b\fs20  / r ADD r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20  Add r\cf1 32\plain\f2\b\fs20  to r/m\cf1 32
\par \plain\f2\b\fs20         \cf3 02\plain\f2\b\fs20  / r ADD r\cf1 8\plain\f2\b\fs20 ,r/m\cf1 8\plain\f2\b\fs20  Add r/m\cf1 8\plain\f2\b\fs20  to r\cf1 8
\par \plain\f2\b\fs20         \cf3 03\plain\f2\b\fs20  / r ADD r\cf1 16\plain\f2\b\fs20 ,r/m\cf1 16\plain\f2\b\fs20  Add r/m\cf1 16\plain\f2\b\fs20  to r\cf1 16
\par \plain\f2\b\fs20         \cf3 03\plain\f2\b\fs20  / r ADD r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 32\plain\f2\b\fs20  Add r/m\cf1 32\plain\f2\b\fs20  to r\cf1 32
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:000e}
{\up $}{\footnote\pard\plain{\up $} AND}
{\up #}{\footnote\pard\plain{\up #} AND}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} AND}

\par 
\par \pard 
\par \f2\b\cf1 AND \cf2 - Logical And
\par \plain\f2\b\fs20         Usage:  AND     dest,src
\par         Modifies flags: CF OF PF SF ZF (AF undefined)
\par         Performs a logical AND of the two operands replacing the destination
\par         with the result.
\par                                 Clocks                  Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,reg           \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 2
\par \pard \plain\f2\b\fs20         mem,reg         \cf1 16\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 24\plain\f2\b\fs20 +EA)
\par         reg,mem          \cf1 9\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 13\plain\f2\b\fs20 +EA)
\par         reg,immed         \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 4
\par \plain\f2\b\fs20         mem,immed       \cf1 17\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 6\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 23\plain\f2\b\fs20 +EA)
\par \pard         accum,immed       \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 24\plain\f2\b\fs20  ib AND AL, imm\cf1 8\plain\f2\b\fs20  AL AND imm\cf1 8
\par \plain\f2\b\fs20         \cf3 25\plain\f2\b\fs20  iw AND AX, imm\cf1 16\plain\f2\b\fs20  AX AND i mm\cf1 16
\par \plain\f2\b\fs20         \cf3 25\plain\f2\b\fs20  id AND EAX, imm\cf1 32\plain\f2\b\fs20  EAX AND imm\cf1 32
\par \plain\f2\b\fs20         \cf3 80\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  ib AND r/m\cf1 8\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  r/m\cf1 8\plain\f2\b\fs20  AND imm\cf1 8
\par \plain\f2\b\fs20        \cf3  81\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  iw AND r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 16\plain\f2\b\fs20  r/m\cf1 16\plain\f2\b\fs20  AND imm\cf1 16
\par \pard \plain\f2\b\fs20         \cf3 81\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  id AND r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 32\plain\f2\b\fs20  r/m\cf1 32\plain\f2\b\fs20  AND imm\cf1 32
\par \plain\f2\b\fs20         \cf3 83\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  ib AND r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  r/m\cf1 16\plain\f2\b\fs20  AND imm\cf1 8\plain\f2\b\fs20  (sign-extended)
\par         \cf3 83\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  ib AND r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  r/m\cf1 32\plain\f2\b\fs20  AND imm\cf1 8\plain\f2\b\fs20  (sign-extended)
\par         \cf3 20\plain\f2\b\fs20  /r AND r/m\cf1 8\plain\f2\b\fs20 ,r\cf1 8\plain\f2\b\fs20  r/m\cf1 8\plain\f2\b\fs20  AND r\cf1 8
\par \plain\f2\b\fs20         \cf3 21\plain\f2\b\fs20  / r AND r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20  r/m\cf1 16\plain\f2\b\fs20  AND r\cf1 16
\par \pard \plain\f2\b\fs20        \cf3  21\plain\f2\b\fs20  / r AND r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20  r/m\cf1 32\plain\f2\b\fs20  AND r\cf1 32
\par \plain\f2\b\fs20         \cf3 22\plain\f2\b\fs20  / r AND r\cf1 8\plain\f2\b\fs20 ,r/m\cf1 8\plain\f2\b\fs20  r\cf1 8\plain\f2\b\fs20  AND r/m\cf1 8
\par \plain\f2\b\fs20         \cf3 23\plain\f2\b\fs20  / r AND r\cf1 16\plain\f2\b\fs20 ,r/m\cf1 16\plain\f2\b\fs20  r\cf1 16\plain\f2\b\fs20  AND r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 23\plain\f2\b\fs20  / r AND r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 32\plain\f2\b\fs20  r\cf1 32\plain\f2\b\fs20  AND r/m\cf1 32
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:000f}
{\up $}{\footnote\pard\plain{\up $} ARPL}
{\up #}{\footnote\pard\plain{\up #} ARPL}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} ARPL}

\par 
\par \pard 
\par \f2\b\cf1 ARPL \cf2 - Adjusted Requested Privilege Level of Selector (286+ PM)
\par \plain\f2\b\fs20         Usage:  ARPL    dest,src
\par         (\cf1 286\plain\f2\b\fs20 + protected mode)
\par         Modifies flags: ZF
\par         Compares the RPL bits of "dest" against "src".  If the RPL bits
\par         of "dest" are less than "src", the destination RPL bits are set
\par         equal to the source RPL bits and the Zero Flag is set.  Otherwise
\par         the Zero Flag is cleared.
\par                                 Clocks                  Size
\par \pard         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,reg           -     \cf1 10\plain\f2\b\fs20     \cf1 20\plain\f2\b\fs20     \cf1 9\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20         mem,reg           -     \cf1 11\plain\f2\b\fs20     \cf1 21\plain\f2\b\fs20     \cf1 9\plain\f2\b\fs20              \cf1 4
\par \plain\fs20 
\par \f2\b         \cf3 63\plain\f2\b\fs20  / r ARPL r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20  Adjust RPL of r/m\cf1 16\plain\f2\b\fs20  to not less than RPL of r\cf1 16
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0010}
{\up $}{\footnote\pard\plain{\up $} BOUND}
{\up #}{\footnote\pard\plain{\up #} BOUND}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} BOUND}

\par 
\par \pard 
\par \f2\b\cf1 BOUND \cf2 - Array Index Bound Check (80188+)
\par \plain\f2\b\fs20         Usage:  BOUND   src,limit
\par         Modifies flags: None
\par         Array index in source register is checked against upper and lower
\par         bounds in memory source.  The first word located at "limit" is
\par         the lower boundary and the word at "limit+\cf1 2\plain\f2\b\fs20 " is the upper array bound.
\par         Interrupt \cf1 5\plain\f2\b\fs20  occurs if the source value is less than or higher than
\par         the source.
\par                                  Clocks                 Size
\par \pard         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 16\plain\f2\b\fs20 ,mem\cf1 32\plain\f2\b\fs20        -   nj=\cf1 13\plain\f2\b\fs20  nj=\cf1 10\plain\f2\b\fs20    \cf1 7\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,mem\cf1 64\plain\f2\b\fs20        -   nj=\cf1 13\plain\f2\b\fs20  nj=\cf1 10\plain\f2\b\fs20    \cf1 7\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20                           -   nj = no jump taken
\par \plain\fs20 
\par \f2\b         \cf3 62\plain\f2\b\fs20  / r BOUND r\cf1 16\plain\f2\b\fs20 ,m\cf1 16\plain\f2\b\fs20 &\cf1 16\plain\f2\b\fs20  
\par         \cf3 62\plain\f2\b\fs20  / r BOUND r\cf1 32\plain\f2\b\fs20 ,m\cf1 32\plain\f2\b\fs20 &\cf1 32\plain\f2\b\fs20  
\par \pard \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0011}
{\up $}{\footnote\pard\plain{\up $} BSF}
{\up #}{\footnote\pard\plain{\up #} BSF}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} BSF}

\par 
\par \pard 
\par \f2\b\cf1 BSF \cf2 - Bit Scan Forward (386+)
\par \plain\f2\b\fs20         Usage:  BSF     dest,src
\par         Modifies flags: ZF
\par         Scans source operand for first bit set.  Sets ZF if a bit is found
\par         set and loads the destination with an index to first set bit.  Clears
\par         ZF is no bits are found set.  BSF scans forward across bit pattern
\par         (\cf1 0\plain\f2\b\fs20 -n) while BSR scans in reverse (n-\cf1 0\plain\f2\b\fs20 ).
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         reg,reg           -     -   \cf1 10\plain\f2\b\fs20 +\cf1 3\plain\f2\b\fs20 n  \cf1 6\plain\f2\b\fs20 -\cf1 42\plain\f2\b\fs20            \cf1 3
\par \plain\f2\b\fs20         reg,mem           -     -   \cf1 10\plain\f2\b\fs20 +\cf1 3\plain\f2\b\fs20 n  \cf1 7\plain\f2\b\fs20 -\cf1 43\plain\f2\b\fs20           \cf1 3\plain\f2\b\fs20 -\cf1 7
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,reg\cf1 32\plain\f2\b\fs20        -     -   \cf1 10\plain\f2\b\fs20 +\cf1 3\plain\f2\b\fs20 n  \cf1 6\plain\f2\b\fs20 -\cf1 42\plain\f2\b\fs20           \cf1 3\plain\f2\b\fs20 -\cf1 7
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,mem\cf1 32\plain\f2\b\fs20        -     -   \cf1 10\plain\f2\b\fs20 +\cf1 3\plain\f2\b\fs20 n  \cf1 7\plain\f2\b\fs20 -\cf1 43\plain\f2\b\fs20           \cf1 3\plain\f2\b\fs20 -\cf1 7
\par \plain\fs20 
\par \f2\b        \cf3  0F BC\plain\f2\b\fs20  BSF r\cf1 16\plain\f2\b\fs20 ,r/m\cf1 16\plain\f2\b\fs20  Bit scan forward on r/m\cf1 16
\par \pard \plain\f2\b\fs20         \cf3 0F BC\plain\f2\b\fs20  BSF r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 32\plain\f2\b\fs20  Bit scan forward on r/m\cf1 32
\par \plain\fs20 
\par 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0012}
{\up $}{\footnote\pard\plain{\up $} BSR}
{\up #}{\footnote\pard\plain{\up #} BSR}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} BSR}

\par 
\par \pard \f2\b\cf1 BSR\cf2 - Bit Scan Reverse  (386+)
\par \plain\f2\b\fs20         Usage:  BSR     dest,src
\par         Modifies flags: ZF
\par         Scans source operand for first bit set.  Sets ZF if a bit is found
\par         set and loads the destination with an index to first set bit.  Clears
\par         ZF is no bits are found set.  BSF scans forward across bit pattern
\par         (\cf1 0\plain\f2\b\fs20 -n) while BSR scans in reverse (n-\cf1 0\plain\f2\b\fs20 ).
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         reg,reg           -     -   \cf1 10\plain\f2\b\fs20 +\cf1 3\plain\f2\b\fs20 n  \cf1 6\plain\f2\b\fs20 -\cf1 103\plain\f2\b\fs20           \cf1 3
\par \plain\f2\b\fs20         reg,mem           -     -   \cf1 10\plain\f2\b\fs20 +\cf1 3\plain\f2\b\fs20 n  \cf1 7\plain\f2\b\fs20 -\cf1 104\plain\f2\b\fs20          \cf1 3\plain\f2\b\fs20 -\cf1 7
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,reg\cf1 32\plain\f2\b\fs20        -     -   \cf1 10\plain\f2\b\fs20 +\cf1 3\plain\f2\b\fs20 n  \cf1 6\plain\f2\b\fs20 -\cf1 103\plain\f2\b\fs20          \cf1 3\plain\f2\b\fs20 -\cf1 7
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,mem\cf1 32\plain\f2\b\fs20        -     -   \cf1 10\plain\f2\b\fs20 +\cf1 3\plain\f2\b\fs20 n  \cf1 7\plain\f2\b\fs20 -\cf1 104\plain\f2\b\fs20          \cf1 3\plain\f2\b\fs20 -\cf1 7
\par \plain\fs20 
\par \f2\b         \cf3 0F BD\plain\f2\b\fs20  BSR r\cf1 16\plain\f2\b\fs20 ,r/m\cf1 16\plain\f2\b\fs20  Bit scan reverse on r/m\cf1 16
\par \pard \plain\f2\b\fs20         \cf3 0F BD\plain\f2\b\fs20  BSR r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 32\plain\f2\b\fs20  Bit scan reverse on r/m\cf1 32
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0013}
{\up $}{\footnote\pard\plain{\up $} BSWAP}
{\up #}{\footnote\pard\plain{\up #} BSWAP}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} BSWAP}

\par 
\par \pard 
\par \f2\b\cf1 BSWAP \cf2 - Byte Swap       (486+)
\par \plain\f2\b\fs20         Usage:  BSWAP   reg\cf1 32
\par \plain\f2\b\fs20         Modifies flags: none
\par         Changes the byte order of a \cf1 32\plain\f2\b\fs20  bit register from big endian to
\par         little endian or vice versa.   Result left in destination register
\par         is undefined if the operand is a \cf1 16\plain\f2\b\fs20  bit register.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         reg\cf1 32\plain\f2\b\fs20              -     -     -     \cf1 1\plain\f2\b\fs20              \cf1 2
\par \plain\fs20 
\par \f2\b         \cf3 0F C8\plain\f2\b\fs20 + rd BSWAP r\cf1 32\plain\f2\b\fs20  Reverses the byte order of a \cf1 32\plain\f2\b\fs20 -bit register.
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0014}
{\up $}{\footnote\pard\plain{\up $} BT}
{\up #}{\footnote\pard\plain{\up #} BT}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} BT}

\par 
\par \pard 
\par \f2\b\cf1 BT \cf2 - Bit Test           (386+)
\par \plain\f2\b\fs20         Usage:  BT      dest,src
\par         Modifies flags: CF
\par         The destination bit indexed by the source value is copied into the
\par         Carry Flag.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 16\plain\f2\b\fs20 ,immed\cf1 8\plain\f2\b\fs20       -     -     \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 4\plain\f2\b\fs20 -\cf1 8
\par \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20 ,immed\cf1 8\plain\f2\b\fs20       -     -     \cf1 6\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20             \cf1 4\plain\f2\b\fs20 -\cf1 8
\par \pard \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20 ,reg\cf1 16\plain\f2\b\fs20        -     -     \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 7
\par \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20 ,reg\cf1 16\plain\f2\b\fs20        -     -     \cf1 12\plain\f2\b\fs20     \cf1 12\plain\f2\b\fs20            \cf1 3\plain\f2\b\fs20 -\cf1 7
\par \plain\fs20 
\par \f2\b         \cf3 0F A3\plain\f2\b\fs20  BT r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20  Store selected bit in CF flag
\par        \cf3  0F A3\plain\f2\b\fs20  BT r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20  Store selected bit in CF flag
\par         \cf3 0F BA\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  ib BT r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Store selected bit in CF flag
\par \pard         \cf3 0F BA\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  ib BT r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Store selected bit in CF flag
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0015}
{\up $}{\footnote\pard\plain{\up $} BTC}
{\up #}{\footnote\pard\plain{\up #} BTC}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} BTC}

\par 
\par \pard 
\par \f2\b\cf1 BTC \cf2 - Bit Test with Compliment (386+)
\par \plain\f2\b\fs20         Usage:  BTC     dest,src
\par         Modifies flags: CF
\par         The destination bit indexed by the source value is copied into the
\par         Carry Flag after being complimented (inverted).
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 16\plain\f2\b\fs20 ,immed\cf1 8\plain\f2\b\fs20       -     -     \cf1 6\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20             \cf1 4\plain\f2\b\fs20 -\cf1 8
\par \pard \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20 ,immed\cf1 8\plain\f2\b\fs20       -     -     \cf1 8\plain\f2\b\fs20      \cf1 8\plain\f2\b\fs20             \cf1 4\plain\f2\b\fs20 -\cf1 8
\par \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20 ,reg\cf1 16\plain\f2\b\fs20        -     -     \cf1 6\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 7
\par \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20 ,reg\cf1 16\plain\f2\b\fs20        -     -    \cf1 13\plain\f2\b\fs20     \cf1 13\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 7
\par \plain\fs20 
\par \f2\b         \cf3 0F BB\plain\f2\b\fs20  BTC r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20  Store selected bit in CF flag and complement
\par         \cf3 0F BB\plain\f2\b\fs20  BTC r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20  Store selected bit in CF flag and complement
\par \pard         \cf3 0F BA\plain\f2\b\fs20  /\cf1 7\plain\f2\b\fs20  ib BTC r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Store selected bit in CF flag and complement
\par         \cf3 0F BA\plain\f2\b\fs20  /\cf1 7\plain\f2\b\fs20  ib BTC r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Store selected bit in CF flag and complement
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0016}
{\up $}{\footnote\pard\plain{\up $} BTR}
{\up #}{\footnote\pard\plain{\up #} BTR}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} BTR}

\par 
\par \pard 
\par \f2\b\cf1 BTR \cf2 - Bit Test with Reset (386+)
\par \plain\f2\b\fs20         Usage:  BTR     dest,src
\par         Modifies flags: CF
\par         The destination bit indexed by the source value is copied into the
\par         Carry Flag and then cleared in the destination.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 16\plain\f2\b\fs20 ,immed\cf1 8\plain\f2\b\fs20       -     -     \cf1 6\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20             \cf1 4\plain\f2\b\fs20 -\cf1 8
\par \pard \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20 ,immed\cf1 8\plain\f2\b\fs20       -     -     \cf1 8\plain\f2\b\fs20      \cf1 8\plain\f2\b\fs20             \cf1 4\plain\f2\b\fs20 -\cf1 8
\par \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20 ,reg\cf1 16\plain\f2\b\fs20        -     -     \cf1 6\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 7
\par \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20 ,reg\cf1 16\plain\f2\b\fs20        -     -    \cf1 13\plain\f2\b\fs20     \cf1 13\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 7
\par \plain\fs20 
\par \f2\b         \cf3 0F B3\plain\f2\b\fs20  BTR r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20  Store selected bit in CF flag and clear
\par         \cf3 0F B3\plain\f2\b\fs20  BTR r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20  Store selected bit in CF flag and clear
\par \pard         \cf3 0F BA\plain\f2\b\fs20  /\cf1 6\plain\f2\b\fs20  ib BTR r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Store selected bit in CF flag and clear
\par         \cf3 0F BA\plain\f2\b\fs20  /\cf1 6\plain\f2\b\fs20  ib BTR r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Store selected bit in CF flag and clear
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0017}
{\up $}{\footnote\pard\plain{\up $} BTS}
{\up #}{\footnote\pard\plain{\up #} BTS}
\pard\keepn 
\par 
\par \pard 
\par \f2\b\cf1 BTS \cf2 - Bit Test and Set  (386+)
\par \plain\f2\b\fs20         Usage:  BTS     dest,src
\par         Modifies flags: CF
\par         The destination bit indexed by the source value is copied into the
\par         Carry Flag and then set in the destination.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 16\plain\f2\b\fs20 ,immed\cf1 8\plain\f2\b\fs20       -     -     \cf1 6\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20             \cf1 4\plain\f2\b\fs20 -\cf1 8
\par \pard \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20 ,immed\cf1 8\plain\f2\b\fs20       -     -     \cf1 8\plain\f2\b\fs20      \cf1 8\plain\f2\b\fs20             \cf1 4\plain\f2\b\fs20 -\cf1 8
\par \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20 ,reg\cf1 16\plain\f2\b\fs20        -     -     \cf1 6\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 7
\par \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20 ,reg\cf1 16\plain\f2\b\fs20        -     -     \cf1 13\plain\f2\b\fs20     \cf1 13\plain\f2\b\fs20            \cf1 3\plain\f2\b\fs20 -\cf1 7
\par \plain\fs20 
\par \f2\b         \cf3 0F AB\plain\f2\b\fs20  BTS r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20  Store selected bit in CF flag and set
\par         \cf3 0F AB\plain\f2\b\fs20  BTS r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20  Store selected bit in CF flag and set
\par \pard         \cf3 0F BA\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  ib BTS r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Store selected bit in CF flag and set
\par         \cf3 0F BA\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  ib BTS r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Store selected bit in CF flag and set
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0018}
{\up $}{\footnote\pard\plain{\up $} CALL}
{\up #}{\footnote\pard\plain{\up #} CALL}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} CALL}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 CALL \cf2 - Procedure Call
\par \plain\f2\b\fs20         Usage:  CALL    destination
\par         Modifies flags: None
\par         Pushes Instruction Pointer (and Code Segment for far calls) onto
\par         stack and loads Instruction Pointer with the address of proc-name.
\par         Code continues with execution at CS:IP.
\par                                                          Clocks
\par                    Operands                     \cf1 808\plain\f2\b\fs20 x   \cf1 286\plain\f2\b\fs20      \cf1 386\plain\f2\b\fs20      \cf1 486
\par \plain\f2\b\fs20         rel\cf1 16\plain\f2\b\fs20  (near, IP relative)                \cf1 19\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20       \cf1 7\plain\f2\b\fs20 +m      \cf1 3
\par \pard \plain\f2\b\fs20         rel\cf1 32\plain\f2\b\fs20  (near, IP relative)                -      -      \cf1 7\plain\f2\b\fs20 +m      \cf1 3
\par \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20  (near, register indirect)          \cf1 16\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20       \cf1 7\plain\f2\b\fs20 +m      \cf1 5
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20  (near, register indirect)          -      -      \cf1 7\plain\f2\b\fs20 +m      \cf1 5
\par \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20  (near, memory indirect)            -     \cf1 21\plain\f2\b\fs20 +EA    \cf1 11\plain\f2\b\fs20     \cf1 10\plain\f2\b\fs20 +m      \cf1 5
\par \plain\f2\b\fs20         mem\cf1 32\plain\f2\b\fs20  (near, memory indirect)            -      -     \cf1 10\plain\f2\b\fs20 +m      \cf1 5
\par \pard \plain\f2\b\fs20         ptr\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (far, full ptr supplied)        \cf1 28\plain\f2\b\fs20      \cf1 13\plain\f2\b\fs20     \cf1 17\plain\f2\b\fs20 +m      \cf1 18
\par \plain\f2\b\fs20         ptr\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (far, full ptr supplied)        -      -     \cf1 17\plain\f2\b\fs20 +m      \cf1 18
\par \plain\f2\b\fs20         ptr\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (far, ptr supplied, prot. mode) -      \cf1 26\plain\f2\b\fs20     \cf1 34\plain\f2\b\fs20 +m      \cf1 20
\par \plain\f2\b\fs20         ptr\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (far, ptr supplied, prot. mode) -      -     \cf1 34\plain\f2\b\fs20 +m      \cf1 20
\par \plain\f2\b\fs20         m\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (far, indirect)                 \cf1 37\plain\f2\b\fs20 +EA    \cf1 16\plain\f2\b\fs20     \cf1 22\plain\f2\b\fs20 +m      \cf1 17
\par \pard \plain\f2\b\fs20         m\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (far, indirect)                   -      -     \cf1 22\plain\f2\b\fs20 +m      \cf1 17
\par \plain\f2\b\fs20         m\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (far, indirect, prot. mode)       -      \cf1 29\plain\f2\b\fs20     \cf1 38\plain\f2\b\fs20 +m      \cf1 20
\par \plain\f2\b\fs20         m\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (far, indirect, prot. mode)       -      -     \cf1 38\plain\f2\b\fs20 +m      \cf1 20
\par \plain\f2\b\fs20         ptr\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (task, via TSS or task gate)    -     \cf1 177\plain\f2\b\fs20      TS     \cf1 37\plain\f2\b\fs20 +TS
\par         m\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (task, via TSS or task gate)      -   \cf1 180\plain\f2\b\fs20 /\cf1 185\plain\f2\b\fs20   \cf1 5\plain\f2\b\fs20 +TS    \cf1 37\plain\f2\b\fs20 +TS
\par \pard         m\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (task)                            -      -      TS     \cf1 37\plain\f2\b\fs20 +TS
\par         m\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (task)                            -      -     \cf1 5\plain\f2\b\fs20 +TS    \cf1 37\plain\f2\b\fs20 +TS
\par         ptr\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (gate, same privilege)          -      \cf1 41\plain\f2\b\fs20     \cf1 52\plain\f2\b\fs20 +m      \cf1 35
\par \plain\f2\b\fs20         ptr\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (gate, same privilege)          -      -     \cf1 52\plain\f2\b\fs20 +m      \cf1 35
\par \plain\f2\b\fs20         m\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (gate, same privilege)            -      \cf1 44\plain\f2\b\fs20     \cf1 56\plain\f2\b\fs20 +m      \cf1 35
\par \pard \plain\f2\b\fs20         m\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (gate, same privilege)            -      -     \cf1 56\plain\f2\b\fs20 +m      \cf1 35
\par \plain\f2\b\fs20         ptr\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (gate, more priv, no parm)      -      \cf1 82\plain\f2\b\fs20     \cf1 86\plain\f2\b\fs20 +m      \cf1 69
\par \plain\f2\b\fs20         ptr\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (gate, more priv, no parm)      -      -     \cf1 86\plain\f2\b\fs20 +m      \cf1 69
\par \plain\f2\b\fs20         m\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (gate, more priv, no parm)        -      \cf1 83\plain\f2\b\fs20     \cf1 90\plain\f2\b\fs20 +m      \cf1 69
\par \plain\f2\b\fs20         m\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (gate, more priv, no parm)        -      -     \cf1 90\plain\f2\b\fs20 +m      \cf1 69
\par \pard \plain\f2\b\fs20         ptr\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (gate, more priv, x parms)      -    \cf1 86\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 x  \cf1 94\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 x+m  \cf1 77\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 x
\par         ptr\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (gate, more priv, x parms)      -      -    \cf1 94\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 x+m  \cf1 77\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 x
\par         m\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (gate, more priv, x parms)        -    \cf1 90\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 x  \cf1 98\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 x+m  \cf1 77\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 x
\par         m\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (gate, more priv, x parms)        -      -    \cf1 98\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 x+m  \cf1 77\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 x
\par \pard \plain\fs20 
\par \f2\b         \cf3 E8\plain\f2\b\fs20  cw CALL rel\cf1 16\plain\f2\b\fs20  Call near, relative, displacement relative to next instruction
\par         \cf3 E8\plain\f2\b\fs20  cd CALL rel\cf1 32\plain\f2\b\fs20  Call near, relative, displacement relative to next instruction
\par         \cf3 FF\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  CALL r/m\cf1 16\plain\f2\b\fs20  Call near, absolute indirect, address given in r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 FF\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  CALL r/m\cf1 32\plain\f2\b\fs20  Call near, absolute indirect, address given in r/m\cf1 32
\par \plain\f2\b\fs20         \cf3 9A\plain\f2\b\fs20  cd CALL ptr\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  Call far, absolute, address given in operand
\par \pard         \cf3 9A\plain\f2\b\fs20  cp CALL ptr\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  Call far, absolute, address given in operand
\par         \cf3 FF\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  CALL m\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  Call far, absolute indirect, address given in m\cf1 16\plain\f2\b\fs20 :\cf1 16
\par \plain\f2\b\fs20         \cf3 FF\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  CALL m\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  Call far, absolute indirect, address given in m\cf1 16\plain\f2\b\fs20 :\cf1 32
\par \plain\fs20 
\par 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0019}
{\up $}{\footnote\pard\plain{\up $} CBW}
{\up #}{\footnote\pard\plain{\up #} CBW}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} CBW}

\par 
\par \pard 
\par \f2\b\cf1 CBW \cf2 - Convert Byte to Word
\par \plain\f2\b\fs20         Usage:  CBW
\par         Modifies flags: None
\par         Converts byte in AL to word Value in AX by extending sign of AL
\par         throughout register AH.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 98\plain\f2\b\fs20  CBW AX  sign-extend of AL
\par \pard \plain\fs20 
\par 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:001a}
{\up $}{\footnote\pard\plain{\up $} CDQ}
{\up #}{\footnote\pard\plain{\up #} CDQ}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} CDQ}

\par 
\par \pard 
\par \f2\b\cf1 CDQ \cf2 - Convert Double to Quad (386+)
\par \plain\f2\b\fs20         Usage:  CDQ
\par         Modifies flags: None
\par         Converts signed DWORD in EAX to a signed quad word in EDX:EAX by
\par         extending the high order bit of EAX throughout EDX
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              -     -     \cf1 2\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 1
\par \plain\fs20 
\par \pard \f2\b         \cf3 99\plain\f2\b\fs20  CDQ EDX:EAX
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:001b}
{\up $}{\footnote\pard\plain{\up $} CLC}
{\up #}{\footnote\pard\plain{\up #} CLC}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} CLC}

\par 
\par \pard 
\par \f2\b\cf1 CLC \cf2 - Clear Carry
\par \plain\f2\b\fs20         Usage:  CLC
\par         Modifies flags: CF
\par         Clears the Carry Flag.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20              \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 F8\plain\f2\b\fs20  CLC Clear CF flag
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:001c}
{\up $}{\footnote\pard\plain{\up $} CLD}
{\up #}{\footnote\pard\plain{\up #} CLD}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} CLD}

\par 
\par \pard 
\par \f2\b\cf1 CLD \cf2 - Clear Direction Flag
\par \plain\f2\b\fs20         Usage:  CLD
\par         Modifies flags: DF
\par         Clears the Direction Flag causing string instructions to increment
\par         the SI and DI index registers.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none               \cf1 2\plain\f2\b\fs20     \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20              \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 FC\plain\f2\b\fs20  CLD Clear DF flag
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:001d}
{\up $}{\footnote\pard\plain{\up $} CLI}
{\up #}{\footnote\pard\plain{\up #} CLI}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} CLI}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 CLI \cf2 - Clear Interrupt Flag (disable)
\par \plain\f2\b\fs20         Usage:  CLI
\par         Modifies flags: IF
\par         Disables the maskable hardware interrupts by clearing the Interrupt
\par         flag.  NMI's and software interrupts are not inhibited.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20              \cf1 1
\par \pard \plain\fs20 
\par \f2\b         \cf3 FA\plain\f2\b\fs20  CLI Clear interrupt flag; interrupts disabled when interrupt
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:001e}
{\up $}{\footnote\pard\plain{\up $} CLTS}
{\up #}{\footnote\pard\plain{\up #} CLTS}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} CLTS}

\par 
\par \pard 
\par \f2\b\cf1 CLTS \cf2 - Clear Task Switched Flag (286+ privileged)
\par \plain\f2\b\fs20         Usage:  CLTS
\par         Modifies flags: None
\par         Clears the Task Switched Flag in the Machine Status Register.  This
\par         is a privileged operation and is generally used only by operating
\par         system code.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              -     \cf1 2\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20              \cf1 2
\par \pard \plain\fs20 
\par \f2\b         \cf3 0F 06\plain\f2\b\fs20  CLTS Clears TS flag in CR\cf1 0
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:001f}
{\up $}{\footnote\pard\plain{\up $} CMC}
{\up #}{\footnote\pard\plain{\up #} CMC}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} CMC}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 CMC \cf2 - Complement Carry Flag
\par \plain\f2\b\fs20         Usage:  CMC
\par         Modifies flags: CF
\par         Toggles (inverts) the Carry Flag
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20              \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 F5\plain\f2\b\fs20  CMC Complement CF flag
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0020}
{\up $}{\footnote\pard\plain{\up $} CMP}
{\up #}{\footnote\pard\plain{\up #} CMP}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} CMP}

\par 
\par \pard 
\par \f2\b\cf1 CMP \cf2 - Compare
\par \plain\f2\b\fs20         Usage:  CMP     dest,src
\par         Modifies flags: AF CF OF PF SF ZF
\par         Subtracts source from destination and updates the flags but does
\par         not save result.  Flags can subsequently be checked for conditions.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,reg           \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 2
\par \pard \plain\f2\b\fs20         mem,reg          \cf1 9\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 13\plain\f2\b\fs20 +EA)
\par         reg,mem          \cf1 9\plain\f2\b\fs20 +EA   \cf1 6\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 13\plain\f2\b\fs20 +EA)
\par         reg,immed         \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 4
\par \plain\f2\b\fs20         mem,immed       \cf1 10\plain\f2\b\fs20 +EA   \cf1 6\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 6\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 14\plain\f2\b\fs20 +EA)
\par \pard         accum,immed       \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 3C\plain\f2\b\fs20  ib CMP AL, imm\cf1 8\plain\f2\b\fs20  Compare imm\cf1 8\plain\f2\b\fs20  with AL
\par         \cf3 3D\plain\f2\b\fs20  iw CMP AX, imm\cf1 16\plain\f2\b\fs20  Compare imm\cf1 16\plain\f2\b\fs20  with AX
\par         \cf3 3D\plain\f2\b\fs20  id CMP EAX, imm\cf1 32\plain\f2\b\fs20  Compare imm\cf1 32\plain\f2\b\fs20  with EAX
\par         \cf3 80\plain\f2\b\fs20  /\cf1 7\plain\f2\b\fs20  ib CMP r/m\cf1 8\plain\f2\b\fs20 , imm\cf1 8\plain\f2\b\fs20  Compare imm\cf1 8\plain\f2\b\fs20  with r/m\cf1 8
\par \plain\f2\b\fs20         \cf3 81\plain\f2\b\fs20  /\cf1 7\plain\f2\b\fs20  iw CMP r/m\cf1 16\plain\f2\b\fs20 , imm\cf1 16\plain\f2\b\fs20  Compare imm\cf1 16\plain\f2\b\fs20  with r/m\cf1 16
\par \pard \plain\f2\b\fs20         \cf3 81\plain\f2\b\fs20  /\cf1 7\plain\f2\b\fs20  id CMP r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 32\plain\f2\b\fs20  Compare imm\cf1 32\plain\f2\b\fs20  with r/m\cf1 32
\par \plain\f2\b\fs20         \cf3 83\plain\f2\b\fs20  /\cf1 7\plain\f2\b\fs20  ib CMP r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Compare imm\cf1 8\plain\f2\b\fs20  with r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 83\plain\f2\b\fs20  /\cf1 7\plain\f2\b\fs20  ib CMP r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Compare imm\cf1 8\plain\f2\b\fs20  with r/m\cf1 32
\par \plain\f2\b\fs20         \cf3 38\plain\f2\b\fs20  / r CMP r/m\cf1 8\plain\f2\b\fs20 ,r\cf1 8\plain\f2\b\fs20  Compare r\cf1 8\plain\f2\b\fs20  with r/m\cf1 8
\par \plain\f2\b\fs20         \cf3 39\plain\f2\b\fs20  / r CMP r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20  Compare r\cf1 16\plain\f2\b\fs20  with r/m\cf1 16
\par \pard \plain\f2\b\fs20         \cf3 39\plain\f2\b\fs20  / r CMP r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20  Compare r\cf1 32\plain\f2\b\fs20  with r/m\cf1 32
\par \plain\f2\b\fs20         \cf3 3A\plain\f2\b\fs20  / r CMP r\cf1 8\plain\f2\b\fs20 ,r/m\cf1 8\plain\f2\b\fs20  Compare r/m\cf1 8\plain\f2\b\fs20  with r\cf1 8
\par \plain\f2\b\fs20         \cf3 3B\plain\f2\b\fs20  / r CMP r\cf1 16\plain\f2\b\fs20 ,r/m\cf1 16\plain\f2\b\fs20  Compare r/m\cf1 16\plain\f2\b\fs20  with r\cf1 16
\par \plain\f2\b\fs20         \cf3 3B\plain\f2\b\fs20  / r CMP r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 32\plain\f2\b\fs20  Compare r/m\cf1 32\plain\f2\b\fs20  with r\cf1 32
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0021}
{\up $}{\footnote\pard\plain{\up $} CMPS}
{\up #}{\footnote\pard\plain{\up #} CMPS}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} CMPS}

\par 
\par \pard 
\par \f2\b\cf1 CMPS \cf2 - Compare String (Byte, Word or Doubleword)
\par \plain\f2\b\fs20         Usage:  CMPS    dest,src
\par                 CMPSB
\par                 CMPSW
\par                 CMPSD   (\cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: AF CF OF PF SF ZF
\par         Subtracts destination value from source without saving results.
\par         Updates flags based on the subtraction and  the index registers
\par         (E)SI and (E)DI are incremented or decremented depending on the
\par         state of the Direction Flag.  CMPSB inc/decrements the index
\par \pard         registers by \cf1 1\plain\f2\b\fs20 , CMPSW inc/decrements by \cf1 2\plain\f2\b\fs20 , while CMPSD increments
\par         or decrements by \cf1 4\plain\f2\b\fs20 .  The REP prefixes can be used to process
\par         entire data items.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         dest,src          \cf1 22\plain\f2\b\fs20     \cf1 8\plain\f2\b\fs20      \cf1 10\plain\f2\b\fs20     \cf1 8\plain\f2\b\fs20              \cf1 1\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 30\plain\f2\b\fs20 )
\par \pard \plain\fs20 
\par \f2\b         \cf3 A6\plain\f2\b\fs20  CMPS m\cf1 8\plain\f2\b\fs20 , m\cf1 8
\par \plain\f2\b\fs20         \cf3 A7\plain\f2\b\fs20  CMPS m\cf1 16\plain\f2\b\fs20 , m\cf1 16
\par \plain\f2\b\fs20         \cf3 A7\plain\f2\b\fs20  CMPS m\cf1 32\plain\f2\b\fs20 , m\cf1 32
\par \plain\f2\b\fs20         \cf3 A6\plain\f2\b\fs20  CMPSB
\par         \cf3 A7\plain\f2\b\fs20  CMPSW
\par         \cf3 A7\plain\f2\b\fs20  CMPSD
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0022}
{\up $}{\footnote\pard\plain{\up $} CMPXCHG}
{\up #}{\footnote\pard\plain{\up #} CMPXCHG}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} CMPXCHG}

\par 
\par \pard 
\par \f2\b\cf1 CMPXCHG \cf2 - Compare and Exchange
\par \plain\f2\b\fs20         Usage:  CMPXCHG dest,src  (\cf1 486\plain\f2\b\fs20 +)
\par         Modifies flags: AF CF OF PF SF ZF
\par         Compares the accumulator (\cf1 8\plain\f2\b\fs20 -\cf1 32\plain\f2\b\fs20  bits) with "dest".  If equal the
\par         "dest" is loaded with "src", otherwise the accumulator is loaded
\par         with "dest".
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         reg,reg           -     -     -     \cf1 6\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20         mem,reg           -     -     -     \cf1 7\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20     - add \cf1 3\plain\f2\b\fs20  clocks if the "mem,reg" comparison fails
\par \plain\fs20 
\par \f2\b         \cf3 0F B0\plain\f2\b\fs20 / r CMPXCHG r/m\cf1 8\plain\f2\b\fs20 ,r\cf1 8
\par \plain\f2\b\fs20         \cf3 0F B1\plain\f2\b\fs20 / r CMPXCHG r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20  Compare AX with r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 0F B1\plain\f2\b\fs20 / r CMPXCHG r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20  Compare EAX with r/m\cf1 32
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0023}
{\up $}{\footnote\pard\plain{\up $} CWD}
{\up #}{\footnote\pard\plain{\up #} CWD}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} CWD}

\par 
\par \pard 
\par \f2\b\cf1 CWD \cf2 - Convert Word to Doubleword
\par \plain\f2\b\fs20         Usage:  CWD
\par         Modifies flags: None
\par         Extends sign of word in register AX throughout register DX forming
\par         a doubleword quantity in DX:AX.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              \cf1 5\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 99\plain\f2\b\fs20  CWD DX:AX
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0024}
{\up $}{\footnote\pard\plain{\up $} CWDE}
{\up #}{\footnote\pard\plain{\up #} CWDE}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} CWDE}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 CWDE \cf2 - Convert Word to Extended Doubleword (386+)
\par \plain\f2\b\fs20         Usage:  CWDE
\par         Modifies flags: None
\par         Converts a signed word in AX to a signed doubleword in EAX by
\par         extending the sign bit of AX throughout EAX.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              -     -     \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 1
\par \pard \plain\fs20 
\par \f2\b         \cf3 98\plain\f2\b\fs20  CWDE EAX  sign-extend of AX
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0025}
{\up $}{\footnote\pard\plain{\up $} DAA}
{\up #}{\footnote\pard\plain{\up #} DAA}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} DAA}

\par 
\par \pard 
\par \f2\b\cf1 DAA \cf2 - Decimal Adjust for Addition
\par \plain\f2\b\fs20         Usage:  DAA
\par         Modifies flags: AF CF PF SF ZF (OF undefined)
\par         Corrects result (in AL) of a previous BCD addition operation.
\par         Contents of AL are changed to a pair of packed decimal digits.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20              \cf1 1
\par \pard \plain\fs20 
\par \f2\b         \cf3 27\plain\f2\b\fs20  DAA Decimal adjust AL after addition
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0026}
{\up $}{\footnote\pard\plain{\up $} DAS}
{\up #}{\footnote\pard\plain{\up #} DAS}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} DAS}

\par 
\par \pard 
\par \f2\b\cf1 DAS \cf2 - Decimal Adjust for Subtraction
\par \plain\f2\b\fs20         Usage:  DAS
\par         Modifies flags: AF CF PF SF ZF (OF undefined)
\par         Corrects result (in AL) of a previous BCD subtraction operation.
\par         Contents of AL are changed to a pair of packed decimal digits.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none               \cf1 4\plain\f2\b\fs20     \cf1 3\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20              \cf1 1
\par \pard \plain\fs20 
\par \f2\b         \cf3 2F\plain\f2\b\fs20  DAS Decimal adjust AL after subtraction
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0027}
{\up $}{\footnote\pard\plain{\up $} DEC}
{\up #}{\footnote\pard\plain{\up #} DEC}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} DEC}

\par 
\par \pard 
\par \f2\b\cf1 DEC \cf2 - Decrement
\par \plain\f2\b\fs20         Usage:  DEC     dest
\par         Modifies flags: AF OF PF SF ZF
\par         Unsigned binary subtraction of one from the destination.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 8\plain\f2\b\fs20               \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20         mem             \cf1 15\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4
\par \pard \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20           \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 FE\plain\f2\b\fs20  /\cf1 1\plain\f2\b\fs20  DEC r/m\cf1 8\plain\f2\b\fs20  Decrement r/m\cf1 8\plain\f2\b\fs20  by \cf1 1
\par \plain\f2\b\fs20         \cf3 FF\plain\f2\b\fs20  /\cf1 1\plain\f2\b\fs20  DEC r/m\cf1 16\plain\f2\b\fs20  Decrement r/m\cf1 16\plain\f2\b\fs20  by \cf1 1
\par \plain\f2\b\fs20         \cf3 FF\plain\f2\b\fs20  /\cf1 1\plain\f2\b\fs20  DEC r/m\cf1 32\plain\f2\b\fs20  Decrement r/m\cf1 32\plain\f2\b\fs20  by \cf1 1
\par \plain\f2\b\fs20         \cf3 48\plain\f2\b\fs20 +rw DEC r\cf1 16\plain\f2\b\fs20  Decrement r\cf1 16\plain\f2\b\fs20  by \cf1 1
\par \plain\f2\b\fs20         \cf3 48\plain\f2\b\fs20 +rd DEC r\cf1 32\plain\f2\b\fs20  Decrement r\cf1 32\plain\f2\b\fs20  by \cf1 1
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0028}
{\up $}{\footnote\pard\plain{\up $} DIV}
{\up #}{\footnote\pard\plain{\up #} DIV}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} DIV}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 DIV \cf2 - Divide
\par \plain\f2\b\fs20         Usage:  DIV     src
\par         Modifies flags: (AF,CF,OF,PF,SF,ZF undefined)
\par         Unsigned binary division of accumulator by source.  If the source
\par         divisor is a byte value then AX is divided by "src" and the quotient
\par         is placed in AL and the remainder in AH.  If source operand is a word
\par         value, then DX:AX is divided by "src" and the quotient is stored in AX
\par         and the remainder in DX.
\par                                  Clocks                 Size
\par \pard         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 8\plain\f2\b\fs20              \cf1 80\plain\f2\b\fs20 -\cf1 90\plain\f2\b\fs20   \cf1 14\plain\f2\b\fs20     \cf1 14\plain\f2\b\fs20     \cf1 16\plain\f2\b\fs20             \cf1 2
\par \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20            \cf1 144\plain\f2\b\fs20 -\cf1 162\plain\f2\b\fs20  \cf1 22\plain\f2\b\fs20     \cf1 22\plain\f2\b\fs20     \cf1 24\plain\f2\b\fs20             \cf1 2
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20               -    -     \cf1 38\plain\f2\b\fs20     \cf1 40\plain\f2\b\fs20             \cf1 2
\par \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20         (\cf1 86\plain\f2\b\fs20 -\cf1 96\plain\f2\b\fs20 )+EA  \cf1 17\plain\f2\b\fs20     \cf1 17\plain\f2\b\fs20     \cf1 16\plain\f2\b\fs20            \cf1 2\plain\f2\b\fs20 -\cf1 4
\par \pard \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20      (\cf1 150\plain\f2\b\fs20 -\cf1 168\plain\f2\b\fs20 )+EA  \cf1 25\plain\f2\b\fs20     \cf1 25\plain\f2\b\fs20     \cf1 24\plain\f2\b\fs20            \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 158\plain\f2\b\fs20 -\cf1 176\plain\f2\b\fs20 +EA)
\par         mem\cf1 32\plain\f2\b\fs20               -    -     \cf1 41\plain\f2\b\fs20     \cf1 40\plain\f2\b\fs20            \cf1 2\plain\f2\b\fs20 -\cf1 4
\par \plain\fs20 
\par \f2\b         \cf3 F6\plain\f2\b\fs20  /\cf1 6\plain\f2\b\fs20  DIV r/m\cf1 8\plain\f2\b\fs20  Unsigned divide AX by r/m\cf1 8
\par \plain\f2\b\fs20         \cf3 F7\plain\f2\b\fs20  /\cf1 6\plain\f2\b\fs20  DIV r/m\cf1 16\plain\f2\b\fs20  Unsigned divide DX:AX by r/m\cf1 16\plain\f2\b\fs20 ; AX
\par         \cf3 F7\plain\f2\b\fs20  /\cf1 6\plain\f2\b\fs20  DIV r/m\cf1 32\plain\f2\b\fs20  Unsigned divide EDX:EAX by r/m\cf1 32\plain\f2\b\fs20  doubleword
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0029}
{\up $}{\footnote\pard\plain{\up $} ENTER}
{\up #}{\footnote\pard\plain{\up #} ENTER}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} ENTER}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 ENTER \cf2 - Make Stack Frame  (80188+)
\par \plain\f2\b\fs20         Usage:  ENTER   locals,level
\par         Modifies flags: None
\par         Modifies stack for entry to procedure for high level language.
\par         Operand "locals" specifies the amount of storage to be allocated
\par         on the stack.   "Level" specifies the nesting level of the routine.
\par         Paired with the LEAVE instruction, this is an efficient method of
\par         entry and exit to procedures.
\par                                      Clocks                     Size
\par \pard         Operands         \cf1 808\plain\f2\b\fs20 x    \cf1 286\plain\f2\b\fs20        \cf1 386\plain\f2\b\fs20        \cf1 486\plain\f2\b\fs20         Bytes
\par         immed\cf1 16\plain\f2\b\fs20 ,\cf1 0\plain\f2\b\fs20          -       \cf1 11\plain\f2\b\fs20        \cf1 10\plain\f2\b\fs20          \cf1 14\plain\f2\b\fs20           \cf1 4
\par \plain\f2\b\fs20         immed\cf1 16\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20          -       \cf1 15\plain\f2\b\fs20        \cf1 12\plain\f2\b\fs20          \cf1 17\plain\f2\b\fs20           \cf1 4
\par \plain\f2\b\fs20         immed\cf1 16\plain\f2\b\fs20 ,immed\cf1 8\plain\f2\b\fs20     -   \cf1 12\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 (n-\cf1 1\plain\f2\b\fs20 ) \cf1 15\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 (n-\cf1 1\plain\f2\b\fs20 )    \cf1 17\plain\f2\b\fs20 +\cf1 3\plain\f2\b\fs20 n        \cf1 4
\par \pard \plain\fs20 
\par \f2\b         \cf3 C8\plain\f2\b\fs20  iw \cf1 00\plain\f2\b\fs20  ENTER imm\cf1 16\plain\f2\b\fs20 ,\cf1 0\plain\f2\b\fs20  Create a stack frame for a procedure
\par         \cf3 C8\plain\f2\b\fs20  iw \cf1 01\plain\f2\b\fs20  ENTER imm\cf1 16\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Create a nested stack frame for a procedure
\par         \cf3 C8\plain\f2\b\fs20  iw ib ENTER imm\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Create a nested stack frame for a procedure
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:002a}
{\up $}{\footnote\pard\plain{\up $} ESC}
{\up #}{\footnote\pard\plain{\up #} ESC}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} ESC}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 ESC \cf2 - Escape
\par \plain\f2\b\fs20         Usage:  ESC     immed,src
\par         Modifies flags: None
\par         Provides access to the data bus for other resident processors.
\par         The CPU treats it as a NOP but places memory operand on bus.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         immed,reg         \cf1 2\plain\f2\b\fs20    \cf1 9\plain\f2\b\fs20 -\cf1 20\plain\f2\b\fs20     ?                   \cf1 2
\par \pard \plain\f2\b\fs20         immed,mem         \cf1 2\plain\f2\b\fs20    \cf1 9\plain\f2\b\fs20 -\cf1 20\plain\f2\b\fs20     ?                  \cf1 2\plain\f2\b\fs20 -\cf1 4
\par \plain\fs20 
\par \f2\b         \cf3 D8\plain\f2\b\fs20 h xxh ESC \cf1 0
\par \plain\f2\b\fs20        \cf3  D9\plain\f2\b\fs20 h xxh ESC \cf1 1
\par \plain\f2\b\fs20         \cf3 DA\plain\f2\b\fs20 h xxh ESC \cf1 2
\par \plain\f2\b\fs20         \cf3 DB\plain\f2\b\fs20 h xxh ESC \cf1 3
\par \plain\f2\b\fs20         \cf3 DC\plain\f2\b\fs20 h xxh ESC \cf1 4
\par \plain\f2\b\fs20         \cf3 DD\plain\f2\b\fs20 h xxh ESC \cf1 5
\par \plain\f2\b\fs20         \cf3 DE\plain\f2\b\fs20 h xxh ESC \cf1 6
\par \plain\f2\b\fs20         \cf3 DF\plain\f2\b\fs20 h xxh ESC \cf1 7
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:002b}
{\up $}{\footnote\pard\plain{\up $} HLT}
{\up #}{\footnote\pard\plain{\up #} HLT}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} HLT}

\par 
\par \pard 
\par \f2\b\cf1 HLT \cf2 - Halt CPU
\par \plain\f2\b\fs20         Usage:   HLT
\par         Modifies flags: None
\par         Halts CPU until RESET line is activated, NMI or maskable interrupt
\par         received.  The CPU becomes dormant but retains the current CS:IP
\par         for later restart.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 1
\par \pard \plain\fs20 
\par \f2\b         \cf3 F4\plain\f2\b\fs20  HLT Halt
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:002c}
{\up $}{\footnote\pard\plain{\up $} IDIV}
{\up #}{\footnote\pard\plain{\up #} IDIV}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} IDIV}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 IDIV \cf2 - Signed Integer Division
\par \plain\f2\b\fs20         Usage:   IDIV   src
\par         Modifies flags: (AF,CF,OF,PF,SF,ZF undefined)
\par         Signed binary division of accumulator by source.  If source is a
\par         byte value, AX is divided by "src" and the quotient is stored in
\par         AL and the remainder in AH.  If source is a word value, DX:AX is
\par         divided by "src", and the quotient is stored in AL and the
\par         remainder in DX.
\par                                  Clocks                 Size
\par \pard         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 8\plain\f2\b\fs20           \cf1 101\plain\f2\b\fs20 -\cf1 112\plain\f2\b\fs20    \cf1 17\plain\f2\b\fs20     \cf1 19\plain\f2\b\fs20     \cf1 19\plain\f2\b\fs20             \cf1 2
\par \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20          \cf1 165\plain\f2\b\fs20 -\cf1 184\plain\f2\b\fs20    \cf1 25\plain\f2\b\fs20     \cf1 27\plain\f2\b\fs20     \cf1 27\plain\f2\b\fs20             \cf1 2
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20             -      -     \cf1 43\plain\f2\b\fs20     \cf1 43\plain\f2\b\fs20             \cf1 2
\par \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20      (\cf1 107\plain\f2\b\fs20 -\cf1 118\plain\f2\b\fs20 )+EA   \cf1 20\plain\f2\b\fs20     \cf1 22\plain\f2\b\fs20     \cf1 20\plain\f2\b\fs20            \cf1 2\plain\f2\b\fs20 -\cf1 4
\par \pard \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20     (\cf1 171\plain\f2\b\fs20 -\cf1 190\plain\f2\b\fs20 )+EA   \cf1 38\plain\f2\b\fs20     \cf1 30\plain\f2\b\fs20     \cf1 28\plain\f2\b\fs20            \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 175\plain\f2\b\fs20 -\cf1 194\plain\f2\b\fs20 )
\par         mem\cf1 32\plain\f2\b\fs20             -      -     \cf1 46\plain\f2\b\fs20     \cf1 44\plain\f2\b\fs20            \cf1 2\plain\f2\b\fs20 -\cf1 4
\par \plain\fs20 
\par \f2\b         \cf3 F6\plain\f2\b\fs20  /\cf1 7\plain\f2\b\fs20  IDIV r/m\cf1 8\plain\f2\b\fs20  Signed divide
\par         \cf3 F7\plain\f2\b\fs20  /\cf1 7\plain\f2\b\fs20  IDIV r/m\cf1 16\plain\f2\b\fs20  Signed divide
\par         \cf3 F7\plain\f2\b\fs20  /\cf1 7\plain\f2\b\fs20  IDIV r/m\cf1 32\plain\f2\b\fs20  Signed divide
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:002d}
{\up $}{\footnote\pard\plain{\up $} IMUL}
{\up #}{\footnote\pard\plain{\up #} IMUL}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} IMUL}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 IMUL \cf2 - Signed Multiply
\par \plain\f2\b\fs20         Usage:  IMUL    src
\par                 IMUL    src,immed        (\cf1 286\plain\f2\b\fs20 +)
\par                 IMUL    dest,src,immed\cf1 8\plain\f2\b\fs20   (\cf1 286\plain\f2\b\fs20 +)
\par                 IMUL    dest,src         (\cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: CF OF (AF,PF,SF,ZF undefined)
\par         Signed multiplication of accumulator by "src" with result placed
\par         in the accumulator.  If the source operand is a byte value, it
\par         is multiplied by AL and the result stored in AX.  If the source
\par \pard         operand is a word value it is multiplied by AX and the result is
\par         stored in DX:AX.  Other variations of this instruction allow
\par         specification of source and destination registers as well as a
\par         third immediate factor.
\par                                   Clocks                Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x   \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20          Bytes
\par         reg\cf1 8\plain\f2\b\fs20              \cf1 80\plain\f2\b\fs20 -\cf1 98\plain\f2\b\fs20    \cf1 13\plain\f2\b\fs20    \cf1 9\plain\f2\b\fs20 -\cf1 14\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 18\plain\f2\b\fs20          \cf1 2
\par \pard \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20            \cf1 128\plain\f2\b\fs20 -\cf1 154\plain\f2\b\fs20   \cf1 21\plain\f2\b\fs20    \cf1 9\plain\f2\b\fs20 -\cf1 22\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 26\plain\f2\b\fs20          \cf1 2
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20               -     -    \cf1 9\plain\f2\b\fs20 -\cf1 38\plain\f2\b\fs20   \cf1 12\plain\f2\b\fs20 -\cf1 42\plain\f2\b\fs20          \cf1 2
\par \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20              \cf1 86\plain\f2\b\fs20 -\cf1 104\plain\f2\b\fs20   \cf1 16\plain\f2\b\fs20   \cf1 12\plain\f2\b\fs20 -\cf1 17\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 18\plain\f2\b\fs20         \cf1 2\plain\f2\b\fs20 -\cf1 4
\par \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20            \cf1 134\plain\f2\b\fs20 -\cf1 160\plain\f2\b\fs20   \cf1 24\plain\f2\b\fs20   \cf1 12\plain\f2\b\fs20 -\cf1 25\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 26\plain\f2\b\fs20         \cf1 2\plain\f2\b\fs20 -\cf1 4
\par \pard \plain\f2\b\fs20         mem\cf1 32\plain\f2\b\fs20               -     -   \cf1 12\plain\f2\b\fs20 -\cf1 41\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 42\plain\f2\b\fs20         \cf1 2\plain\f2\b\fs20 -\cf1 4
\par \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20 ,reg\cf1 16\plain\f2\b\fs20         -     -    \cf1 9\plain\f2\b\fs20 -\cf1 22\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 26\plain\f2\b\fs20         \cf1 3\plain\f2\b\fs20 -\cf1 5
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,reg\cf1 32\plain\f2\b\fs20         -     -    \cf1 9\plain\f2\b\fs20 -\cf1 38\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 42\plain\f2\b\fs20         \cf1 3\plain\f2\b\fs20 -\cf1 5
\par \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20 ,mem\cf1 16\plain\f2\b\fs20         -     -   \cf1 12\plain\f2\b\fs20 -\cf1 25\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 26\plain\f2\b\fs20         \cf1 3\plain\f2\b\fs20 -\cf1 5
\par \pard \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,mem\cf1 32\plain\f2\b\fs20         -     -   \cf1 12\plain\f2\b\fs20 -\cf1 41\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 42\plain\f2\b\fs20         \cf1 3\plain\f2\b\fs20 -\cf1 5
\par \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20 ,immed        -     \cf1 21\plain\f2\b\fs20    \cf1 9\plain\f2\b\fs20 -\cf1 22\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 26\plain\f2\b\fs20          \cf1 3
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,immed        -     \cf1 21\plain\f2\b\fs20    \cf1 9\plain\f2\b\fs20 -\cf1 38\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 42\plain\f2\b\fs20         \cf1 3\plain\f2\b\fs20 -\cf1 6
\par \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20 ,reg\cf1 16\plain\f2\b\fs20 ,immed  -     \cf1 2\plain\f2\b\fs20     \cf1 9\plain\f2\b\fs20 -\cf1 22\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 26\plain\f2\b\fs20         \cf1 3\plain\f2\b\fs20 -\cf1 6
\par \pard \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,reg\cf1 32\plain\f2\b\fs20 ,immed  -     \cf1 21\plain\f2\b\fs20    \cf1 9\plain\f2\b\fs20 -\cf1 38\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 42\plain\f2\b\fs20         \cf1 3\plain\f2\b\fs20 -\cf1 6
\par \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20 ,mem\cf1 16\plain\f2\b\fs20 ,immed  -     \cf1 24\plain\f2\b\fs20   \cf1 12\plain\f2\b\fs20 -\cf1 25\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 26\plain\f2\b\fs20         \cf1 3\plain\f2\b\fs20 -\cf1 6
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,mem\cf1 32\plain\f2\b\fs20 ,immed  -     \cf1 24\plain\f2\b\fs20   \cf1 12\plain\f2\b\fs20 -\cf1 41\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 42\plain\f2\b\fs20         \cf1 3\plain\f2\b\fs20 -\cf1 6
\par \plain\fs20 
\par \f2\b         \cf3 F6\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  IMUL r/m\cf1 8\plain\f2\b\fs20  AX\'ac AL * r/m byte
\par         \cf3 F7\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  IMUL r/m\cf1 16\plain\f2\b\fs20  DX:AX \'ac AX * r/m word
\par \pard         \cf3 F7\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  IMUL r/m\cf1 32\plain\f2\b\fs20  EDX:EAX \'ac EAX * r/m doubleword
\par         \cf3 0F AF\plain\f2\b\fs20  / r IMUL r\cf1 16\plain\f2\b\fs20 ,r/m\cf1 16\plain\f2\b\fs20  word register
\par         \cf3 0F AF\plain\f2\b\fs20  / r IMUL r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 32\plain\f2\b\fs20  doubleword register
\par         \cf3 6B\plain\f2\b\fs20  / r ib IMUL r\cf1 16\plain\f2\b\fs20 ,r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  word register
\par         \cf3 6B\plain\f2\b\fs20  / r ib IMUL r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  doubleword register byte
\par         \cf3 6B\plain\f2\b\fs20  / r ib IMUL r\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  word register
\par \pard         \cf3 6B\plain\f2\b\fs20  / r ib IMUL r\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  doubleword register
\par         \cf3 69\plain\f2\b\fs20  / r iw IMUL r\cf1 16\plain\f2\b\fs20 ,r/ m\cf1 16\plain\f2\b\fs20 ,imm\cf1 16
\par \plain\f2\b\fs20         \cf3 69\plain\f2\b\fs20  / r id IMUL r\cf1 32\plain\f2\b\fs20 ,r/ m\cf1 32\plain\f2\b\fs20 ,imm\cf1 32
\par \plain\f2\b\fs20         \cf3 69\plain\f2\b\fs20  / r iw IMUL r\cf1 16\plain\f2\b\fs20 ,imm\cf1 16\plain\f2\b\fs20  word register \'ac r/m\cf1 16\plain\f2\b\fs20  * immediate word
\par         \cf3 69\plain\f2\b\fs20  / r id IMUL r\cf1 32\plain\f2\b\fs20 ,imm\cf1 32\plain\f2\b\fs20  doubleword register \'ac r/m\cf1 32\plain\f2\b\fs20  * immediate doubleword
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:002e}
{\up $}{\footnote\pard\plain{\up $} IN}
{\up #}{\footnote\pard\plain{\up #} IN}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} IN}

\par 
\par \pard 
\par \f2\b\cf1 IN \cf2 - Input Byte or Word From Port
\par \plain\f2\b\fs20         Usage:  IN      accum,port
\par         Modifies flags: None
\par         A byte, word or dword is read from "port" and placed in AL, AX or
\par         EAX respectively.  If the port number is in the range of \cf1 0\plain\f2\b\fs20 -\cf1 255
\par \plain\f2\b\fs20         it can be specified as an immediate, otherwise the port number
\par         must be specified in DX.  Valid port ranges on the PC are \cf1 0\plain\f2\b\fs20 -\cf1 1024\plain\f2\b\fs20 ,
\par         though values through \cf1 65535\plain\f2\b\fs20  may be specified and recognized by
\par \pard         third party vendors and PS/\cf1 2\plain\f2\b\fs20 's.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20     \cf1 486\plain\f2\b\fs20          Bytes
\par         accum,immed\cf1 8\plain\f2\b\fs20     \cf1 10\plain\f2\b\fs20 /\cf1 14\plain\f2\b\fs20    \cf1 5\plain\f2\b\fs20      \cf1 12\plain\f2\b\fs20      \cf1 14\plain\f2\b\fs20            \cf1 2
\par \plain\f2\b\fs20         accum,immed\cf1 8\plain\f2\b\fs20  (PM)            \cf1 6\plain\f2\b\fs20 /\cf1 26\plain\f2\b\fs20   \cf1 8\plain\f2\b\fs20 /\cf1 28\plain\f2\b\fs20 /\cf1 27\plain\f2\b\fs20         \cf1 2
\par \plain\f2\b\fs20         accum,DX         \cf1 8\plain\f2\b\fs20 /\cf1 12\plain\f2\b\fs20    \cf1 5\plain\f2\b\fs20      \cf1 13\plain\f2\b\fs20      \cf1 14\plain\f2\b\fs20            \cf1 1
\par \pard \plain\f2\b\fs20         accum,DX (PM)                \cf1 7\plain\f2\b\fs20 /\cf1 27\plain\f2\b\fs20   \cf1 8\plain\f2\b\fs20 /\cf1 28\plain\f2\b\fs20 /\cf1 27\plain\f2\b\fs20         \cf1 1
\par \plain\f2\b\fs20         - \cf1 386\plain\f2\b\fs20 + protected mode timings depend on privilege levels.
\par           first number is the timing if:    CPL \'f3 IOPL
\par           second number is the timing if:   CPL > IOPL or in VM \cf1 86\plain\f2\b\fs20  mode (\cf1 386\plain\f2\b\fs20 )
\par                                             CPL \'f2 IOPL  (\cf1 486\plain\f2\b\fs20 )
\par           third number is the timing when:    virtual mode on \cf1 486\plain\f2\b\fs20  processor
\par \pard         - \cf1 486\plain\f2\b\fs20  virtual mode always requires \cf1 27\plain\f2\b\fs20  cycles
\par \plain\fs20 
\par \f2\b         \cf3 E4\plain\f2\b\fs20  ib IN AL, imm\cf1 8\plain\f2\b\fs20  Input byte from imm\cf1 8\plain\f2\b\fs20  I/O port address into AL
\par         \cf3 E5\plain\f2\b\fs20  ib IN AX, imm\cf1 8\plain\f2\b\fs20  Input byte from imm\cf1 8\plain\f2\b\fs20  I/O port address into AX
\par         \cf3 E5\plain\f2\b\fs20  ib IN EAX, imm\cf1 8\plain\f2\b\fs20  Input byte from imm\cf1 8\plain\f2\b\fs20  I/O port address into EAX
\par         \cf3 EC\plain\f2\b\fs20  IN AL,DX Input byte from I/O port in DX into AL
\par         \cf3 ED\plain\f2\b\fs20  IN AX,DX Input word from I/O port in DX into AX
\par \pard         \cf3 ED\plain\f2\b\fs20  IN EAX,DX Input doubleword from I/O port in DX into EAX
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:002f}
{\up $}{\footnote\pard\plain{\up $} INC}
{\up #}{\footnote\pard\plain{\up #} INC}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} INC}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 INC \cf2 - Increment
\par \plain\f2\b\fs20         Usage:  INC     dest
\par         Modifies flags: AF OF PF SF ZF
\par         Adds one to destination unsigned binary operand.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 8\plain\f2\b\fs20               \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20              \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 1
\par \pard \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20              \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 1
\par \plain\f2\b\fs20         mem            \cf1 15\plain\f2\b\fs20 +EA    \cf1 7\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 23\plain\f2\b\fs20 +EA)
\par \plain\fs20 
\par \f2\b         \cf3 FE\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  INC r/m\cf1 8\plain\f2\b\fs20  Increment r/m byte by \cf1 1
\par \plain\f2\b\fs20         \cf3 FF\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  INC r/m\cf1 16\plain\f2\b\fs20  Increment r/m word by \cf1 1
\par \plain\f2\b\fs20         \cf3 FF\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  INC r/m\cf1 32\plain\f2\b\fs20  Increment r/m doubleword by \cf1 1
\par \pard \plain\f2\b\fs20         \cf3 40\plain\f2\b\fs20 + rw INC r\cf1 16\plain\f2\b\fs20  Increment word register by \cf1 1
\par \plain\f2\b\fs20         \cf3 40\plain\f2\b\fs20 + rd INC r\cf1 32\plain\f2\b\fs20  Increment doubleword register by \cf1 1
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0030}
{\up $}{\footnote\pard\plain{\up $} INS}
{\up #}{\footnote\pard\plain{\up #} INS}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} INS}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 INS \cf2 - Input String from Port  (80188+)
\par \plain\f2\b\fs20         Usage:  INS     dest,port
\par                 INSB
\par                 INSW
\par                 INSD    (\cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: None
\par         Loads data from port to the destination ES:(E)DI  (even if a
\par         destination operand is supplied).  (E)DI is adjusted by the size
\par         of the operand and increased if the Direction Flag is cleared and
\par         decreased if the Direction Flag is set.  For INSB, INSW, INSD no
\par \pard         operands are allowed and the size is determined by the mnemonic.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20     \cf1 486\plain\f2\b\fs20          Bytes
\par         dest,port         -     \cf1 5\plain\f2\b\fs20      \cf1 15\plain\f2\b\fs20      \cf1 17\plain\f2\b\fs20            \cf1 1
\par \plain\f2\b\fs20         dest,port (PM)    -     \cf1 5\plain\f2\b\fs20     \cf1 9\plain\f2\b\fs20 /\cf1 29\plain\f2\b\fs20  \cf1 10\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20 /\cf1 30\plain\f2\b\fs20         \cf1 1
\par \plain\f2\b\fs20         none              -     \cf1 5\plain\f2\b\fs20      \cf1 15\plain\f2\b\fs20      \cf1 17\plain\f2\b\fs20            \cf1 1
\par \pard \plain\f2\b\fs20         none (PM)         -     \cf1 5\plain\f2\b\fs20     \cf1 9\plain\f2\b\fs20 /\cf1 29\plain\f2\b\fs20  \cf1 10\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20 /\cf1 30\plain\f2\b\fs20         \cf1 1
\par \plain\f2\b\fs20         - \cf1 386\plain\f2\b\fs20 + protected mode timings depend on privilege levels.
\par           first number is the timing if:    CPL \'f3 IOPL
\par           second number is the timing if:   CPL > IOPL
\par         third number is the timing if:    virtual mode on \cf1 486\plain\f2\b\fs20  processor
\par \plain\fs20 
\par \f2\b         \cf3 6C\plain\f2\b\fs20  INS m\cf1 8\plain\f2\b\fs20 , DX
\par         \cf3 6D\plain\f2\b\fs20  INS m\cf1 16\plain\f2\b\fs20 , DX
\par         \cf3 6D\plain\f2\b\fs20  INS m\cf1 32\plain\f2\b\fs20 , DX
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0031}
{\up $}{\footnote\pard\plain{\up $} INT}
{\up #}{\footnote\pard\plain{\up #} INT}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} INT}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 INT \cf2 - Interrupt
\par \plain\f2\b\fs20         Usage:  INT     num
\par         Modifies flags: TF IF
\par         Initiates a software interrupt by pushing the flags, clearing the
\par         Trap and Interrupt Flags, pushing CS followed by IP and loading
\par         CS:IP with the value found in the interrupt vector table.  Execution
\par         then begins at the location addressed by the new CS:IP
\par                                                Clocks           Size
\par             Operands                    \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20    Bytes
\par \pard  \cf1 3\plain\f2\b\fs20  (constant)                          \cf1 52\plain\f2\b\fs20 /\cf1 72\plain\f2\b\fs20   \cf1 23\plain\f2\b\fs20 +m   \cf1 33\plain\f2\b\fs20     \cf1 26\plain\f2\b\fs20      \cf1 2
\par \plain\f2\b\fs20  \cf1 3\plain\f2\b\fs20  (prot. mode, same priv.)              -    \cf1 40\plain\f2\b\fs20 +m   \cf1 59\plain\f2\b\fs20     \cf1 44\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20        
\par  \cf1 3\plain\f2\b\fs20  (prot. mode, more priv.)              -    \cf1 78\plain\f2\b\fs20 +m   \cf1 99\plain\f2\b\fs20     \cf1 71\plain\f2\b\fs20      \cf1 2
\par \plain\f2\b\fs20  \cf1 3\plain\f2\b\fs20  (from VM\cf1 86\plain\f2\b\fs20  to PL \cf1 0\plain\f2\b\fs20 )                   -     -    \cf1 119\plain\f2\b\fs20     \cf1 82\plain\f2\b\fs20      \cf1 2
\par \plain\f2\b\fs20  \cf1 3\plain\f2\b\fs20  (prot. mode via task gate)            -   \cf1 167\plain\f2\b\fs20 +m   TS  \cf1 37\plain\f2\b\fs20 +TS    \cf1 2
\par \pard \plain\f2\b\fs20  immed\cf1 8\plain\f2\b\fs20                                 \cf1 51\plain\f2\b\fs20 /\cf1 71\plain\f2\b\fs20   \cf1 23\plain\f2\b\fs20 +m   \cf1 37\plain\f2\b\fs20     \cf1 30\plain\f2\b\fs20      \cf1 1
\par \plain\f2\b\fs20  immed\cf1 8\plain\f2\b\fs20  (prot. mode, same priv.)         -    \cf1 40\plain\f2\b\fs20 +m   \cf1 59\plain\f2\b\fs20     \cf1 44\plain\f2\b\fs20      \cf1 1
\par \plain\f2\b\fs20  immed\cf1 8\plain\f2\b\fs20  (prot. mode, more priv.)         -    \cf1 78\plain\f2\b\fs20 +m   \cf1 99\plain\f2\b\fs20     \cf1 71\plain\f2\b\fs20      \cf1 1
\par \plain\f2\b\fs20  immed\cf1 8\plain\f2\b\fs20  (from VM\cf1 86\plain\f2\b\fs20  to PL \cf1 0\plain\f2\b\fs20 )              -     -    \cf1 119\plain\f2\b\fs20     \cf1 86\plain\f2\b\fs20      \cf1 1
\par \plain\f2\b\fs20  immed\cf1 8\plain\f2\b\fs20  (prot. mode, via task gate)      -   \cf1 167\plain\f2\b\fs20 +m   TS  \cf1 37\plain\f2\b\fs20 +TS    \cf1 1
\par \pard \plain\fs20 
\par \f2\b\cf3 CC\plain\f2\b\fs20  INT \cf1 3\plain\f2\b\fs20  Interrupt \cf1 3\plain\f2\b\fs20  trap to debugger
\par \cf3 CD\plain\f2\b\fs20  ib INT imm\cf1 8\plain\f2\b\fs20  Interrupt vector number specified by immediate byte
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0032}
{\up $}{\footnote\pard\plain{\up $} INTO}
{\up #}{\footnote\pard\plain{\up #} INTO}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} INTO}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 INTO \cf2 - Interrupt on Overflow
\par \plain\f2\b\fs20         Usage:  INTO
\par         Modifies flags: IF TF
\par         If the Overflow Flag is set this instruction generates an INT \cf1 4
\par \plain\f2\b\fs20         which causes the code addressed by \cf1 0000\plain\f2\b\fs20 :\cf1 0010\plain\f2\b\fs20  to be executed.
\par                                           Clocks           Size
\par         Operands                \cf1 808\plain\f2\b\fs20 x    \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20     Bytes
\par         none: jump             \cf1 53\plain\f2\b\fs20 /\cf1 73\plain\f2\b\fs20    \cf1 24\plain\f2\b\fs20 +m    \cf1 35\plain\f2\b\fs20     \cf1 28\plain\f2\b\fs20       \cf1 1
\par \pard \plain\f2\b\fs20               no jump            \cf1 4\plain\f2\b\fs20        \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 3
\par \plain\f2\b\fs20         (prot. mode, same priv.) -       -     \cf1 59\plain\f2\b\fs20     \cf1 46\plain\f2\b\fs20       \cf1 1
\par \plain\f2\b\fs20         (prot. mode, more priv.) -       -     \cf1 99\plain\f2\b\fs20     \cf1 73\plain\f2\b\fs20       \cf1 1
\par \plain\f2\b\fs20         (from VM\cf1 86\plain\f2\b\fs20  to PL \cf1 0\plain\f2\b\fs20 )      -       -    \cf1 119\plain\f2\b\fs20     \cf1 84\plain\f2\b\fs20       \cf1 1
\par \plain\f2\b\fs20         (prot. mode, via task gate)     -     TS  \cf1 39\plain\f2\b\fs20 +TS      \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 CE\plain\f2\b\fs20  INTO Interrupt \cf1 4\plain\f2\b\fs20  if overflow flag is \cf1 1
\par \pard \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0033}
{\up $}{\footnote\pard\plain{\up $} INVD}
{\up #}{\footnote\pard\plain{\up #} INVD}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} INVD}

\par 
\par \pard 
\par \f2\b\cf1 INVD \cf2 - Invalidate Cache  (486+)
\par \plain\f2\b\fs20         Usage:  INVD
\par         Modifies flags: none
\par         Flushes CPU internal cache.  Issues special function bus cycle
\par         which indicates to flush external caches.   Data in write-back
\par         external caches is lost.
\par         
\par                                   Clocks                Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x   \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20          Bytes
\par         none              -      -     -     \cf1 4\plain\f2\b\fs20             \cf1 2
\par \pard \plain\fs20 
\par \f2\b         \cf3 0F 08\plain\f2\b\fs20  INVD Flush internal caches; initiate flushing of external caches.
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0034}
{\up $}{\footnote\pard\plain{\up $} INVLPG}
{\up #}{\footnote\pard\plain{\up #} INVLPG}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} INVLPG}

\par 
\par \pard 
\par \f2\b\cf1 INVLPG \cf2 - Invalidate Translation Look-Aside Buffer Entry (486+)
\par \plain\f2\b\fs20         Usage:  INVLPG
\par         Modifies flags: none
\par         Invalidates a single page table entry in the Translation
\par         Look-Aside Buffer.  Intel warns that this instruction may be
\par         implemented differently on future processors.
\par         
\par                                   Clocks                Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x   \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20          Bytes
\par \pard         none              -      -     -     \cf1 12\plain\f2\b\fs20            \cf1 2
\par \plain\f2\b\fs20     - timing is for TLB entry hit only.
\par \plain\fs20 
\par \f2\b         \cf3 0F\plain\f2\b\fs20  \cf1 01\plain\f2\b\fs20 /\cf1 7\plain\f2\b\fs20  INVLPG
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0035}
{\up $}{\footnote\pard\plain{\up $} IRETIRETD}
{\up #}{\footnote\pard\plain{\up #} IRETIRETD}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} IRET/IRETD}
\plain\fs20 
\par 
\par \pard \f1\fs24 /IRETD
\par \f2\b\fs20\cf1 IRET\cf2 /IRETD - Interrupt Return
\par \plain\f2\b\fs20         Usage:  IRET
\par                 IRETD  (\cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: AF CF DF IF PF SF TF ZF
\par         Returns control to point of interruption by popping IP, CS
\par         and then the Flags from the stack and continues execution at
\par         this location.  CPU exception interrupts will return to the
\par         instruction that cause the exception because the CS:IP placed
\par         on the stack during the interrupt is the address of the offending
\par \pard         instruction.
\par                                          Clocks                 Size
\par             Operands            \cf1 808\plain\f2\b\fs20 x   \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par     iret                       \cf1 32\plain\f2\b\fs20 /\cf1 44\plain\f2\b\fs20   \cf1 17\plain\f2\b\fs20 +m    \cf1 22\plain\f2\b\fs20     \cf1 15\plain\f2\b\fs20             \cf1 1
\par \plain\f2\b\fs20     iret  (prot. mode)           -    \cf1 31\plain\f2\b\fs20 +m    \cf1 38\plain\f2\b\fs20     \cf1 15\plain\f2\b\fs20             \cf1 1
\par \plain\f2\b\fs20     iret  (to less privilege)    -    \cf1 55\plain\f2\b\fs20 +m    \cf1 82\plain\f2\b\fs20     \cf1 36\plain\f2\b\fs20             \cf1 1
\par \pard \plain\f2\b\fs20     iret  (different task, NT=\cf1 1\plain\f2\b\fs20 ) -   \cf1 169\plain\f2\b\fs20 +m    TS  TS+\cf1 32\plain\f2\b\fs20            \cf1 1
\par \plain\f2\b\fs20     iretd                        -      -   \cf1 22\plain\f2\b\fs20 /\cf1 38\plain\f2\b\fs20    \cf1 15\plain\f2\b\fs20             \cf1 1
\par \plain\f2\b\fs20     iretd (to less privilege)    -      -     \cf1 82\plain\f2\b\fs20     \cf1 36\plain\f2\b\fs20             \cf1 1
\par \plain\f2\b\fs20     iretd (to VM\cf1 86\plain\f2\b\fs20  mode)         -      -     \cf1 60\plain\f2\b\fs20     \cf1 15\plain\f2\b\fs20             \cf1 1
\par \plain\f2\b\fs20     iretd (different task, NT=\cf1 1\plain\f2\b\fs20 ) -      -     TS  TS+\cf1 32\plain\f2\b\fs20            \cf1 1
\par \pard \plain\f2\b\fs20     - \cf1 386\plain\f2\b\fs20  timings are listed as real-mode/protected-mode
\par \plain\fs20 
\par \f2\b     \cf3 CF\plain\f2\b\fs20  IRET Interrupt return (\cf1 16\plain\f2\b\fs20 -bit operand size)
\par     \cf3 CF\plain\f2\b\fs20  IRETD Interrupt return (\cf1 32\plain\f2\b\fs20 -bit operand size)
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0036}
{\up $}{\footnote\pard\plain{\up $} Jxx}
{\up #}{\footnote\pard\plain{\up #} Jxx}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} Jxx}

\par 
\par \pard 
\par \f2\b\cf1 Jxx \cf2 - Jump Instructions Table
\par \plain\f2\b\fs20         Mnemonic              Meaning                    Jump Condition
\par           JA     Jump if Above                         CF=\cf1 0\plain\f2\b\fs20  and ZF=\cf1 0
\par \plain\f2\b\fs20           JAE    Jump if Above or Equal                CF=\cf1 0
\par \plain\f2\b\fs20           JB     Jump if Below                         CF=\cf1 1
\par \plain\f2\b\fs20           JBE    Jump if Below or Equal                CF=\cf1 1\plain\f2\b\fs20  or ZF=\cf1 1
\par \plain\f2\b\fs20           JC     Jump if Carry                         CF=\cf1 1
\par \pard \plain\f2\b\fs20           JCXZ   Jump if CX Zero                       CX=\cf1 0
\par \plain\f2\b\fs20           JE     Jump if Equal                         ZF=\cf1 1
\par \plain\f2\b\fs20           JG     Jump if Greater (signed)              ZF=\cf1 0\plain\f2\b\fs20  and SF=OF
\par           JGE    Jump if Greater or Equal (signed)     SF=OF
\par           JL     Jump if Less (signed)                 SF != OF
\par           JLE    Jump if Less or Equal (signed)        ZF=\cf1 1\plain\f2\b\fs20  or SF != OF
\par           JMP    Unconditional Jump                    unconditional
\par \pard           JNA    Jump if Not Above                     CF=\cf1 1\plain\f2\b\fs20  or ZF=\cf1 1
\par \plain\f2\b\fs20           JNAE   Jump if Not Above or Equal            CF=\cf1 1
\par \plain\f2\b\fs20           JNB    Jump if Not Below                     CF=\cf1 0
\par \plain\f2\b\fs20           JNBE   Jump if Not Below or Equal            CF=\cf1 0\plain\f2\b\fs20  and ZF=\cf1 0
\par \plain\f2\b\fs20           JNC    Jump if Not Carry                     CF=\cf1 0
\par \plain\f2\b\fs20           JNE    Jump if Not Equal                     ZF=\cf1 0
\par \plain\f2\b\fs20           JNG    Jump if Not Greater (signed)          ZF=\cf1 1\plain\f2\b\fs20  or SF != OF
\par \pard           JNGE   Jump if Not Greater or Equal (signed) SF != OF
\par           JNL    Jump if Not Less (signed)             SF=OF
\par           JNLE   Jump if Not Less or Equal (signed)    ZF=\cf1 0\plain\f2\b\fs20  and SF=OF
\par           JNO    Jump if Not Overflow (signed)         OF=\cf1 0
\par \plain\f2\b\fs20           JNP    Jump if No Parity                     PF=\cf1 0
\par \plain\f2\b\fs20           JNS    Jump if Not Signed (signed)           SF=\cf1 0
\par \plain\f2\b\fs20           JNZ    Jump if Not Zero                      ZF=\cf1 0
\par \pard \plain\f2\b\fs20           JO     Jump if Overflow (signed)             OF=\cf1 1
\par \plain\f2\b\fs20           JP     Jump if Parity                        PF=\cf1 1
\par \plain\f2\b\fs20           JPE    Jump if Parity Even                   PF=\cf1 1
\par \plain\f2\b\fs20           JPO    Jump if Parity Odd                    PF=\cf1 0
\par \plain\f2\b\fs20           JS     Jump if Signed (signed)               SF=\cf1 1
\par \plain\f2\b\fs20           JZ     Jump if Zero                          ZF=\cf1 1
\par \plain\f2\b\fs20                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         Jx: jump          \cf1 16\plain\f2\b\fs20    \cf1 7\plain\f2\b\fs20 +m   \cf1 7\plain\f2\b\fs20 +m    \cf1 3\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20             no jump        \cf1 4\plain\f2\b\fs20     \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 1
\par \plain\f2\b\fs20         Jx  near-label     -    -    \cf1 7\plain\f2\b\fs20 +m    \cf1 3\plain\f2\b\fs20              \cf1 4
\par \plain\f2\b\fs20             no jump        -    -     \cf1 3\plain\f2\b\fs20      \cf1 1
\par \plain\f2\b\fs20         - It's a good programming practice to organize code so the
\par           expected case is executed without a jump since the actual
\par           jump takes longer to execute than falling through the test.
\par \pard         - see    JCXZ  and  JMP    for their respective timings
\par \plain\fs20 
\par \f2\b         \cf3 77\plain\f2\b\fs20  cb JA rel\cf1 8\plain\f2\b\fs20  Jump short if above (CF=\cf1 0\plain\f2\b\fs20  and ZF=\cf1 0\plain\f2\b\fs20 )
\par        \cf3  73\plain\f2\b\fs20  cb JAE rel\cf1 8\plain\f2\b\fs20  Jump short if above or equal (CF=\cf1 0\plain\f2\b\fs20 )
\par         \cf3 72\plain\f2\b\fs20  cb JB rel\cf1 8\plain\f2\b\fs20  Jump short if below (CF=\cf1 1\plain\f2\b\fs20 )
\par         \cf3 76\plain\f2\b\fs20  cb JBE rel\cf1 8\plain\f2\b\fs20  Jump short if below or equal (CF=\cf1 1\plain\f2\b\fs20  or ZF=\cf1 1\plain\f2\b\fs20 )
\par         \cf3 72\plain\f2\b\fs20  cb JC rel\cf1 8\plain\f2\b\fs20  Jump short if carry (CF=\cf1 1\plain\f2\b\fs20 )
\par \pard         \cf3 E3\plain\f2\b\fs20  cb JCXZ rel\cf1 8\plain\f2\b\fs20  Jump short if CX register is \cf1 0
\par \plain\f2\b\fs20        \cf3  E3\plain\f2\b\fs20  cb JECXZ rel\cf1 8\plain\f2\b\fs20  Jump short if ECX register is \cf1 0
\par \plain\f2\b\fs20       \cf3   74\plain\f2\b\fs20  cb JE rel\cf1 8\plain\f2\b\fs20  Jump short if equal (ZF=\cf1 1\plain\f2\b\fs20 )
\par       \cf3   7F\plain\f2\b\fs20  cb JG rel\cf1 8\plain\f2\b\fs20  Jump short if greater (ZF=\cf1 0\plain\f2\b\fs20  and SF=OF)
\par        \cf3  7D \plain\f2\b\fs20 cb JGE rel\cf1 8\plain\f2\b\fs20  Jump short if greater or equal (SF=OF)
\par         \cf3 7C\plain\f2\b\fs20  cb JL rel\cf1 8\plain\f2\b\fs20  Jump short if less (SF<>OF)
\par         \cf3 7E\plain\f2\b\fs20  cb JLE rel\cf1 8\plain\f2\b\fs20  Jump short if less or equal (ZF=\cf1 1\plain\f2\b\fs20  or SF<>OF)
\par \pard         \cf3 76\plain\f2\b\fs20  cb JNA rel\cf1 8\plain\f2\b\fs20  Jump short if not above (CF=\cf1 1\plain\f2\b\fs20  or ZF=\cf1 1\plain\f2\b\fs20 )
\par        \cf3  72\plain\f2\b\fs20  cb JNAE rel\cf1 8\plain\f2\b\fs20  Jump short if not above or equal (CF=\cf1 1\plain\f2\b\fs20 )
\par         \cf3 73\plain\f2\b\fs20  cb JNB rel\cf1 8\plain\f2\b\fs20  Jump short if not below (CF=\cf1 0\plain\f2\b\fs20 )
\par         \cf3 77\plain\f2\b\fs20  cb JNBE rel\cf1 8\plain\f2\b\fs20  Jump short if not below or equal (CF=\cf1 0\plain\f2\b\fs20  and ZF=\cf1 0\plain\f2\b\fs20 )
\par        \cf3  73\plain\f2\b\fs20  cb JNC rel\cf1 8\plain\f2\b\fs20  Jump short if not carry (CF=\cf1 0\plain\f2\b\fs20 )
\par         \cf3 75\plain\f2\b\fs20  cb JNE rel\cf1 8\plain\f2\b\fs20  Jump short if not equal (ZF=\cf1 0\plain\f2\b\fs20 )
\par \pard         \cf3 7E\plain\f2\b\fs20  cb JNG rel\cf1 8\plain\f2\b\fs20  Jump short if not greater (ZF=\cf1 1\plain\f2\b\fs20  or SF<>OF)
\par         \cf3 7C\plain\f2\b\fs20  cb JNGE rel\cf1 8\plain\f2\b\fs20  Jump short if not greater or equal (SF<>OF)
\par         \cf3 7D\plain\f2\b\fs20  cb JNL rel\cf1 8\plain\f2\b\fs20  Jump short if not less (SF=OF)
\par         \cf3 7F\plain\f2\b\fs20  cb JNLE rel\cf1 8\plain\f2\b\fs20  Jump short if not less or equal (ZF=\cf1 0\plain\f2\b\fs20  and SF=OF)
\par         \cf3 71\plain\f2\b\fs20  cb JNO rel\cf1 8\plain\f2\b\fs20  Jump short if not overflow (OF=\cf1 0\plain\f2\b\fs20 )
\par         \cf3 7B\plain\f2\b\fs20  cb JNP rel\cf1 8\plain\f2\b\fs20  Jump short if not parity (PF=\cf1 0\plain\f2\b\fs20 )
\par \pard         \cf3 79\plain\f2\b\fs20  cb JNS rel\cf1 8\plain\f2\b\fs20  Jump short if not sign (SF=\cf1 0\plain\f2\b\fs20 )
\par         \cf3 75\plain\f2\b\fs20  cb JNZ rel\cf1 8\plain\f2\b\fs20  Jump short if not zero (ZF=\cf1 0\plain\f2\b\fs20 )
\par         \cf3 70\plain\f2\b\fs20  cb JO rel\cf1 8\plain\f2\b\fs20  Jump short if overflow (OF=\cf1 1\plain\f2\b\fs20 )
\par         \cf3 7A\plain\f2\b\fs20  cb JP rel\cf1 8\plain\f2\b\fs20  Jump short if parity (PF=\cf1 1\plain\f2\b\fs20 )
\par         \cf3 7A\plain\f2\b\fs20  cb JPE rel\cf1 8\plain\f2\b\fs20  Jump short if parity even (PF=\cf1 1\plain\f2\b\fs20 )
\par         \cf3 7B\plain\f2\b\fs20  cb JPO rel\cf1 8\plain\f2\b\fs20  Jump short if parity odd (PF=\cf1 0\plain\f2\b\fs20 )
\par         \cf3 78\plain\f2\b\fs20  cb JS rel\cf1 8\plain\f2\b\fs20  Jump short if sign (SF=\cf1 1\plain\f2\b\fs20 )
\par \pard         \cf3 74\plain\f2\b\fs20  cb JZ rel\cf1 8\plain\f2\b\fs20  Jump short if zero (ZF = \cf1 1\plain\f2\b\fs20 )
\par         \cf3 0F 87\plain\f2\b\fs20  cw/cd JA rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if above (CF=\cf1 0\plain\f2\b\fs20  and ZF=\cf1 0\plain\f2\b\fs20 )
\par         \cf3 0F 83\plain\f2\b\fs20  cw/cd JAE rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if above or equal (CF=\cf1 0\plain\f2\b\fs20 )
\par         \cf3 0F 82\plain\f2\b\fs20  cw/cd JB rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if below (CF=\cf1 1\plain\f2\b\fs20 )
\par         \cf3 0F 86\plain\f2\b\fs20  cw/cd JBE rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if below or equal (CF=\cf1 1\plain\f2\b\fs20  or ZF=\cf1 1\plain\f2\b\fs20 )
\par \pard         \cf3 0F 82\plain\f2\b\fs20  cw/cd JC rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if carry (CF=\cf1 1\plain\f2\b\fs20 )
\par        \cf3  0F 84\plain\f2\b\fs20  cw/cd JE rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if equal (ZF=\cf1 1\plain\f2\b\fs20 )
\par         \cf3 0F 84\plain\f2\b\fs20  cw/cd JZ rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if \cf1 0\plain\f2\b\fs20  (ZF=\cf1 1\plain\f2\b\fs20 )
\par         \cf3 0F 8F\plain\f2\b\fs20  cw/cd JG rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if greater (ZF=\cf1 0\plain\f2\b\fs20  and SF=OF)
\par         \cf3 0F 8D\plain\f2\b\fs20  cw/cd JGE rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if greater or equal (SF=OF)
\par         \cf3 0F 8C\plain\f2\b\fs20  cw/cd JL rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if less (SF<>OF)
\par \pard         \cf3 0F 8E\plain\f2\b\fs20  cw/cd JLE rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if less or equal (ZF=\cf1 1\plain\f2\b\fs20  or SF<>OF)
\par         \cf3 0F 86\plain\f2\b\fs20  cw/cd JNA rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if not above (CF=\cf1 1\plain\f2\b\fs20  or ZF=\cf1 1\plain\f2\b\fs20 )
\par         \cf3 0F 82\plain\f2\b\fs20  cw/cd JNAE rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if not above or equal (CF=\cf1 1\plain\f2\b\fs20 )
\par         \cf3 0F 83\plain\f2\b\fs20  cw/cd JNB rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if not below (CF=\cf1 0\plain\f2\b\fs20 )
\par         \cf3 0F 87\plain\f2\b\fs20  cw/cd JNBE rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if not below or equal (CF=\cf1 0\plain\f2\b\fs20  and ZF=\cf1 0\plain\f2\b\fs20 )
\par \pard         \cf3 0F 83\plain\f2\b\fs20  cw/cd JNC rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if not carry (CF=\cf1 0\plain\f2\b\fs20 )
\par         \cf3 0F 85\plain\f2\b\fs20  cw/cd JNE rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if not equal (ZF=\cf1 0\plain\f2\b\fs20 )
\par         \cf3 0F 8E\plain\f2\b\fs20  cw/cd JNG rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if not greater (ZF=\cf1 1\plain\f2\b\fs20  or SF<>OF)
\par         \cf3 0F 8C\plain\f2\b\fs20  cw/cd JNGE rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if not greater or equal (SF<>OF)
\par         \cf3 0F 8D\plain\f2\b\fs20  cw/cd JNL rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if not less (SF=OF)
\par \pard         \cf3 0F 8F\plain\f2\b\fs20  cw/cd JNLE rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if not less or equal (ZF=\cf1 0\plain\f2\b\fs20  and SF=OF)
\par         \cf3 0F 81\plain\f2\b\fs20  cw/cd JNO rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if not overflow (OF=\cf1 0\plain\f2\b\fs20 )
\par         \cf3 0F 8B\plain\f2\b\fs20  cw/cd JNP rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if not parity (PF=\cf1 0\plain\f2\b\fs20 )
\par         \cf3 0F 89\plain\f2\b\fs20  cw/cd JNS rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if not sign (SF=\cf1 0\plain\f2\b\fs20 )
\par         \cf3 0F 85\plain\f2\b\fs20  cw/cd JNZ rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if not zero (ZF=\cf1 0\plain\f2\b\fs20 )
\par \pard         \cf3 0F 80\plain\f2\b\fs20  cw/cd JO rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if overflow (OF=\cf1 1\plain\f2\b\fs20 )
\par         \cf3 0F 8A\plain\f2\b\fs20  cw/cd JP rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if parity (PF=\cf1 1\plain\f2\b\fs20 )
\par         \cf3 0F 8A\plain\f2\b\fs20  cw/cd JPE rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if parity even (PF=\cf1 1\plain\f2\b\fs20 )
\par         \cf3 0F 8B\plain\f2\b\fs20  cw/cd JPO rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if parity odd (PF=\cf1 0\plain\f2\b\fs20 )
\par         \cf3 0F 88\plain\f2\b\fs20  cw/cd JS rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if sign (SF=\cf1 1\plain\f2\b\fs20 )
\par         \cf3 0F 84\plain\f2\b\fs20  cw/cd JZ rel\cf1 16\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20  Jump near if \cf1 0\plain\f2\b\fs20  (ZF=\cf1 1\plain\f2\b\fs20 )
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0037}
{\up $}{\footnote\pard\plain{\up $} JCXZJECXZ}
{\up #}{\footnote\pard\plain{\up #} JCXZJECXZ}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} JCXZ/JECXZ}
\plain\fs20 
\par 
\par \pard \f1\fs24 /JECXZ
\par \f2\b\fs20\cf1 JCXZ/JECXZ\cf2  - Jump if Register (E)CX is Zero
\par \plain\f2\b\fs20         Usage:  JCXZ    label
\par                 JECXZ   label  (\cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: None
\par         Causes execution to branch to "label" if register CX is zero.  Uses
\par         unsigned comparision.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         label:  jump      \cf1 18\plain\f2\b\fs20    \cf1 8\plain\f2\b\fs20 +m   \cf1 9\plain\f2\b\fs20 +m    \cf1 8\plain\f2\b\fs20              \cf1 2
\par \pard \plain\f2\b\fs20                 no jump    \cf1 6\plain\f2\b\fs20     \cf1 4\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20      \cf1 5
\par \plain\fs20 
\par \f2\b         \cf3 E3\plain\f2\b\fs20  cb JCXZ rel\cf1 8\plain\f2\b\fs20  Jump short if CX register is \cf1 0
\par \plain\f2\b\fs20        \cf3  E3\plain\f2\b\fs20  cb JECXZ rel\cf1 8\plain\f2\b\fs20  Jump short if ECX register is \cf1 0
\par \plain\fs20 
\par 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0038}
{\up $}{\footnote\pard\plain{\up $} JMP}
{\up #}{\footnote\pard\plain{\up #} JMP}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} JMP}

\par 
\par \pard \f2\b\cf1 JMP \cf2 - Unconditional Jump
\par \plain\f2\b\fs20         Usage:  JMP     target
\par         Modifies flags: None
\par         Unconditionally transfers control to "label".  Jumps by default
\par         are within -\cf1 32768\plain\f2\b\fs20  to \cf1 32767\plain\f2\b\fs20  bytes from the instruction following
\par         the jump.  NEAR and SHORT jumps cause the IP to be updated while FAR
\par         jumps cause CS and IP to be updated.
\par                                                         Clocks
\par                    Operands                     \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20     \cf1 386\plain\f2\b\fs20    \cf1 486
\par \pard \plain\f2\b\fs20         rel\cf1 8\plain\f2\b\fs20   (relative)                        \cf1 15\plain\f2\b\fs20     \cf1 7\plain\f2\b\fs20 +m    \cf1 7\plain\f2\b\fs20 +m    \cf1 3
\par \plain\f2\b\fs20         rel\cf1 16\plain\f2\b\fs20  (relative)                        \cf1 15\plain\f2\b\fs20     \cf1 7\plain\f2\b\fs20 +m    \cf1 7\plain\f2\b\fs20 +m    \cf1 3
\par \plain\f2\b\fs20         rel\cf1 32\plain\f2\b\fs20  (relative)                         -     -     \cf1 7\plain\f2\b\fs20 +m    \cf1 3
\par \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20  (near, register indirect)         \cf1 11\plain\f2\b\fs20     \cf1 7\plain\f2\b\fs20 +m    \cf1 7\plain\f2\b\fs20 +m    \cf1 5
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20  (near, register indirect)          -     -     \cf1 7\plain\f2\b\fs20 +m    \cf1 5
\par \pard \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20  (near, mem indirect)             \cf1 18\plain\f2\b\fs20 +EA  \cf1 11\plain\f2\b\fs20 +m  \cf1 10\plain\f2\b\fs20 +m    \cf1 5
\par \plain\f2\b\fs20         mem\cf1 32\plain\f2\b\fs20  (near, mem indirect)             \cf1 24\plain\f2\b\fs20 +EA  \cf1 15\plain\f2\b\fs20 +m  \cf1 10\plain\f2\b\fs20 +m    \cf1 5
\par \plain\f2\b\fs20         ptr\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (far, dword immed)              -     -    \cf1 12\plain\f2\b\fs20 +m    \cf1 17
\par \plain\f2\b\fs20         ptr\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (far, PM dword immed)           -     -    \cf1 27\plain\f2\b\fs20 +m    \cf1 19
\par \plain\f2\b\fs20         ptr\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (call gate, same priv.)         -    \cf1 38\plain\f2\b\fs20 +m  \cf1 45\plain\f2\b\fs20 +m    \cf1 32
\par \pard \plain\f2\b\fs20         ptr\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (via TSS)                       -   \cf1 175\plain\f2\b\fs20 +m   TS   \cf1 42\plain\f2\b\fs20 +TS
\par         ptr\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (via task gate)                 -   \cf1 180\plain\f2\b\fs20 +m   TS   \cf1 43\plain\f2\b\fs20 +TS
\par         mem\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (far, indirect)                 -     -    \cf1 43\plain\f2\b\fs20 +m    \cf1 13
\par \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (far, PM indirect)              -     -    \cf1 31\plain\f2\b\fs20 +m    \cf1 18
\par \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (call gate, same priv.)         -    \cf1 41\plain\f2\b\fs20 +m  \cf1 49\plain\f2\b\fs20 +m    \cf1 31
\par \pard \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (via TSS)                       -   \cf1 178\plain\f2\b\fs20 +m  \cf1 5\plain\f2\b\fs20 +TS  \cf1 41\plain\f2\b\fs20 +TS
\par         mem\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  (via task gate)                 -   \cf1 183\plain\f2\b\fs20 +m  \cf1 5\plain\f2\b\fs20 +TS  \cf1 42\plain\f2\b\fs20 +TS
\par         ptr\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (far, \cf1 6\plain\f2\b\fs20  byte immed)             -     -    \cf1 12\plain\f2\b\fs20 +m    \cf1 13
\par \plain\f2\b\fs20         ptr\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (far, PM \cf1 6\plain\f2\b\fs20  byte immed)          -     -    \cf1 27\plain\f2\b\fs20 +m    \cf1 18
\par \plain\f2\b\fs20         ptr\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (call gate, same priv.)         -     -    \cf1 45\plain\f2\b\fs20 +m    \cf1 31
\par \pard \plain\f2\b\fs20         ptr\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (via TSS)                       -     -     TS   \cf1 42\plain\f2\b\fs20 +TS
\par         ptr\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (via task state)                -     -     TS   \cf1 43\plain\f2\b\fs20 +TS
\par         m\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (far, address at dword)           -     -    \cf1 43\plain\f2\b\fs20 +m    \cf1 13
\par \plain\f2\b\fs20         m\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (far, address at dword)           -     -    \cf1 31\plain\f2\b\fs20 +m    \cf1 18
\par \plain\f2\b\fs20         m\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (call gate, same priv.)           -     -    \cf1 49\plain\f2\b\fs20 +m    \cf1 31
\par \pard \plain\f2\b\fs20         m\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (via TSS)                         -     -    \cf1 5\plain\f2\b\fs20 +TS  \cf1 41\plain\f2\b\fs20 +TS
\par         m\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  (via task state)                  -     -    \cf1 5\plain\f2\b\fs20 +TS  \cf1 42\plain\f2\b\fs20 +TS
\par \plain\fs20 
\par \f2\b         \cf3 EB\plain\f2\b\fs20  cb JMP rel\cf1 8\plain\f2\b\fs20  Jump short, relative, displacement relative to next instruction
\par         \cf3 E9\plain\f2\b\fs20  cw JMP rel\cf1 16\plain\f2\b\fs20  Jump near, relative, displacement relative to next instruction
\par         \cf3 E9\plain\f2\b\fs20  cd JMP rel\cf1 32\plain\f2\b\fs20  Jump near, relative, displacement relative to next instruction
\par \pard         \cf3 FF\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  JMP r/m\cf1 16\plain\f2\b\fs20  Jump near, absolute indirect, address given in r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 FF\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  JMP r/m\cf1 32\plain\f2\b\fs20  Jump near, absolute indirect, address given in r/m\cf1 32
\par \plain\f2\b\fs20         \cf3 EA\plain\f2\b\fs20  cd JMP ptr\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  Jump far, absolute, address given in operand
\par         \cf3 EA\plain\f2\b\fs20  cp JMP ptr\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  Jump far, absolute, address given in operand
\par         \cf3 FF\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  JMP m\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  Jump far, absolute indirect, address given in m\cf1 16\plain\f2\b\fs20 :\cf1 16
\par \pard \plain\f2\b\fs20         \cf3 FF\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  JMP m\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  Jump far, absolute indirect, address given in m\cf1 16\plain\f2\b\fs20 :\cf1 32
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0039}
{\up $}{\footnote\pard\plain{\up $} LAHF}
{\up #}{\footnote\pard\plain{\up #} LAHF}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} LAHF}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 LAHF \cf2 - Load Register AH From Flags
\par \plain\f2\b\fs20         Usage:  LAHF
\par         Modifies flags: None
\par         Copies bits \cf1 0\plain\f2\b\fs20 -\cf1 7\plain\f2\b\fs20  of the flags register into AH.  This includes flags
\par         AF, CF, PF, SF and ZF other bits are undefined.
\par         AH := SF ZF xx AF xx PF xx CF
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              \cf1 4\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 1
\par \pard \plain\fs20 
\par \f2\b         \cf3 9F\plain\f2\b\fs20  LAHF Load: AH = EFLAGS(SF:ZF:\cf1 0\plain\f2\b\fs20 :AF:\cf1 0\plain\f2\b\fs20 :PF:\cf1 1\plain\f2\b\fs20 :CF)
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:003a}
{\up $}{\footnote\pard\plain{\up $} LAR}
\pard\keepn {\up #}{\footnote\pard\plain{\up #} LAR}
{\up K}{\footnote\pard\plain{\up K} LAR}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 LAR \cf2 - Load Access Rights (286+ protected)
\par \plain\f2\b\fs20         Usage:  LAR     dest,src
\par         Modifies flags: ZF
\par         The high byte of the of the destination register is overwritten by
\par         the value of the access rights byte and the low order byte is zeroed
\par         depending on the selection in the source operand.  The Zero Flag is
\par         set if the load operation is successful.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         reg\cf1 16\plain\f2\b\fs20 ,reg\cf1 16\plain\f2\b\fs20        -     \cf1 14\plain\f2\b\fs20     \cf1 15\plain\f2\b\fs20     \cf1 11\plain\f2\b\fs20             \cf1 3
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,reg\cf1 32\plain\f2\b\fs20        -     -     \cf1 15\plain\f2\b\fs20     \cf1 11\plain\f2\b\fs20             \cf1 3
\par \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20 ,mem\cf1 16\plain\f2\b\fs20        -     \cf1 16\plain\f2\b\fs20     \cf1 16\plain\f2\b\fs20     \cf1 11\plain\f2\b\fs20            \cf1 3\plain\f2\b\fs20 -\cf1 7
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,mem\cf1 32\plain\f2\b\fs20        -     -     \cf1 16\plain\f2\b\fs20     \cf1 11\plain\f2\b\fs20            \cf1 3\plain\f2\b\fs20 -\cf1 7
\par \plain\fs20 
\par \f2\b         \cf3 0F 02\plain\f2\b\fs20  / r LAR r\cf1 16\plain\f2\b\fs20 ,r/m\cf1 16\plain\f2\b\fs20  r\cf1 16\plain\f2\b\fs20  \'ac r/m\cf1 16\plain\f2\b\fs20  masked by FF\cf1 00\plain\f2\b\fs20 H
\par \pard         \cf3 0F 02\plain\f2\b\fs20  / r LAR r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 32\plain\f2\b\fs20  r\cf1 32\plain\f2\b\fs20  \'ac r/m\cf1 32\plain\f2\b\fs20  masked by \cf1 00\plain\f2\b\fs20 FxFF\cf1 00\plain\f2\b\fs20 H
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:003b}
{\up $}{\footnote\pard\plain{\up $} LDS}
{\up #}{\footnote\pard\plain{\up #} LDS}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} LDS}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 LDS \cf2 - Load Pointer Using DS
\par \plain\f2\b\fs20         Usage:  LDS     dest,src
\par         Modifies flags: None
\par         Loads \cf1 32\plain\f2\b\fs20 -bit pointer from memory source to destination register
\par         and DS.  The offset is placed in the destination register and the
\par         segment is placed in DS.  To use this instruction the word at the
\par         lower memory address must contain the offset and the word at the
\par         higher address must contain the segment.  This simplifies the loading
\par \pard         of far pointers from the stack and the interrupt vector table.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 16\plain\f2\b\fs20 ,mem\cf1 32\plain\f2\b\fs20      \cf1 16\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4
\par \plain\f2\b\fs20         reg,mem (PM)      -     -     \cf1 22\plain\f2\b\fs20     \cf1 12\plain\f2\b\fs20            \cf1 5\plain\f2\b\fs20 -\cf1 7
\par \plain\fs20 
\par \f2\b         \cf3 C5\plain\f2\b\fs20  / r LDS r\cf1 16\plain\f2\b\fs20 ,m\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  Load DS: r\cf1 16\plain\f2\b\fs20  with far pointer from memory
\par \pard         \cf3 C5\plain\f2\b\fs20  / r LDS r\cf1 32\plain\f2\b\fs20 ,m\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  Load DS: r\cf1 32\plain\f2\b\fs20  with far pointer from memory
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:003c}
{\up $}{\footnote\pard\plain{\up $} LEA}
{\up #}{\footnote\pard\plain{\up #} LEA}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} LEA}

\par 
\par \pard 
\par \f2\b\cf1 LEA \cf2 - Load Effective Address
\par \plain\f2\b\fs20         Usage:  LEA     dest,src
\par         Modifies flags: None
\par         Transfers offset address of "src" to the destination register.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,mem          \cf1 2\plain\f2\b\fs20 +EA   \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4
\par \plain\f2\b\fs20         - the MOV instruction can often save clock cycles when used in
\par \pard         place of LEA on \cf1 8088\plain\f2\b\fs20  processors
\par \plain\fs20 
\par \f2\b         \cf3 8D\plain\f2\b\fs20  / r LEA r\cf1 16\plain\f2\b\fs20 ,m Store effective address for m in register r\cf1 16
\par \plain\f2\b\fs20         \cf3 8D\plain\f2\b\fs20  / r LEA r\cf1 32\plain\f2\b\fs20 ,m Store effective address for m in register r\cf1 32
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:003d}
{\up $}{\footnote\pard\plain{\up $} LEAVE}
{\up #}{\footnote\pard\plain{\up #} LEAVE}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} LEAVE}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 LEAVE \cf2 - Restore Stack for Procedure Exit (80188+)
\par \plain\f2\b\fs20         Usage:  LEAVE
\par         Modifies flags: None
\par         Releases the local variables created by the previous ENTER
\par         instruction by restoring SP and BP to their condition before
\par         the procedure stack frame was initialized.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20              \cf1 1
\par \pard \plain\fs20 
\par \f2\b         \cf3 C9\plain\f2\b\fs20  LEAVE Set SP to BP, then pop BP
\par         \cf3 C9\plain\f2\b\fs20  LEAVE Set ESP to EBP, then pop EBP
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:003e}
{\up $}{\footnote\pard\plain{\up $} LES}
{\up #}{\footnote\pard\plain{\up #} LES}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} LES}

\par 
\par \pard 
\par \f2\b\cf1 LES \cf2 - Load Pointer Using ES
\par \plain\f2\b\fs20         Usage:  LES     dest,src
\par         Modifies flags: None
\par         Loads \cf1 32\plain\f2\b\fs20 -bit pointer from memory source to destination register
\par         and ES.  The offset is placed in the destination register and the
\par         segment is placed in ES.  To use this instruction the word at the
\par         lower memory address must contain the offset and the word at the
\par         higher address must contain the segment.  This simplifies the loading
\par \pard         of far pointers from the stack and the interrupt vector table.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,mem         \cf1 16\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 24\plain\f2\b\fs20 +EA)
\par         reg,mem (PM)      -     -     \cf1 22\plain\f2\b\fs20     \cf1 12\plain\f2\b\fs20            \cf1 5\plain\f2\b\fs20 -\cf1 7
\par \plain\fs20 
\par \f2\b         \cf3 C4\plain\f2\b\fs20  / r LES r\cf1 16\plain\f2\b\fs20 ,m\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  Load ES: r\cf1 16\plain\f2\b\fs20  with far pointer from memory
\par \pard         \cf3 C4\plain\f2\b\fs20  / r LES r\cf1 32\plain\f2\b\fs20 ,m\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  Load ES: r\cf1 32\plain\f2\b\fs20  with far pointer from memory
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:003f}
{\up $}{\footnote\pard\plain{\up $} LFS}
{\up #}{\footnote\pard\plain{\up #} LFS}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} LFS}

\par 
\par \pard 
\par \f2\b\cf1 LFS \cf2 - Load Pointer Using FS (386+)
\par \plain\f2\b\fs20         Usage:  LFS     dest,src
\par         Modifies flags: None
\par         Loads \cf1 32\plain\f2\b\fs20 -bit pointer from memory source to destination register
\par         and FS.  The offset is placed in the destination register and the
\par         segment is placed in FS.  To use this instruction the word at the
\par         lower memory address must contain the offset and the word at the
\par         higher address must contain the segment.  This simplifies the loading
\par \pard         of far pointers from the stack and the interrupt vector table.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,mem           -     -     \cf1 7\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20             \cf1 5\plain\f2\b\fs20 -\cf1 7
\par \plain\f2\b\fs20         reg,mem (PM)      -     -     \cf1 22\plain\f2\b\fs20     \cf1 12\plain\f2\b\fs20            \cf1 5\plain\f2\b\fs20 -\cf1 7
\par \plain\fs20 
\par \f2\b         \cf3 0F B4\plain\f2\b\fs20  / r LFS r\cf1 16\plain\f2\b\fs20 ,m\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  Load FS: r\cf1 16\plain\f2\b\fs20  with far pointer from memory
\par \pard         \cf3 0F B4\plain\f2\b\fs20  / r LFS r\cf1 32\plain\f2\b\fs20 ,m\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  Load FS: r\cf1 32\plain\f2\b\fs20  with far pointer from memory
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0040}
{\up $}{\footnote\pard\plain{\up $} LGDT}
{\up #}{\footnote\pard\plain{\up #} LGDT}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} LGDT}

\par 
\par \pard 
\par \f2\b\cf1 LGDT \cf2 - Load Global Descriptor Table (286+ privileged)
\par \plain\f2\b\fs20         Usage:  LGDT    src
\par         Modifies flags: None
\par         Loads a value from an operand into the Global Descriptor Table
\par         (GDT) register.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         mem\cf1 64\plain\f2\b\fs20               -    \cf1 11\plain\f2\b\fs20     \cf1 11\plain\f2\b\fs20     \cf1 11\plain\f2\b\fs20             \cf1 5
\par \pard \plain\fs20 
\par \f2\b         \cf3 0F 01\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  LGDT m\cf1 16\plain\f2\b\fs20 &\cf1 32\plain\f2\b\fs20  Load m into GDTR
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0041}
{\up $}{\footnote\pard\plain{\up $} LIDT}
{\up #}{\footnote\pard\plain{\up #} LIDT}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} LIDT}

\par 
\par \pard 
\par \f2\b\cf1 LIDT \cf2 - Load Interrupt Descriptor Table (286+ privileged)
\par \plain\f2\b\fs20         Usage:  LIDT    src
\par         Modifies flags: None
\par         Loads a value from an operand into the Interrupt Descriptor Table
\par         (IDT) register.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         mem\cf1 64\plain\f2\b\fs20               -    \cf1 12\plain\f2\b\fs20     \cf1 11\plain\f2\b\fs20     \cf1 11\plain\f2\b\fs20             \cf1 5
\par \pard \plain\fs20 
\par \f2\b         \cf3 0F 01\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  LIDT m\cf1 16\plain\f2\b\fs20 &\cf1 32\plain\f2\b\fs20  Load m into IDTR
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0042}
{\up $}{\footnote\pard\plain{\up $} LGS}
{\up #}{\footnote\pard\plain{\up #} LGS}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} LGS}

\par 
\par \pard 
\par \f2\b\cf1 LGS \cf2 - Load Pointer Using GS (386+)
\par \plain\f2\b\fs20         Usage:  LGS     dest,src
\par         Modifies flags: None
\par         Loads \cf1 32\plain\f2\b\fs20 -bit pointer from memory source to destination register
\par         and GS.  The offset is placed in the destination register and the
\par         segment is placed in GS.  To use this instruction the word at the
\par         lower memory address must contain the offset and the word at the
\par         higher address must contain the segment.  This simplifies the loading
\par \pard         of far pointers from the stack and the interrupt vector table.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,mem           -     -     \cf1 7\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20             \cf1 5\plain\f2\b\fs20 -\cf1 7
\par \plain\f2\b\fs20         reg,mem (PM)      -     -     \cf1 22\plain\f2\b\fs20     \cf1 12\plain\f2\b\fs20            \cf1 5\plain\f2\b\fs20 -\cf1 7
\par \plain\fs20 
\par \f2\b         \cf3 0F B5\plain\f2\b\fs20  / r LGS r\cf1 16\plain\f2\b\fs20 ,m\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  Load GS: r\cf1 16\plain\f2\b\fs20  with far pointer from memory
\par \pard         \cf3 0F B5\plain\f2\b\fs20  / r LGS r\cf1 32\plain\f2\b\fs20 ,m\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  Load GS: r\cf1 32\plain\f2\b\fs20  with far pointer from memory
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0043}
{\up $}{\footnote\pard\plain{\up $} LLDT}
{\up #}{\footnote\pard\plain{\up #} LLDT}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} LLDT}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 LLDT \cf2 - Load Local Descriptor Table (286+ privileged)
\par \plain\f2\b\fs20         Usage:  LLDT    src
\par         Modifies flags: None
\par         Loads a value from an operand into the Local Descriptor Table 
\par         Register (LDTR).
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 16\plain\f2\b\fs20              -     \cf1 17\plain\f2\b\fs20     \cf1 20\plain\f2\b\fs20     \cf1 11\plain\f2\b\fs20             \cf1 3
\par \pard \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20              -     \cf1 19\plain\f2\b\fs20     \cf1 24\plain\f2\b\fs20     \cf1 11\plain\f2\b\fs20             \cf1 5
\par \plain\fs20 
\par \f2\b         \cf3 0F 00\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  LLDT r/m\cf1 16\plain\f2\b\fs20  Load segment selector r/m\cf1 16\plain\f2\b\fs20  into LDTR
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0044}
{\up $}{\footnote\pard\plain{\up $} LMSW}
{\up #}{\footnote\pard\plain{\up #} LMSW}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} LMSW}

\par 
\par \pard 
\par \f2\b\cf1 LMSW \cf2 - Load Machine Status Word (286+ privileged)
\par \plain\f2\b\fs20         Usage:  LMSW    src
\par         Modifies flags: None
\par         Loads the Machine Status Word (MSW) from data found at "src"
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 16\plain\f2\b\fs20              -     \cf1 3\plain\f2\b\fs20      \cf1 10\plain\f2\b\fs20     \cf1 13\plain\f2\b\fs20             \cf1 3
\par \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20              -     \cf1 6\plain\f2\b\fs20      \cf1 13\plain\f2\b\fs20     \cf1 13\plain\f2\b\fs20             \cf1 5
\par \pard \plain\fs20 
\par \f2\b         \cf3 0F 01\plain\f2\b\fs20  /\cf1 6\plain\f2\b\fs20  LMSW r/m\cf1 16\plain\f2\b\fs20  Loads r/m\cf1 16\plain\f2\b\fs20  in machine status word of CR\cf1 0
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0045}
{\up $}{\footnote\pard\plain{\up $} LOCK}
{\up #}{\footnote\pard\plain{\up #} LOCK}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} LOCK}

\par 
\par \pard 
\par \f2\b\cf1 LOCK \cf2 - Lock Bus
\par \plain\f2\b\fs20         Usage:  LOCK
\par                 LOCK: (\cf1 386\plain\f2\b\fs20 + prefix)
\par         Modifies flags: None
\par         This instruction is a prefix that causes the CPU assert bus lock
\par         signal during the execution of the next instruction.  Used to
\par         avoid two processors from updating the same data location.  The
\par         \cf1 286\plain\f2\b\fs20  always asserts lock during an XCHG with memory operands.  This
\par         should only be used to lock the bus prior to XCHG, MOV, IN and
\par \pard         OUT instructions.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              \cf1 2\plain\f2\b\fs20      \cf1 0\plain\f2\b\fs20      \cf1 0\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 F0\plain\f2\b\fs20  LOCK Asserts LOCK# signal
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0046}
{\up $}{\footnote\pard\plain{\up $} LODS}
{\up #}{\footnote\pard\plain{\up #} LODS}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} LODS}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 LODS \cf2 - Load String (Byte, Word or Double)
\par \plain\f2\b\fs20         Usage:  LODS    src
\par                 LODSB
\par                 LODSW
\par                 LODSD  (\cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: None
\par         Transfers string element addressed by DS:SI (even if an operand is
\par         supplied) to the accumulator.   SI is incremented based on the size
\par         of the operand or based on the instruction used.  If the Direction
\par         Flag is set SI is decremented, if the Direction Flag is clear SI
\par \pard         is incremented.  Use with REP prefixes.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         src             \cf1 12\plain\f2\b\fs20 /\cf1 16\plain\f2\b\fs20    \cf1 5\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20              \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 AC\plain\f2\b\fs20  LODS m\cf1 8\plain\f2\b\fs20  Load byte at address DS:(E)SI into AL
\par        \cf3  AD\plain\f2\b\fs20  LODS m\cf1 16\plain\f2\b\fs20  Load word at address DS:(E)SI into AX
\par         \cf3 AD\plain\f2\b\fs20  LODS m\cf1 32\plain\f2\b\fs20  Load doubleword at address DS:(E)SI into EAX
\par \pard         \cf3 AC\plain\f2\b\fs20  LODSB Load byte at address DS:(E)SI into AL
\par         \cf3 AD\plain\f2\b\fs20  LODSW Load word at address DS:(E)SI into AX
\par         \cf3 AD\plain\f2\b\fs20  LODSD Load doubleword at address DS:(E)SI into EAX
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0047}
{\up $}{\footnote\pard\plain{\up $} LOOP}
{\up #}{\footnote\pard\plain{\up #} LOOP}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} LOOP}

\par 
\par \pard 
\par \f2\b\cf1 LOOP \cf2 - Decrement CX and Loop if CX Not Zero
\par \plain\f2\b\fs20         Usage:  LOOP    label
\par         Modifies flags: None
\par         Decrements CX by \cf1 1\plain\f2\b\fs20  and transfers control to "label" if CX is not
\par         Zero.  The "label" operand must be within -\cf1 128\plain\f2\b\fs20  or \cf1 127\plain\f2\b\fs20  bytes of the
\par         instruction following the loop instruction
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         label:  jump      \cf1 18\plain\f2\b\fs20    \cf1 8\plain\f2\b\fs20 +m  \cf1 11\plain\f2\b\fs20 +m    \cf1 6\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20                 no jump    \cf1 5\plain\f2\b\fs20     \cf1 4\plain\f2\b\fs20      ?     \cf1 2
\par \plain\fs20 
\par \f2\b         \cf3 E2\plain\f2\b\fs20  cb LOOP rel\cf1 8\plain\f2\b\fs20  Decrement count; jump short if count = \cf1 0
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0048}
{\up $}{\footnote\pard\plain{\up $} LOOPELOOPZ}
{\up #}{\footnote\pard\plain{\up #} LOOPELOOPZ}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} LOOPE/LOOPZ}

\par 
\par \pard \f2\b\cf1 LOOPE/LOOPZ\cf2  - Loop While Equal / Loop While Zero
\par \plain\f2\b\fs20         Usage:  LOOPE   label
\par                 LOOPZ   label
\par         Modifies flags: None
\par         Decrements CX by \cf1 1\plain\f2\b\fs20  (without modifying the flags) and transfers
\par         control to "label" if CX != \cf1 0\plain\f2\b\fs20  and the Zero Flag is set.  The
\par         "label" operand must be within -\cf1 128\plain\f2\b\fs20  or \cf1 127\plain\f2\b\fs20  bytes of the instruction
\par         following the loop instruction.
\par                                  Clocks                 Size
\par \pard         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         label:  jump      \cf1 18\plain\f2\b\fs20    \cf1 8\plain\f2\b\fs20 +m  \cf1 11\plain\f2\b\fs20 +m    \cf1 9\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20                 no jump    \cf1 5\plain\f2\b\fs20     \cf1 4\plain\f2\b\fs20      ?     \cf1 6
\par \plain\fs20 
\par \f2\b         \cf3 E1\plain\f2\b\fs20  cb LOOPE
\par         \cf3 E1\plain\f2\b\fs20  cb LOOPZ
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0049}
{\up $}{\footnote\pard\plain{\up $} LOOPNZLOOPNE}
{\up #}{\footnote\pard\plain{\up #} LOOPNZLOOPNE}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} LOOPNZ/LOOPNE}
\plain\fs20 
\par 
\par \pard \f2\b\cf1 LOOPNZ/LOOPNE\cf2  - Loop While Not Zero / Loop While Not Equal
\par \plain\f2\b\fs20         Usage:  LOOPNZ  label
\par                 LOOPNE  label
\par         Modifies flags: None
\par         Decrements CX by \cf1 1\plain\f2\b\fs20  (without modifying the flags) and transfers
\par         control to "label" if CX != \cf1 0\plain\f2\b\fs20  and the Zero Flag is clear.  The
\par         "label" operand must be within -\cf1 128\plain\f2\b\fs20  or \cf1 127\plain\f2\b\fs20  bytes of the instruction
\par         following the loop instruction.
\par                                  Clocks                 Size
\par \pard         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         label:  jump      \cf1 19\plain\f2\b\fs20    \cf1 8\plain\f2\b\fs20 +m  \cf1 11\plain\f2\b\fs20 +m    \cf1 9\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20                 no jump    \cf1 5\plain\f2\b\fs20     \cf1 4\plain\f2\b\fs20      ?     \cf1 6
\par \plain\fs20 
\par \f2\b         \cf3 E0\plain\f2\b\fs20  cb LOOPNE
\par         \cf3 E0\plain\f2\b\fs20  cb LOOPNZ
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:004a}
{\up $}{\footnote\pard\plain{\up $} LSL}
{\up #}{\footnote\pard\plain{\up #} LSL}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} LSL}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 LSL \cf2 - Load Segment Limit (286+ protected)
\par \plain\f2\b\fs20         Usage:  LSL     dest,src
\par         Modifies flags: ZF
\par         Loads the segment limit of a selector into the destination register
\par         if the selector is valid and visible at the current privilege level.
\par         If loading is successful the Zero Flag is set, otherwise it is
\par         cleared.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         reg\cf1 16\plain\f2\b\fs20 ,reg\cf1 16\plain\f2\b\fs20        -     \cf1 14\plain\f2\b\fs20   \cf1 20\plain\f2\b\fs20 /\cf1 25\plain\f2\b\fs20    \cf1 10\plain\f2\b\fs20             \cf1 3
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,reg\cf1 32\plain\f2\b\fs20        -     -   \cf1 20\plain\f2\b\fs20 /\cf1 25\plain\f2\b\fs20    \cf1 10\plain\f2\b\fs20             \cf1 3
\par \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20 ,mem\cf1 16\plain\f2\b\fs20        -     \cf1 16\plain\f2\b\fs20   \cf1 21\plain\f2\b\fs20 /\cf1 26\plain\f2\b\fs20    \cf1 10\plain\f2\b\fs20             \cf1 5
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,mem\cf1 32\plain\f2\b\fs20        -     -   \cf1 21\plain\f2\b\fs20 /\cf1 26\plain\f2\b\fs20    \cf1 10\plain\f2\b\fs20             \cf1 5
\par \plain\f2\b\fs20         - \cf1 386\plain\f2\b\fs20  times are listed "byte granular" / "page granular"
\par \pard \plain\fs20 
\par \f2\b         \cf3 0F 03\plain\f2\b\fs20  / r LSL r\cf1 16\plain\f2\b\fs20 ,r/m\cf1 16\plain\f2\b\fs20  Load: r\cf1 16\plain\f2\b\fs20  \'ac segment limit, selector r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 0F 03\plain\f2\b\fs20  / r LSL r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 32\plain\f2\b\fs20  Load: r\cf1 32\plain\f2\b\fs20  \'ac segment limit, selector r/m\cf1 32\plain\f2\b\fs20 )
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:004b}
{\up $}{\footnote\pard\plain{\up $} LSS}
{\up #}{\footnote\pard\plain{\up #} LSS}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} LSS}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 LSS \cf2 - Load Pointer Using SS (386+)
\par \plain\f2\b\fs20         Usage:  LSS     dest,src
\par         Modifies flags: None
\par         Loads \cf1 32\plain\f2\b\fs20 -bit pointer from memory source to destination register
\par         and SS.  The offset is placed in the destination register and the
\par         segment is placed in SS.  To use this instruction the word at the
\par         lower memory address must contain the offset and the word at the
\par         higher address must contain the segment.  This simplifies the loading
\par \pard         of far pointers from the stack and the interrupt vector table.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,mem           -     -     \cf1 7\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20             \cf1 5\plain\f2\b\fs20 -\cf1 7
\par \plain\f2\b\fs20         reg,mem (PM)      -     -     \cf1 22\plain\f2\b\fs20     \cf1 12\plain\f2\b\fs20            \cf1 5\plain\f2\b\fs20 -\cf1 7
\par \plain\fs20 
\par \f2\b         \cf3 0F B2\plain\f2\b\fs20  / r LSS r\cf1 16\plain\f2\b\fs20 ,m\cf1 16\plain\f2\b\fs20 :\cf1 16\plain\f2\b\fs20  Load SS: r\cf1 16\plain\f2\b\fs20  with far pointer from memory
\par \pard         \cf3 0F B2\plain\f2\b\fs20  / r LSS r\cf1 32\plain\f2\b\fs20 ,m\cf1 16\plain\f2\b\fs20 :\cf1 32\plain\f2\b\fs20  Load SS: r\cf1 32\plain\f2\b\fs20  with far pointer from memory
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:004c}
{\up $}{\footnote\pard\plain{\up $} LTR}
{\up #}{\footnote\pard\plain{\up #} LTR}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} LTR}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 LTR \cf2 - Load Task Register (286+ privileged)
\par \plain\f2\b\fs20         Usage:  LTR     src
\par         Modifies flags: None
\par         Loads the current task register with the value specified in "src".
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 16\plain\f2\b\fs20              -     \cf1 17\plain\f2\b\fs20     \cf1 23\plain\f2\b\fs20     \cf1 20\plain\f2\b\fs20             \cf1 3
\par \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20               -    \cf1 19\plain\f2\b\fs20     \cf1 27\plain\f2\b\fs20     \cf1 20\plain\f2\b\fs20             \cf1 5
\par \pard \plain\fs20 
\par \f2\b         \cf3 0F 00\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  LTR r/m\cf1 16\plain\f2\b\fs20  Load r/m\cf1 16\plain\f2\b\fs20  into task register
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:004d}
{\up $}{\footnote\pard\plain{\up $} MOV}
{\up #}{\footnote\pard\plain{\up #} MOV}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} MOV}

\par 
\par \pard 
\par \f2\b\cf1 MOV \cf2 - Move Byte or Word
\par \plain\f2\b\fs20         Usage:  MOV     dest,src
\par         Modifies flags: None
\par         Copies byte or word from the source operand to the destination
\par         operand.  If the destination is SS interrupts are disabled except
\par         on early buggy \cf1 808\plain\f2\b\fs20 x CPUs.  Some CPUs disable interrupts if the
\par         destination is any of the segment registers
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         reg,reg           \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20         mem,reg          \cf1 9\plain\f2\b\fs20 +EA   \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 13\plain\f2\b\fs20 +EA)
\par         reg,mem          \cf1 8\plain\f2\b\fs20 +EA   \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 12\plain\f2\b\fs20 +EA)
\par         mem,immed       \cf1 10\plain\f2\b\fs20 +EA   \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 6\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 14\plain\f2\b\fs20 +EA)
\par \pard         reg,immed         \cf1 4\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 3
\par \plain\f2\b\fs20         mem,accum         \cf1 10\plain\f2\b\fs20     \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 3\plain\f2\b\fs20    (W\cf1 88\plain\f2\b\fs20 =\cf1 14\plain\f2\b\fs20 )
\par         accum,mem         \cf1 10\plain\f2\b\fs20     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 3\plain\f2\b\fs20    (W\cf1 88\plain\f2\b\fs20 =\cf1 14\plain\f2\b\fs20 )
\par         segreg,reg\cf1 16\plain\f2\b\fs20       \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20         segreg,mem\cf1 16\plain\f2\b\fs20      \cf1 8\plain\f2\b\fs20 +EA   \cf1 5\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20      \cf1 9\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 12\plain\f2\b\fs20 +EA)
\par \pard         reg\cf1 16\plain\f2\b\fs20 ,segreg      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20 ,segreg     \cf1 9\plain\f2\b\fs20 +EA   \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 13\plain\f2\b\fs20 +EA)
\par         reg\cf1 32\plain\f2\b\fs20 ,CR\cf1 0\plain\f2\b\fs20 /CR\cf1 2\plain\f2\b\fs20 /CR\cf1 3\plain\f2\b\fs20  -     -     \cf1 6\plain\f2\b\fs20      \cf1 4
\par \plain\f2\b\fs20         CR\cf1 0\plain\f2\b\fs20 ,reg\cf1 32\plain\f2\b\fs20          -     -     \cf1 10\plain\f2\b\fs20     \cf1 16
\par \plain\f2\b\fs20         CR\cf1 2\plain\f2\b\fs20 ,reg\cf1 32\plain\f2\b\fs20          -     -     \cf1 4\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 3
\par \pard \plain\f2\b\fs20         CR\cf1 3\plain\f2\b\fs20 ,reg\cf1 32\plain\f2\b\fs20          -     -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,DR\cf1 0\plain\f2\b\fs20 /DR\cf1 1\plain\f2\b\fs20 /DR\cf1 2\plain\f2\b\fs20 /DR\cf1 3\plain\f2\b\fs20    -     \cf1 22\plain\f2\b\fs20    \cf1 10\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,DR\cf1 6\plain\f2\b\fs20 /DR\cf1 7\plain\f2\b\fs20      -     -     \cf1 22\plain\f2\b\fs20    \cf1 10\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         DR\cf1 0\plain\f2\b\fs20 /DR\cf1 1\plain\f2\b\fs20 /DR\cf1 2\plain\f2\b\fs20 /DR\cf1 3\plain\f2\b\fs20 ,reg\cf1 32\plain\f2\b\fs20    -     \cf1 22\plain\f2\b\fs20    \cf1 11\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         DR\cf1 6\plain\f2\b\fs20 /DR\cf1 7\plain\f2\b\fs20 ,reg\cf1 32\plain\f2\b\fs20      -     -     \cf1 16\plain\f2\b\fs20    \cf1 11\plain\f2\b\fs20              \cf1 3
\par \pard \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,TR\cf1 6\plain\f2\b\fs20 /TR\cf1 7\plain\f2\b\fs20      -     -     \cf1 12\plain\f2\b\fs20     \cf1 4\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         TR\cf1 6\plain\f2\b\fs20 /TR\cf1 7\plain\f2\b\fs20 ,reg\cf1 32\plain\f2\b\fs20      -     -     \cf1 12\plain\f2\b\fs20     \cf1 4\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,TR\cf1 3\plain\f2\b\fs20                            \cf1 3
\par \plain\f2\b\fs20         TR\cf1 3\plain\f2\b\fs20 ,reg\cf1 32\plain\f2\b\fs20                            \cf1 6
\par \plain\f2\b\fs20         - when the \cf1 386\plain\f2\b\fs20  special registers are used all operands are \cf1 32\plain\f2\b\fs20  bits
\par \plain\fs20 
\par \f2\b        \cf3  88\plain\f2\b\fs20  / r MOV r/m\cf1 8\plain\f2\b\fs20 ,r\cf1 8\plain\f2\b\fs20  Move r\cf1 8\plain\f2\b\fs20  to r/m\cf1 8
\par \pard \plain\f2\b\fs20         \cf3 89\plain\f2\b\fs20  / r MOV r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20  Move r\cf1 16\plain\f2\b\fs20  to r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 89\plain\f2\b\fs20  / r MOV r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20  Move r\cf1 32\plain\f2\b\fs20  to r/m\cf1 32
\par \plain\f2\b\fs20         \cf3 8A\plain\f2\b\fs20  / r MOV r\cf1 8\plain\f2\b\fs20 ,r/m\cf1 8\plain\f2\b\fs20  Move r/m\cf1 8\plain\f2\b\fs20  to r\cf1 8
\par \plain\f2\b\fs20        \cf3  8B\plain\f2\b\fs20  / r MOV r\cf1 16\plain\f2\b\fs20 ,r/m\cf1 16\plain\f2\b\fs20  Move r/m\cf1 16\plain\f2\b\fs20  to r\cf1 16
\par \plain\f2\b\fs20         \cf3 8B\plain\f2\b\fs20  / r MOV r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 32\plain\f2\b\fs20  Move r/m\cf1 32\plain\f2\b\fs20  to r\cf1 32
\par \plain\f2\b\fs20         \cf3 8C\plain\f2\b\fs20  / r MOV r/m\cf1 16\plain\f2\b\fs20 ,Sreg** Move segment register to r/m\cf1 16
\par \pard \plain\f2\b\fs20        \cf3  8E\plain\f2\b\fs20  / r MOV Sreg,r/m\cf1 16\plain\f2\b\fs20 ** Move r/m\cf1 16\plain\f2\b\fs20  to segment register
\par         \cf3 A0\plain\f2\b\fs20  MOV AL, moffs\cf1 8\plain\f2\b\fs20 * Move byte at ( seg:offset) to AL
\par         \cf3 A1\plain\f2\b\fs20  MOV AX, moffs\cf1 16\plain\f2\b\fs20 * Move word at ( seg:offset) to AX
\par         \cf3 A1\plain\f2\b\fs20  MOV EAX, moffs\cf1 32\plain\f2\b\fs20 * Move doubleword at ( seg:offset) to EAX
\par         \cf3 A2\plain\f2\b\fs20  MOV moffs\cf1 8\plain\f2\b\fs20 *,AL Move AL to ( seg:offset)
\par         \cf3 A3\plain\f2\b\fs20  MOV moffs\cf1 16\plain\f2\b\fs20 *,AX Move AX to ( seg:offset)
\par         \cf3 A3\plain\f2\b\fs20  MOV moffs\cf1 32\plain\f2\b\fs20 *,EAX Move EAX to ( seg:offset)
\par \pard         \cf3 B0\plain\f2\b\fs20 + rb MOV r\cf1 8\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Move imm\cf1 8\plain\f2\b\fs20  to r\cf1 8
\par \plain\f2\b\fs20         \cf3 B8\plain\f2\b\fs20 + rw MOV r\cf1 16\plain\f2\b\fs20 ,imm\cf1 16\plain\f2\b\fs20  Move imm\cf1 16\plain\f2\b\fs20  to r\cf1 16
\par \plain\f2\b\fs20         \cf3 B8\plain\f2\b\fs20 + rd MOV r\cf1 32\plain\f2\b\fs20 ,imm\cf1 32\plain\f2\b\fs20  Move imm\cf1 32\plain\f2\b\fs20  to r\cf1 32
\par \plain\f2\b\fs20         \cf3 C6\plain\f2\b\fs20  / \cf1 0\plain\f2\b\fs20  MOV r/m\cf1 8\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Move imm\cf1 8\plain\f2\b\fs20  to r/m\cf1 8
\par \plain\f2\b\fs20         \cf3 C7\plain\f2\b\fs20  / \cf1 0\plain\f2\b\fs20  MOV r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 16\plain\f2\b\fs20  Move imm\cf1 16\plain\f2\b\fs20  to r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 C7\plain\f2\b\fs20  / \cf1 0\plain\f2\b\fs20  MOV r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 32\plain\f2\b\fs20  Move imm\cf1 32\plain\f2\b\fs20  to r/m\cf1 32
\par \pard \plain\f2\b\fs20         \cf3 0F 22\plain\f2\b\fs20  / r MOV CR\cf1 0\plain\f2\b\fs20 , r\cf1 32\plain\f2\b\fs20  Move r\cf1 32\plain\f2\b\fs20  to CR\cf1 0
\par \plain\f2\b\fs20         \cf3 0F 22\plain\f2\b\fs20  / r MOV CR\cf1 2\plain\f2\b\fs20 , r\cf1 32\plain\f2\b\fs20  Move r\cf1 32\plain\f2\b\fs20  to CR\cf1 2
\par \plain\f2\b\fs20         \cf3 0F 22\plain\f2\b\fs20  / r MOV CR\cf1 3\plain\f2\b\fs20 , r\cf1 32\plain\f2\b\fs20  Move r\cf1 32\plain\f2\b\fs20  to CR\cf1 3
\par \plain\f2\b\fs20         \cf3 0F 22\plain\f2\b\fs20  / r MOV CR\cf1 4\plain\f2\b\fs20 , r\cf1 32\plain\f2\b\fs20  Move r\cf1 32\plain\f2\b\fs20  to CR\cf1 4
\par \plain\f2\b\fs20         \cf3 0F 20\plain\f2\b\fs20  / r MOV r\cf1 32\plain\f2\b\fs20 ,CR\cf1 0\plain\f2\b\fs20  Move CR\cf1 0\plain\f2\b\fs20  to r\cf1 32
\par \plain\f2\b\fs20         \cf3 0F 20\plain\f2\b\fs20  / r MOV r\cf1 32\plain\f2\b\fs20 ,CR\cf1 2\plain\f2\b\fs20  Move CR\cf1 2\plain\f2\b\fs20  to r\cf1 32
\par \pard \plain\f2\b\fs20         \cf3 0F 20\plain\f2\b\fs20  / r MOV r\cf1 32\plain\f2\b\fs20 ,CR\cf1 3\plain\f2\b\fs20  Move CR\cf1 3\plain\f2\b\fs20  to r\cf1 32
\par \plain\f2\b\fs20         \cf3 0F 20\plain\f2\b\fs20  / r MOV r\cf1 32\plain\f2\b\fs20 ,CR\cf1 4\plain\f2\b\fs20  Move CR\cf1 4\plain\f2\b\fs20  to r\cf1 32
\par \plain\f2\b\fs20         \cf3 0F 21\plain\f2\b\fs20 / r MOV r\cf1 32\plain\f2\b\fs20 , DR\cf1 0\plain\f2\b\fs20 -DR\cf1 7\plain\f2\b\fs20  Move debug register to r\cf1 32
\par \plain\f2\b\fs20         \cf3 0F 23\plain\f2\b\fs20  / r MOV DR\cf1 0\plain\f2\b\fs20 -DR\cf1 7\plain\f2\b\fs20 , r\cf1 32\plain\f2\b\fs20  Move r\cf1 32\plain\f2\b\fs20  to debug register
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:004e}
{\up $}{\footnote\pard\plain{\up $} MOVS}
{\up #}{\footnote\pard\plain{\up #} MOVS}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} MOVS}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 MOVS \cf2 - Move String (Byte or Word)
\par \plain\f2\b\fs20         Usage:  MOVS    dest,src
\par                 MOVSB
\par                 MOVSW
\par                 MOVSD  (\cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: None
\par         Copies data from addressed by DS:SI (even if operands are given) to
\par         the location ES:DI destination and updates SI and DI based on the
\par         size of the operand or instruction used.  SI and DI are incremented
\par         when the Direction Flag is cleared and decremented when the Direction
\par \pard         Flag is Set.  Use with REP prefixes.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         dest,src          \cf1 18\plain\f2\b\fs20     \cf1 5\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20              \cf1 1\plain\f2\b\fs20    (W\cf1 88\plain\f2\b\fs20 =\cf1 26\plain\f2\b\fs20 )
\par \plain\fs20 
\par \f2\b         \cf3 A4\plain\f2\b\fs20  MOVS m\cf1 8\plain\f2\b\fs20 , m\cf1 8\plain\f2\b\fs20  Move byte at address DS:(E)SI to address ES:(E)DI
\par         \cf3 A5\plain\f2\b\fs20  MOVS m\cf1 16\plain\f2\b\fs20 , m\cf1 16\plain\f2\b\fs20  Move word at address DS:(E)SI to address ES:(E)DI
\par \pard         \cf3 A5\plain\f2\b\fs20  MOVS m\cf1 32\plain\f2\b\fs20 , m\cf1 32\plain\f2\b\fs20  Move doubleword at address DS:(E)SI to address ES:(E)DI
\par         \cf3 A4\plain\f2\b\fs20  MOVSB Move byte at address DS:(E)SI to address ES:(E)DI
\par         \cf3 A5\plain\f2\b\fs20  MOVSW Move word at address DS:(E)SI to address ES:(E)DI
\par         \cf3 A5\plain\f2\b\fs20  MOVSD Move doubleword at address DS:(E)SI to address ES:(E)DI
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:004f}
{\up $}{\footnote\pard\plain{\up $} MOVSX}
{\up #}{\footnote\pard\plain{\up #} MOVSX}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} MOVSX}

\par 
\par \pard 
\par \f2\b\cf1 MOVSX \cf2 - Move with Sign Extend (386+)
\par \plain\f2\b\fs20         Usage:  MOVSX   dest,src
\par         Modifies flags: None
\par         Copies the value of the source operand to the destination register
\par         with the sign extended.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,reg           -     -     \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         reg,mem           -     -     \cf1 6\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 7
\par \pard \plain\fs20 
\par \f2\b         \cf3 0F BE\plain\f2\b\fs20  / r MOVSX r\cf1 16\plain\f2\b\fs20 ,r/m\cf1 8\plain\f2\b\fs20  Move byte to word with sign-extension
\par         \cf3 0F BE\plain\f2\b\fs20  / r MOVSX r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 8\plain\f2\b\fs20  Move byte to doubleword, sign-extension
\par         \cf3 0F BF\plain\f2\b\fs20  / r MOVSX r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 16\plain\f2\b\fs20  Move word to doubleword, sign-extension
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0050}
{\up $}{\footnote\pard\plain{\up $} MOVZX}
{\up #}{\footnote\pard\plain{\up #} MOVZX}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} MOVZX}

\par 
\par \pard 
\par \f2\b\cf1 MOVZX \cf2 - Move with Zero Extend (386+)
\par \plain\f2\b\fs20         Usage:  MOVZX   dest,src
\par         Modifies flags: None
\par         Copies the value of the source operand to the destination register
\par         with the zeroes extended.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,reg           -     -     \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         reg,mem           -     -     \cf1 6\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 7
\par \pard \plain\fs20 
\par \f2\b         \cf3 0F B6\plain\f2\b\fs20  / r MOVZX r\cf1 16\plain\f2\b\fs20 ,r/m\cf1 8\plain\f2\b\fs20  Move byte to word with zero-extension
\par         \cf3 0F B6\plain\f2\b\fs20  / r MOVZX r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 8\plain\f2\b\fs20  Move byte to doubleword, zero-extension
\par         \cf3 0F B7\plain\f2\b\fs20  / r MOVZX r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 16\plain\f2\b\fs20  Move word to doubleword, zero-extension
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0051}
{\up $}{\footnote\pard\plain{\up $} MUL}
{\up #}{\footnote\pard\plain{\up #} MUL}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} MUL}

\par 
\par \pard 
\par \f2\b\cf1 MUL \cf2 - Unsigned Multiply
\par \plain\f2\b\fs20         Usage:  MUL     src
\par         Modifies flags: CF OF (AF,PF,SF,ZF undefined)
\par         Unsigned multiply of the accumulator by the source.  If "src" is
\par         a byte value, then AL is used as the other multiplicand and the
\par         result is placed in AX.  If "src" is a word value, then AX is
\par         multiplied by "src" and DX:AX receives the result.  If "src" is
\par         a double word value, then EAX is multiplied by "src" and EDX:EAX
\par \pard         receives the result.  The \cf1 386\plain\f2\b\fs20 + uses an early out algorithm which
\par         makes multiplying any size value in EAX as fast as in the \cf1 8\plain\f2\b\fs20  or \cf1 16
\par \plain\f2\b\fs20         bit registers.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 8\plain\f2\b\fs20             \cf1 70\plain\f2\b\fs20 -\cf1 77\plain\f2\b\fs20    \cf1 13\plain\f2\b\fs20    \cf1 9\plain\f2\b\fs20 -\cf1 14\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 18\plain\f2\b\fs20           \cf1 2
\par \pard \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20           \cf1 118\plain\f2\b\fs20 -\cf1 113\plain\f2\b\fs20   \cf1 21\plain\f2\b\fs20    \cf1 9\plain\f2\b\fs20 -\cf1 22\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 26\plain\f2\b\fs20           \cf1 2
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20              -     -    \cf1 9\plain\f2\b\fs20 -\cf1 38\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 42\plain\f2\b\fs20          \cf1 2\plain\f2\b\fs20 -\cf1 4
\par \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20         (\cf1 76\plain\f2\b\fs20 -\cf1 83\plain\f2\b\fs20 )+EA  \cf1 16\plain\f2\b\fs20   \cf1 12\plain\f2\b\fs20 -\cf1 17\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 18\plain\f2\b\fs20          \cf1 2\plain\f2\b\fs20 -\cf1 4
\par \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20      (\cf1 124\plain\f2\b\fs20 -\cf1 139\plain\f2\b\fs20 )+EA  \cf1 24\plain\f2\b\fs20   \cf1 12\plain\f2\b\fs20 -\cf1 25\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 26\plain\f2\b\fs20          \cf1 2\plain\f2\b\fs20 -\cf1 4
\par \pard \plain\f2\b\fs20         mem\cf1 32\plain\f2\b\fs20              -     -   \cf1 12\plain\f2\b\fs20 -\cf1 21\plain\f2\b\fs20   \cf1 13\plain\f2\b\fs20 -\cf1 42\plain\f2\b\fs20          \cf1 2\plain\f2\b\fs20 -\cf1 4
\par \plain\fs20 
\par \f2\b         \cf3 F6\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  MUL r/m\cf1 8\plain\f2\b\fs20  Unsigned multiply (AX \'ac AL * r/m\cf1 8\plain\f2\b\fs20 )
\par         \cf3 F7\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  MUL r/m\cf1 16\plain\f2\b\fs20  Unsigned multiply (DX:AX \'ac AX * r/m\cf1 16\plain\f2\b\fs20 )
\par         \cf3 F7\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  MUL r/m\cf1 32\plain\f2\b\fs20  Unsigned multiply (EDX:EAX \'ac EAX * r/m\cf1 32\plain\f2\b\fs20 )
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0052}
{\up $}{\footnote\pard\plain{\up $} NEG}
{\up #}{\footnote\pard\plain{\up #} NEG}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} NEG}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 NEG \cf2 - Two's Complement Negation
\par \plain\f2\b\fs20         Usage:  NEG     dest
\par         Modifies flags: AF CF OF PF SF ZF
\par         Subtracts the destination from \cf1 0\plain\f2\b\fs20  and saves the \cf1 2\plain\f2\b\fs20 s complement of
\par         "dest" back into "dest".
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg               \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 2
\par \pard \plain\f2\b\fs20         mem            \cf1 16\plain\f2\b\fs20 +EA    \cf1 7\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 24\plain\f2\b\fs20 +EA)
\par \plain\fs20 
\par \f2\b         \cf3 F6\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  NEG r/m\cf1 8\plain\f2\b\fs20  Two's complement negate r/m\cf1 8
\par \plain\f2\b\fs20         \cf3 F7\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  NEG r/m\cf1 16\plain\f2\b\fs20  Two's complement negate r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 F7\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  NEG r/m\cf1 32\plain\f2\b\fs20  Two's complement negate r/m\cf1 32
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0053}
{\up $}{\footnote\pard\plain{\up $} NOP}
{\up #}{\footnote\pard\plain{\up #} NOP}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} NOP}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 NOP \cf2 - No Operation (\cf3 90\cf2 h)
\par \plain\f2\b\fs20         Usage:  NOP
\par         Modifies flags: None
\par         This is a do nothing instruction.  It results in occupation of both
\par         space and time and is most useful for patching code segments.
\par         (This is the original XCHG AL,AL instruction)
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 1
\par \pard \plain\fs20 
\par \f2\b         \cf3 90\plain\f2\b\fs20  NOP No operation
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0054}
{\up $}{\footnote\pard\plain{\up $} NOT}
{\up #}{\footnote\pard\plain{\up #} NOT}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} NOT}

\par 
\par \pard 
\par \f2\b\cf1 NOT \cf2 - One's Compliment Negation (Logical NOT)
\par \plain\f2\b\fs20         Usage:  NOT     dest
\par         Modifies flags: None
\par         Inverts the bits of the "dest" operand forming the \cf1 1\plain\f2\b\fs20 s complement.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg               \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20         mem            \cf1 16\plain\f2\b\fs20 +EA    \cf1 7\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 24\plain\f2\b\fs20 +EA)
\par \pard \plain\fs20 
\par \f2\b         \cf3 F6\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  NOT r/m\cf1 8\plain\f2\b\fs20  Reverse each bit of r/m\cf1 8
\par \plain\f2\b\fs20         \cf3 F7\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  NOT r/m\cf1 16\plain\f2\b\fs20  Reverse each bit of r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 F7\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  NOT r/m\cf1 32\plain\f2\b\fs20  Reverse each bit of r/m\cf1 32
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0055}
{\up $}{\footnote\pard\plain{\up $} OR}
{\up #}{\footnote\pard\plain{\up #} OR}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} OR}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 OR \cf2 - Inclusive Logical OR
\par \plain\f2\b\fs20         Usage:  OR      dest,src
\par         Modifies flags: CF OF PF SF ZF (AF undefined)
\par         Logical inclusive OR of the two operands returning the result in
\par         the destination.  Any bit set in either operand will be set in the
\par         destination.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,reg           \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 2
\par \pard \plain\f2\b\fs20         mem,reg         \cf1 16\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 24\plain\f2\b\fs20 +EA)
\par         reg,mem          \cf1 9\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 13\plain\f2\b\fs20 +EA)
\par         reg,immed         \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 4
\par \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20 ,immed\cf1 8\plain\f2\b\fs20      \cf1 17\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 6
\par \pard \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20 ,immed\cf1 16\plain\f2\b\fs20    \cf1 25\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 6
\par \plain\f2\b\fs20         accum,immed       \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 0C\plain\f2\b\fs20  ib OR AL, imm\cf1 8\plain\f2\b\fs20  AL OR imm\cf1 8
\par \plain\f2\b\fs20         \cf3 0D\plain\f2\b\fs20  iw OR AX, imm\cf1 16\plain\f2\b\fs20  AX OR imm\cf1 16
\par \plain\f2\b\fs20        \cf3  0D\plain\f2\b\fs20  id OR EAX, imm\cf1 32\plain\f2\b\fs20  EAX OR imm\cf1 32
\par \plain\f2\b\fs20         \cf3 80\plain\f2\b\fs20  /\cf1 1\plain\f2\b\fs20  ib OR r/m\cf1 8\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  r/m\cf1 8\plain\f2\b\fs20  OR imm\cf1 8
\par \pard \plain\f2\b\fs20         \cf3 81\plain\f2\b\fs20  /\cf1 1\plain\f2\b\fs20  iw OR r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 16\plain\f2\b\fs20  r/m\cf1 16\plain\f2\b\fs20  OR imm\cf1 16
\par \plain\f2\b\fs20         \cf3 81\plain\f2\b\fs20  /\cf1 1\plain\f2\b\fs20  id OR r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 32\plain\f2\b\fs20  r/m\cf1 32\plain\f2\b\fs20  OR imm\cf1 32
\par \plain\f2\b\fs20         \cf3 83\plain\f2\b\fs20  /\cf1 1\plain\f2\b\fs20  ib OR r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  r/m\cf1 16\plain\f2\b\fs20  OR imm\cf1 8\plain\f2\b\fs20  (sign-extended)
\par         \cf3 83\plain\f2\b\fs20  /\cf1 1\plain\f2\b\fs20  ib OR r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  r/m\cf1 32\plain\f2\b\fs20  OR imm\cf1 8\plain\f2\b\fs20  (sign-extended)
\par         \cf3 08\plain\f2\b\fs20  / r OR r/m\cf1 8\plain\f2\b\fs20 ,r\cf1 8\plain\f2\b\fs20  r/m\cf1 8\plain\f2\b\fs20  OR r\cf1 8
\par \pard \plain\f2\b\fs20         \cf3 09\plain\f2\b\fs20  / r OR r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20  r/m\cf1 16\plain\f2\b\fs20  OR r\cf1 16
\par \plain\f2\b\fs20         \cf3 09\plain\f2\b\fs20  / r OR r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20  r/m\cf1 32\plain\f2\b\fs20  OR r\cf1 32
\par \plain\f2\b\fs20         \cf3 0A\plain\f2\b\fs20  / r OR r\cf1 8\plain\f2\b\fs20 ,r/m\cf1 8\plain\f2\b\fs20  r\cf1 8\plain\f2\b\fs20  OR r/m\cf1 8
\par \plain\f2\b\fs20         \cf3 0B\plain\f2\b\fs20  / r OR r\cf1 16\plain\f2\b\fs20 ,r/m\cf1 16\plain\f2\b\fs20  r\cf1 16\plain\f2\b\fs20  OR r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 0B\plain\f2\b\fs20  / r OR r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 32\plain\f2\b\fs20  r\cf1 32\plain\f2\b\fs20  OR r/m\cf1 32
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0056}
{\up $}{\footnote\pard\plain{\up $} OUT}
{\up #}{\footnote\pard\plain{\up #} OUT}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} OUT}

\par 
\par \pard 
\par \f2\b\cf1 OUT \cf2 - Output Data to Port
\par \plain\f2\b\fs20         Usage:  OUT     port,accum
\par         Modifies flags: None
\par         Transfers byte in AL,word in AX or dword in EAX to the specified
\par         hardware port address.  If the port number is in the range of \cf1 0\plain\f2\b\fs20 -\cf1 255
\par \plain\f2\b\fs20         it can be specified as an immediate.  If greater than \cf1 255\plain\f2\b\fs20  then the
\par         port number must be specified in DX.  Since the PC only decodes \cf1 10
\par \plain\f2\b\fs20         bits of the port address, values over \cf1 1023\plain\f2\b\fs20  can only be decoded by
\par \pard         third party vendor equipment and also map to the port range \cf1 0\plain\f2\b\fs20 -\cf1 1023\plain\f2\b\fs20 .
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20     \cf1 486\plain\f2\b\fs20          Bytes
\par         immed\cf1 8\plain\f2\b\fs20 ,accum    \cf1 10\plain\f2\b\fs20 /\cf1 14\plain\f2\b\fs20    \cf1 3\plain\f2\b\fs20      \cf1 10\plain\f2\b\fs20      \cf1 16\plain\f2\b\fs20            \cf1 2
\par \plain\f2\b\fs20         immed\cf1 8\plain\f2\b\fs20 ,accum (PM) -     -    \cf1 4\plain\f2\b\fs20 /\cf1 24\plain\f2\b\fs20  \cf1 11\plain\f2\b\fs20 /\cf1 31\plain\f2\b\fs20 /\cf1 29\plain\f2\b\fs20         \cf1 2
\par \pard \plain\f2\b\fs20         DX,accum         \cf1 8\plain\f2\b\fs20 /\cf1 12\plain\f2\b\fs20    \cf1 3\plain\f2\b\fs20      \cf1 11\plain\f2\b\fs20      \cf1 16\plain\f2\b\fs20            \cf1 1
\par \plain\f2\b\fs20         DX,accum (PM)     -     -    \cf1 5\plain\f2\b\fs20 /\cf1 25\plain\f2\b\fs20  \cf1 10\plain\f2\b\fs20 /\cf1 30\plain\f2\b\fs20 /\cf1 29\plain\f2\b\fs20         \cf1 1
\par \plain\f2\b\fs20         - \cf1 386\plain\f2\b\fs20 + protected mode timings depend on privilege levels.
\par           first number is the timing when:    CPL \'f3 IOPL
\par           second number is the timing when:   CPL > IOPL
\par         third number is the timing when:    virtual mode on \cf1 486\plain\f2\b\fs20  processor
\par \pard \plain\fs20 
\par \f2\b         \cf3 E6\plain\f2\b\fs20  ib OUT imm\cf1 8\plain\f2\b\fs20 , AL Output byte in AL to I/O port address imm\cf1 8
\par \plain\f2\b\fs20         \cf3 E7\plain\f2\b\fs20  ib OUT imm\cf1 8\plain\f2\b\fs20 , AX Output word in AX to I/O port address imm\cf1 8
\par \plain\f2\b\fs20         \cf3 E7\plain\f2\b\fs20  ib OUT imm\cf1 8\plain\f2\b\fs20 , EAX Output doubleword in EAX to I/O port address imm\cf1 8
\par \plain\f2\b\fs20         \cf3 EE\plain\f2\b\fs20  OUT DX, AL Output byte in AL to I/O port address in DX
\par        \cf3  EF\plain\f2\b\fs20  OUT DX, AX Output word in AX to I/O port address in DX
\par         \cf3 EF\plain\f2\b\fs20  OUT DX, EAX Output doubleword in EAX to I/O port address in DX
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0057}
{\up $}{\footnote\pard\plain{\up $} OUTS}
{\up #}{\footnote\pard\plain{\up #} OUTS}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} OUTS}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 OUTS \cf2 - Output String to Port  (80188+)
\par \plain\f2\b\fs20         Usage:  OUTS    port,src
\par                 OUTSB
\par                 OUTSW
\par                 OUTSD   (\cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: None
\par         Transfers a byte, word or doubleword from "src" to the hardware
\par         port specified in DX.  For instructions with no operands the "src"
\par         is located at DS:SI and SI is incremented or decremented by the
\par         size of the operand or the size dictated by the instruction format.
\par \pard         When the Direction Flag is set SI is decremented, when clear, SI is
\par         incremented.  If the port number is in the range of \cf1 0\plain\f2\b\fs20 -\cf1 255\plain\f2\b\fs20  it can
\par         be specified as an immediate.  If greater than \cf1 255\plain\f2\b\fs20  then the port
\par         number must be specified in DX.  Since the PC only decodes \cf1 10\plain\f2\b\fs20  bits
\par         of the port address, values over \cf1 1023\plain\f2\b\fs20  can only be decoded by third
\par         party vendor equipment and also map to the port range \cf1 0\plain\f2\b\fs20 -\cf1 1023\plain\f2\b\fs20 .
\par \pard                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20     \cf1 486\plain\f2\b\fs20          Bytes
\par         port,src          -     \cf1 5\plain\f2\b\fs20      \cf1 14\plain\f2\b\fs20      \cf1 17\plain\f2\b\fs20            \cf1 1
\par \plain\f2\b\fs20         port,src (PM)     -     -    \cf1 8\plain\f2\b\fs20 /\cf1 28\plain\f2\b\fs20  \cf1 10\plain\f2\b\fs20 /\cf1 32\plain\f2\b\fs20 /\cf1 30\plain\f2\b\fs20         \cf1 1
\par \plain\f2\b\fs20         - \cf1 386\plain\f2\b\fs20 + protected mode timings depend on privilege levels.
\par           first number is the timing when:    CPL \'f3 IOPL
\par \pard           second number is the timing when:   CPL > IOPL
\par         third number is the timing when:    virtual mode on \cf1 486\plain\f2\b\fs20  processor
\par \plain\fs20 
\par \f2\b         \cf3 6E\plain\f2\b\fs20  OUTS DX, m\cf1 8
\par \plain\f2\b\fs20         \cf3 6F\plain\f2\b\fs20  OUTS DX, m\cf1 16
\par \plain\f2\b\fs20         \cf3 6F\plain\f2\b\fs20  OUTS DX, m\cf1 32
\par \plain\f2\b\fs20         \cf3 6E\plain\f2\b\fs20  OUTSB
\par         \cf3 6F\plain\f2\b\fs20  OUTSW
\par         \cf3 6F\plain\f2\b\fs20  OUTSD
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0058}
{\up $}{\footnote\pard\plain{\up $} POP}
{\up #}{\footnote\pard\plain{\up #} POP}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} POP}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 POP \cf2 - Pop Word off Stack
\par \plain\f2\b\fs20         Usage:  POP     dest
\par         Modifies flags: None
\par         Transfers word at the current stack top (SS:SP) to the destination
\par         then increments SP by two to point to the new stack top.  CS is not
\par         a valid destination.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 16\plain\f2\b\fs20              \cf1 8\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 1
\par \pard \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20              \cf1 4\plain\f2\b\fs20      -     -     \cf1 4\plain\f2\b\fs20              \cf1 1
\par \plain\f2\b\fs20         segreg            \cf1 8\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 1
\par \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20            \cf1 17\plain\f2\b\fs20 +EA   \cf1 5\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4
\par \plain\f2\b\fs20         mem\cf1 32\plain\f2\b\fs20              \cf1 5\plain\f2\b\fs20      -     -     \cf1 6\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4
\par \plain\fs20 
\par \f2\b         \cf3 8F\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  POP m\cf1 16\plain\f2\b\fs20  Pop top of stack into m\cf1 16\plain\f2\b\fs20 ; increment stack pointer
\par \pard         \cf3 8F\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  POP m\cf1 32\plain\f2\b\fs20  Pop top of stack into m\cf1 32\plain\f2\b\fs20 ; increment stack pointer
\par         \cf3 58\plain\f2\b\fs20 + rw POP r\cf1 16\plain\f2\b\fs20  Pop top of stack into r\cf1 16\plain\f2\b\fs20 ; increment stack pointer
\par         \cf3 58\plain\f2\b\fs20 + rd POP r\cf1 32\plain\f2\b\fs20  Pop top of stack into r\cf1 32\plain\f2\b\fs20 ; increment stack pointer
\par         \cf3 1F\plain\f2\b\fs20  POP DS Pop top of stack into DS; increment stack pointer
\par         \cf3 07\plain\f2\b\fs20  POP ES Pop top of stack into ES; increment stack pointer
\par         \cf3 17\plain\f2\b\fs20  POP SS Pop top of stack into SS; increment stack pointer
\par \pard         \cf3 0F A1\plain\f2\b\fs20  POP FS Pop top of stack into FS; increment stack pointer
\par         \cf3 0F A9\plain\f2\b\fs20  POP GS Pop top of stack into GS; increment stack pointer
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0059}
{\up $}{\footnote\pard\plain{\up $} POPAPOPAD}
{\up #}{\footnote\pard\plain{\up #} POPAPOPAD}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} POPA/POPAD}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 POPA/POPAD\cf2  - Pop All Registers onto Stack  (80188+)
\par \plain\f2\b\fs20         Usage:  POPA
\par                 POPAD  (\cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: None
\par         Pops the top \cf1 8\plain\f2\b\fs20  words off the stack into the \cf1 8\plain\f2\b\fs20  general purpose \cf1 16\plain\f2\b\fs20 /\cf1 32
\par \plain\f2\b\fs20         bit registers.   Registers are popped in the following order: (E)DI,
\par         (E)SI, (E)BP, (E)SP, (E)DX, (E)CX and (E)AX.  The (E)SP value popped
\par         from the stack is actually discarded.
\par                                  Clocks                 Size
\par \pard         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              -     \cf1 19\plain\f2\b\fs20     \cf1 24\plain\f2\b\fs20     \cf1 9\plain\f2\b\fs20              \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 61\plain\f2\b\fs20  POPA Pop DI, SI, BP, BX, DX, CX, and AX
\par         \cf3 61\plain\f2\b\fs20  POPAD Pop EDI, ESI, EBP, EBX, EDX, ECX, and EAX
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:005a}
{\up $}{\footnote\pard\plain{\up $} POPFPOPFD}
{\up #}{\footnote\pard\plain{\up #} POPFPOPFD}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} POPF/POPFD}

\par 
\par \pard 
\par \f2\b\cf1 POPF/POPFD\cf2  - Pop Flags off Stack
\par \plain\f2\b\fs20         Usage:  POPF
\par                 POPFD  (\cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: all flags
\par         Pops word/doubleword from stack into the Flags Register and then
\par         increments SP by \cf1 2\plain\f2\b\fs20  (for POPF) or \cf1 4\plain\f2\b\fs20  (for POPFD).
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none             \cf1 8\plain\f2\b\fs20 /\cf1 12\plain\f2\b\fs20    \cf1 5\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20      \cf1 9\plain\f2\b\fs20              \cf1 1\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 12\plain\f2\b\fs20 )
\par \pard         none  (PM)         -    -     \cf1 5\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20              \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 9D\plain\f2\b\fs20  POPF Pop top of stack into lower \cf1 16\plain\f2\b\fs20  bits of EFLAGS
\par         \cf3 9D\plain\f2\b\fs20  POPFD Pop top of stack into EFLAGS
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:005b}
{\up $}{\footnote\pard\plain{\up $} PUSH}
{\up #}{\footnote\pard\plain{\up #} PUSH}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} PUSH}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 PUSH \cf2 - Push Word onto Stack
\par \plain\f2\b\fs20         Usage:  PUSH    src
\par                 PUSH    immed   (\cf1 80188\plain\f2\b\fs20 + only)
\par         Modifies flags: None
\par         Decrements SP by the size of the operand (two or four, byte values
\par         are sign extended) and transfers one word from source to the stack
\par         top (SS:SP).
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         reg\cf1 16\plain\f2\b\fs20            \cf1 11\plain\f2\b\fs20 /\cf1 15\plain\f2\b\fs20    \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 1
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20              -     -     \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 1
\par \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20            \cf1 16\plain\f2\b\fs20 +EA   \cf1 5\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 24\plain\f2\b\fs20 +EA)
\par         mem\cf1 32\plain\f2\b\fs20              -     -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4
\par \plain\f2\b\fs20         segreg          \cf1 10\plain\f2\b\fs20 /\cf1 14\plain\f2\b\fs20    \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 1
\par \pard \plain\f2\b\fs20         immed              -    \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 FF\plain\f2\b\fs20  /\cf1 6\plain\f2\b\fs20  PUSH r/m\cf1 16\plain\f2\b\fs20  Push r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 FF\plain\f2\b\fs20  /\cf1 6\plain\f2\b\fs20  PUSH r/m\cf1 32\plain\f2\b\fs20  Push r/m\cf1 32
\par \plain\f2\b\fs20         \cf3 50\plain\f2\b\fs20 + rw PUSH r\cf1 16\plain\f2\b\fs20  Push r\cf1 16
\par \plain\f2\b\fs20         \cf3 50\plain\f2\b\fs20 + rd PUSH r\cf1 32\plain\f2\b\fs20  Push r\cf1 32
\par \plain\f2\b\fs20         \cf3 6A\plain\f2\b\fs20  PUSH imm\cf1 8\plain\f2\b\fs20  Push imm\cf1 8
\par \plain\f2\b\fs20         \cf3 68\plain\f2\b\fs20  PUSH imm\cf1 16\plain\f2\b\fs20  Push imm\cf1 16
\par \plain\f2\b\fs20         \cf3 68\plain\f2\b\fs20  PUSH imm\cf1 32\plain\f2\b\fs20  Push imm\cf1 32
\par \pard \plain\f2\b\fs20         \cf3 0E\plain\f2\b\fs20  PUSH CS Push CS
\par         \cf3 16\plain\f2\b\fs20  PUSH SS Push SS
\par         \cf3 1E\plain\f2\b\fs20  PUSH DS Push DS
\par         \cf3 06\plain\f2\b\fs20  PUSH ES Push ES
\par         \cf3 0F A0\plain\f2\b\fs20  PUSH FS Push FS
\par         \cf3 0F A8\plain\f2\b\fs20  PUSH GS Push GS
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:005c}
{\up $}{\footnote\pard\plain{\up $} PUSHAPUSHAD}
{\up #}{\footnote\pard\plain{\up #} PUSHAPUSHAD}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} PUSHA/PUSHAD}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 PUSHA/PUSHAD\cf2  - Push All Registers onto Stack  (80188+)
\par \plain\f2\b\fs20         Usage:  PUSHA
\par                 PUSHAD  (\cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: None
\par         Pushes all general purpose registers onto the stack in the following
\par         order: (E)AX, (E)CX, (E)DX, (E)BX, (E)SP, (E)BP, (E)SI, (E)DI.  The
\par         value of SP is the value before the actual push of SP.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         none              -     \cf1 19\plain\f2\b\fs20     \cf1 24\plain\f2\b\fs20     \cf1 11\plain\f2\b\fs20             \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 60\plain\f2\b\fs20  PUSHA Push AX, CX, DX, BX, original SP, BP, SI, and DI
\par         \cf3 60\plain\f2\b\fs20  PUSHAD Push EAX, ECX, EDX, EBX, original ESP, EBP, ESI, and EDI
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:005d}
{\up $}{\footnote\pard\plain{\up $} PUSHFPUSHFD}
{\up #}{\footnote\pard\plain{\up #} PUSHFPUSHFD}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} PUSHF/PUSHFD}
\plain\fs20 
\par 
\par \pard \f2\b\cf1 PUSHF/PUSHFD\cf2  - Push Flags onto Stack
\par \plain\f2\b\fs20         Usage:  PUSHF
\par                 PUSHFD  (\cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: None
\par         Transfers the Flags Register onto the stack.  PUSHF saves a \cf1 16\plain\f2\b\fs20  bit
\par         value while PUSHFD saves a \cf1 32\plain\f2\b\fs20  bit value.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none            \cf1 10\plain\f2\b\fs20 /\cf1 14\plain\f2\b\fs20    \cf1 3\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 1
\par \pard \plain\f2\b\fs20         none  (PM)        -     -     \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 9C\plain\f2\b\fs20  PUSHF Push lower \cf1 16\plain\f2\b\fs20  bits of EFLAGS
\par         \cf3 9C\plain\f2\b\fs20  PUSHFD Push EFLAGS
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:005e}
{\up $}{\footnote\pard\plain{\up $} RCL}
{\up #}{\footnote\pard\plain{\up #} RCL}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} RCL}

\par 
\par \pard 
\par \f2\b\cf1 RCL \cf2 - Rotate Through Carry Left
\par \plain\f2\b\fs20         Usage:  RCL     dest,count
\par         Modifies flags: CF OF
\par            .-.     .---------------.
\par         .--|C|<----|\cf1 7\plain\f2\b\fs20  <---------- \cf1 0\plain\f2\b\fs20 |<-.
\par         |  '-'     '---------------'  |
\par         '-----------------------------'
\par         Rotates the bits in the destination to the left "count" times with
\par         all data pushed out the left side re-entering on the right.  The
\par         Carry Flag holds the last bit rotated out.
\par \pard                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,\cf1 1\plain\f2\b\fs20              \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 9\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 2
\par \plain\f2\b\fs20         mem,\cf1 1\plain\f2\b\fs20            \cf1 15\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 10\plain\f2\b\fs20     \cf1 4\plain\f2\b\fs20            \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 23\plain\f2\b\fs20 +EA)
\par         reg,CL           \cf1 8\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 n  \cf1 5\plain\f2\b\fs20 +n    \cf1 9\plain\f2\b\fs20     \cf1 8\plain\f2\b\fs20 -\cf1 30\plain\f2\b\fs20           \cf1 2
\par \pard \plain\f2\b\fs20         mem,CL        \cf1 20\plain\f2\b\fs20 +EA+\cf1 4\plain\f2\b\fs20 n \cf1 8\plain\f2\b\fs20 +n    \cf1 10\plain\f2\b\fs20    \cf1 9\plain\f2\b\fs20 -\cf1 31\plain\f2\b\fs20          \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 28\plain\f2\b\fs20 +EA+\cf1 4\plain\f2\b\fs20 n)
\par         reg,immed\cf1 8\plain\f2\b\fs20         -    \cf1 5\plain\f2\b\fs20 +n     \cf1 9\plain\f2\b\fs20    \cf1 8\plain\f2\b\fs20 -\cf1 30\plain\f2\b\fs20           \cf1 3
\par \plain\f2\b\fs20         mem,immed\cf1 8\plain\f2\b\fs20         -    \cf1 8\plain\f2\b\fs20 +n    \cf1 10\plain\f2\b\fs20    \cf1 9\plain\f2\b\fs20 -\cf1 31\plain\f2\b\fs20          \cf1 3\plain\f2\b\fs20 -\cf1 5
\par \plain\fs20 
\par \f2\b         \cf3 D0\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  RCL r/m\cf1 8\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Rotate \cf1 9\plain\f2\b\fs20  bits (CF, r/m\cf1 8\plain\f2\b\fs20 ) left once
\par \pard         \cf3 D2\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  RCL r/m\cf1 8\plain\f2\b\fs20 ,CL Rotate \cf1 9\plain\f2\b\fs20  bits (CF, r/m\cf1 8\plain\f2\b\fs20 ) left CL times
\par         \cf3 C0\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  ib RCL r/m\cf1 8\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Rotate \cf1 9\plain\f2\b\fs20  bits (CF, r/m\cf1 8\plain\f2\b\fs20 ) left imm\cf1 8\plain\f2\b\fs20  times
\par         \cf3 D1\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  RCL r/m\cf1 16\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Rotate \cf1 17\plain\f2\b\fs20  bits (CF, r/m\cf1 16\plain\f2\b\fs20 ) left once
\par         \cf3 D3\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  RCL r/m\cf1 16\plain\f2\b\fs20 ,CL Rotate \cf1 17\plain\f2\b\fs20  bits (CF, r/m\cf1 16\plain\f2\b\fs20 ) left CL times
\par         \cf3 C1\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  ib RCL r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Rotate \cf1 17\plain\f2\b\fs20  bits (CF, r/m\cf1 16\plain\f2\b\fs20 ) left imm\cf1 8\plain\f2\b\fs20  times
\par \pard         \cf3 D1\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  RCL r/m\cf1 32\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Rotate \cf1 33\plain\f2\b\fs20  bits (CF, r/m\cf1 32\plain\f2\b\fs20 ) left once
\par         \cf3 D3\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  RCL r/m\cf1 32\plain\f2\b\fs20 ,CL Rotate \cf1 33\plain\f2\b\fs20  bits (CF, r/m\cf1 32\plain\f2\b\fs20 ) left CL times
\par         \cf3 C1\plain\f2\b\fs20  /\cf1 2\plain\f2\b\fs20  ib RCL r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Rotate \cf1 33\plain\f2\b\fs20  bits (CF, r/m\cf1 32\plain\f2\b\fs20 ) left imm\cf1 8\plain\f2\b\fs20  times
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:005f}
{\up $}{\footnote\pard\plain{\up $} RCR}
{\up #}{\footnote\pard\plain{\up #} RCR}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} RCR}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 RCR \cf2 - Rotate Through Carry Right
\par \plain\f2\b\fs20         Usage:  RCR     dest,count
\par         Modifies flags: CF OF
\par            .---------------.     .-.
\par         .->|\cf1 7\plain\f2\b\fs20  ----------> \cf1 0\plain\f2\b\fs20 |---->|C|--.
\par         |  '---------------'     '-'  |
\par         '-----------------------------'
\par         Rotates the bits in the destination to the right "count" times with
\par         all data pushed out the right side re-entering on the left.  The
\par         Carry Flag holds the last bit rotated out.
\par \pard                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,\cf1 1\plain\f2\b\fs20              \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 9\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 2
\par \plain\f2\b\fs20         mem,\cf1 1\plain\f2\b\fs20            \cf1 15\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 10\plain\f2\b\fs20     \cf1 4\plain\f2\b\fs20            \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20    (W\cf1 88\plain\f2\b\fs20 =\cf1 23\plain\f2\b\fs20 +EA)
\par         reg,CL           \cf1 8\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 n  \cf1 5\plain\f2\b\fs20 +n    \cf1 9\plain\f2\b\fs20     \cf1 8\plain\f2\b\fs20 -\cf1 30\plain\f2\b\fs20           \cf1 2
\par \pard \plain\f2\b\fs20         mem,CL        \cf1 20\plain\f2\b\fs20 +EA+\cf1 4\plain\f2\b\fs20 n \cf1 8\plain\f2\b\fs20 +n    \cf1 10\plain\f2\b\fs20    \cf1 9\plain\f2\b\fs20 -\cf1 31\plain\f2\b\fs20          \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20    (W\cf1 88\plain\f2\b\fs20 =\cf1 28\plain\f2\b\fs20 +EA+\cf1 4\plain\f2\b\fs20 n)
\par         reg,immed\cf1 8\plain\f2\b\fs20         -    \cf1 5\plain\f2\b\fs20 +n    \cf1 9\plain\f2\b\fs20     \cf1 8\plain\f2\b\fs20 -\cf1 30\plain\f2\b\fs20           \cf1 3
\par \plain\f2\b\fs20         mem,immed\cf1 8\plain\f2\b\fs20         -    \cf1 8\plain\f2\b\fs20 +n    \cf1 10\plain\f2\b\fs20    \cf1 9\plain\f2\b\fs20 -\cf1 31\plain\f2\b\fs20          \cf1 3\plain\f2\b\fs20 -\cf1 5
\par \plain\fs20 
\par \f2\b         \cf3 D0\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  RCR r/m\cf1 8\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Rotate \cf1 9\plain\f2\b\fs20  bits (CF, r/m\cf1 8\plain\f2\b\fs20 ) right once
\par \pard         \cf3 D2\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  RCR r/m\cf1 8\plain\f2\b\fs20 ,CL Rotate \cf1 9\plain\f2\b\fs20  bits (CF, r/m\cf1 8\plain\f2\b\fs20 ) right CL times
\par         \cf3 C0\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  ib RCR r/m\cf1 8\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Rotate \cf1 9\plain\f2\b\fs20  bits (CF, r/m\cf1 8\plain\f2\b\fs20 ) right imm\cf1 8\plain\f2\b\fs20  times
\par         \cf3 D1\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  RCR r/m\cf1 16\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Rotate \cf1 17\plain\f2\b\fs20  bits (CF, r/m\cf1 16\plain\f2\b\fs20 ) right once
\par         \cf3 D3\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  RCR r/m\cf1 16\plain\f2\b\fs20 ,CL Rotate \cf1 17\plain\f2\b\fs20  bits (CF, r/m\cf1 16\plain\f2\b\fs20 ) right CL times
\par         \cf3 C1\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  ib RCR r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Rotate \cf1 17\plain\f2\b\fs20  bits (CF, r/m\cf1 16\plain\f2\b\fs20 ) right imm\cf1 8\plain\f2\b\fs20  times
\par \pard        \cf3  D1\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  RCR r/m\cf1 32\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Rotate \cf1 33\plain\f2\b\fs20  bits (CF, r/m\cf1 32\plain\f2\b\fs20 ) right once
\par         \cf3 D3\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  RCR r/m\cf1 32\plain\f2\b\fs20 ,CL Rotate \cf1 33\plain\f2\b\fs20  bits (CF, r/m\cf1 32\plain\f2\b\fs20 ) right CL times
\par         \cf3 C1\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  ib RCR r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Rotate \cf1 33\plain\f2\b\fs20  bits (CF, r/m\cf1 32\plain\f2\b\fs20 ) right imm\cf1 8\plain\f2\b\fs20  times
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0060}
{\up $}{\footnote\pard\plain{\up $} REP}
{\up #}{\footnote\pard\plain{\up #} REP}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} REP}

\par 
\par \pard 
\par \f2\b\cf1 REP \cf2 - Repeat String Operation
\par \plain\f2\b\fs20         Usage:  REP
\par         Modifies flags: None
\par         Repeats execution of string instructions while CX != \cf1 0\plain\f2\b\fs20 .  After
\par         each string operation, CX is decremented and the Zero Flag is
\par         tested.  The combination of a repeat prefix and a segment override
\par         on CPU's before the \cf1 386\plain\f2\b\fs20  may result in errors if an interrupt occurs
\par         before CX=\cf1 0\plain\f2\b\fs20 .  The following code shows code that is susceptible to
\par \pard         this and how to avoid it:
\par          again:  rep movs  byte ptr ES:[DI],ES:[SI]   ; vulnerable instr.
\par                      jcxz  next              ; continue if REP successful
\par                      loop  again             ; interrupt goofed count
\par          next:
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1
\par \pard \plain\fs20 
\par \f2\b         \cf3 F3 6C\plain\f2\b\fs20  REP INS r/m\cf1 8\plain\f2\b\fs20 , DX Input (E)CX bytes from port DX into ES:[(E)DI]
\par         \cf3 F3 6D\plain\f2\b\fs20  REP INS r/m\cf1 16\plain\f2\b\fs20 ,DX Input (E)CX words from port DX into ES:[(E)DI]
\par         \cf3 F3 6D\plain\f2\b\fs20  REP INS r/m\cf1 32\plain\f2\b\fs20 ,DX Input (E)CX doublewords from port DX into ES:[(E)DI]
\par         \cf3 F3 A4\plain\f2\b\fs20  REP MOVS m\cf1 8\plain\f2\b\fs20 ,m\cf1 8\plain\f2\b\fs20  Move (E)CX bytes from DS:[(E)SI] to ES:[(E)DI]
\par        \cf3  F3 A5\plain\f2\b\fs20  REP MOVS m\cf1 16\plain\f2\b\fs20 ,m\cf1 16\plain\f2\b\fs20  Move (E)CX words from DS:[(E)SI] to ES:[(E)DI]
\par \pard        \cf3  F3 A5\plain\f2\b\fs20  REP MOVS m\cf1 32\plain\f2\b\fs20 ,m\cf1 32\plain\f2\b\fs20  Move (E)CX doublewords from DS:[(E)SI] to ES:[(E)DI]
\par         \cf3 F3 6E\plain\f2\b\fs20  REP OUTS DX, r/m\cf1 8\plain\f2\b\fs20  Output (E)CX bytes from DS:[(E)SI] to port DX
\par         \cf3 F3 6F\plain\f2\b\fs20  REP OUTS DX, r/m\cf1 16\plain\f2\b\fs20  Output (E)CX words from DS:[(E)SI] to port DX
\par         \cf3 F3 6F\plain\f2\b\fs20  REP OUTS DX, r/m\cf1 32\plain\f2\b\fs20  Output (E)CX doublewords from DS:[(E)SI] to port DX
\par         \cf3 F3 AC\plain\f2\b\fs20  REP LODS AL Load (E)CX bytes from DS:[(E)SI] to AL
\par         \cf3 F3 AD\plain\f2\b\fs20  REP LODS AX Load (E)CX words from DS:[(E)SI] to AX
\par \pard         \cf3 F3 AD\plain\f2\b\fs20  REP LODS EAX Load (E)CX doublewords from DS:[(E)SI] to EAX
\par         \cf3 F3 AA\plain\f2\b\fs20  REP STOS m\cf1 8\plain\f2\b\fs20  Fill (E)CX bytes at ES:[(E)DI] with AL
\par         \cf3 F3 AB\plain\f2\b\fs20  REP STOS m\cf1 16\plain\f2\b\fs20  Fill (E)CX words at ES:[(E)DI] with AX
\par         \cf3 F3 AB\plain\f2\b\fs20  REP STOS m\cf1 32\plain\f2\b\fs20  Fill (E)CX doublewords at ES:[(E)DI] with EAX
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0061}
{\up $}{\footnote\pard\plain{\up $} REPEREPZ}
{\up #}{\footnote\pard\plain{\up #} REPEREPZ}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} REPE/REPZ}
\plain\fs20 
\par 
\par \pard \f2\b\cf1 REPE/REPZ\cf2  - Repeat Equal / Repeat Zero
\par \plain\f2\b\fs20         Usage:  REPE
\par                 REPZ
\par         Modifies flags: None
\par         Repeats execution of string instructions while CX != \cf1 0\plain\f2\b\fs20  and the Zero
\par         Flag is set.  CX is decremented and the Zero Flag tested after
\par         each string operation.   The combination of a repeat prefix and a
\par         segment override on processors other than the \cf1 386\plain\f2\b\fs20  may result in
\par         errors if an interrupt occurs before CX=\cf1 0\plain\f2\b\fs20 .
\par \pard                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 F3 A6\plain\f2\b\fs20  REPE CMPS m\cf1 8\plain\f2\b\fs20 ,m\cf1 8\plain\f2\b\fs20  Find nonmatching bytes in ES:[(E)DI] and DS:[(E)SI]
\par         \cf3 F3 A7\plain\f2\b\fs20  REPE CMPS m\cf1 16\plain\f2\b\fs20 ,m\cf1 16\plain\f2\b\fs20  Find nonmatching words in ES:[(E)DI] and DS:[(E)SI]
\par         \cf3 F3 A7\plain\f2\b\fs20  REPE CMPS m\cf1 32\plain\f2\b\fs20 ,m\cf1 32\plain\f2\b\fs20  Find nonmatching doublewords in ES:[(E)DI] and DS:[(E)SI]
\par \pard         \cf3 F3 AE\plain\f2\b\fs20  REPE SCAS m\cf1 8\plain\f2\b\fs20  Find non-AL byte starting at ES:[(E)DI]
\par         \cf3 F3 AF\plain\f2\b\fs20  REPE SCAS m\cf1 16\plain\f2\b\fs20  Find non-AX word starting at ES:[(E)DI]
\par         \cf3 F3 AF\plain\f2\b\fs20  REPE SCAS m\cf1 32\plain\f2\b\fs20  Find non-EAX doubleword starting at ES:[(E)DI]
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0062}
{\up $}{\footnote\pard\plain{\up $} REPNEREPNZ}
{\up #}{\footnote\pard\plain{\up #} REPNEREPNZ}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} REPNE/REPNZ}

\par 
\par \pard \f2\b\cf1 REPNE/REPNZ\cf2  - Repeat Not Equal / Repeat Not Zero
\par \plain\f2\b\fs20         Usage:  REPNE
\par                 REPNZ
\par         Modifies flags: None
\par         Repeats execution of string instructions while CX != \cf1 0\plain\f2\b\fs20  and the Zero
\par         Flag is clear.   CX is decremented and the Zero Flag tested after
\par         each string operation.   The combination of a repeat prefix and a
\par         segment override on processors other than the \cf1 386\plain\f2\b\fs20  may result in
\par         errors if an interrupt occurs before CX=\cf1 0\plain\f2\b\fs20 .
\par \pard                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 F2 A6\plain\f2\b\fs20  REPNE CMPS m\cf1 8\plain\f2\b\fs20 ,m\cf1 8\plain\f2\b\fs20  Find matching bytes in ES:[(E)DI] and DS:[(E)SI]
\par         \cf3 F2 A7\plain\f2\b\fs20  REPNE CMPS m\cf1 16\plain\f2\b\fs20 ,m\cf1 16\plain\f2\b\fs20  Find matching words in ES:[(E)DI] and DS:[(E)SI]
\par         \cf3 F2 A7\plain\f2\b\fs20  REPNE CMPS m\cf1 32\plain\f2\b\fs20 ,m\cf1 32\plain\f2\b\fs20  Find matching doublewords in ES:[(E)DI] and DS:[(E)SI]
\par \pard         \cf3 F2 AE\plain\f2\b\fs20  REPNE SCAS m\cf1 8\plain\f2\b\fs20  Find AL, starting at ES:[(E)DI]
\par         \cf3 F2 AF\plain\f2\b\fs20  REPNE SCAS m\cf1 16\plain\f2\b\fs20  Find AX, starting at ES:[(E)DI]
\par         \cf3 F2 AF\plain\f2\b\fs20  REPNE SCAS m\cf1 32\plain\f2\b\fs20  Find EAX, starting at ES:[(E)DI]
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0063}
{\up $}{\footnote\pard\plain{\up $} RETRETF}
{\up #}{\footnote\pard\plain{\up #} RETRETF}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} RET/RETF}

\par 
\par \pard \f2\b\cf1 RET/RETF\cf2  - Return From Procedure
\par \plain\f2\b\fs20         Usage:  RET     nBytes
\par                 RETF    nBytes
\par                 RETN    nBytes
\par         Modifies flags: None
\par         Transfers control from a procedure back to the instruction address
\par         saved on the stack.  "n bytes" is an optional number of bytes to
\par         release.  Far returns pop the IP followed by the CS, while near
\par         returns pop only the IP register.
\par                                  Clocks                 Size
\par \pard         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20     \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20          Bytes
\par         retn            \cf1 16\plain\f2\b\fs20 /\cf1 20\plain\f2\b\fs20   \cf1 11\plain\f2\b\fs20 +m  \cf1 10\plain\f2\b\fs20 +m    \cf1 5\plain\f2\b\fs20             \cf1 1
\par \plain\f2\b\fs20         retn immed      \cf1 20\plain\f2\b\fs20 /\cf1 24\plain\f2\b\fs20   \cf1 11\plain\f2\b\fs20 +m  \cf1 10\plain\f2\b\fs20 +m    \cf1 5\plain\f2\b\fs20             \cf1 3
\par \plain\f2\b\fs20         retf            \cf1 26\plain\f2\b\fs20 /\cf1 34\plain\f2\b\fs20   \cf1 15\plain\f2\b\fs20 +m  \cf1 18\plain\f2\b\fs20 +m    \cf1 13\plain\f2\b\fs20            \cf1 1
\par \plain\f2\b\fs20         retf (PM, same priv.)   -    \cf1 32\plain\f2\b\fs20 +m    \cf1 18\plain\f2\b\fs20            \cf1 1
\par \pard \plain\f2\b\fs20         retf (PM, lesser priv.) -      \cf1 68\plain\f2\b\fs20     \cf1 33\plain\f2\b\fs20            \cf1 1
\par \plain\f2\b\fs20         retf immed      \cf1 25\plain\f2\b\fs20 /\cf1 33\plain\f2\b\fs20   \cf1 15\plain\f2\b\fs20 +m  \cf1 18\plain\f2\b\fs20 +m    \cf1 14\plain\f2\b\fs20            \cf1 3
\par \plain\f2\b\fs20         retf immed (PM, same priv.)  \cf1 32\plain\f2\b\fs20 +m    \cf1 17\plain\f2\b\fs20            \cf1 1
\par \plain\f2\b\fs20         retf immed (PM, lesser priv.)  \cf1 68\plain\f2\b\fs20     \cf1 33\plain\f2\b\fs20            \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 C3\plain\f2\b\fs20  RET Near return to calling procedure
\par         \cf3 CB\plain\f2\b\fs20  RET Far return to calling procedure
\par \pard         \cf3 C2\plain\f2\b\fs20  iw RET imm\cf1 16\plain\f2\b\fs20  Near return to calling procedure and pop imm\cf1 16\plain\f2\b\fs20  bytes from stack
\par         \cf3 CA\plain\f2\b\fs20  iw RET imm\cf1 16\plain\f2\b\fs20  Far return to calling procedure and pop imm\cf1 16\plain\f2\b\fs20  bytes from stack
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0064}
{\up $}{\footnote\pard\plain{\up $} ROL}
{\up #}{\footnote\pard\plain{\up #} ROL}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} ROL}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 ROL \cf2 - Rotate Left
\par \plain\f2\b\fs20         Usage:  ROL     dest,count
\par         Modifies flags: CF OF
\par         .-.     .---------------.
\par         |C|<-.--|\cf1 7\plain\f2\b\fs20  <---------- \cf1 0\plain\f2\b\fs20 |<-.
\par         '-'  |  '---------------'  |
\par              '---------------------'
\par         Rotates the bits in the destination to the left "count" times with
\par         all data pushed out the left side re-entering on the right.  The
\par         Carry Flag will contain the value of the last bit rotated out.
\par \pard                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,\cf1 1\plain\f2\b\fs20              \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20         mem,\cf1 1\plain\f2\b\fs20            \cf1 15\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 23\plain\f2\b\fs20 +EA)
\par         reg,CL           \cf1 8\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 n  \cf1 5\plain\f2\b\fs20 +n    \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 2
\par \pard \plain\f2\b\fs20         mem,CL        \cf1 20\plain\f2\b\fs20 +EA+\cf1 4\plain\f2\b\fs20 n \cf1 8\plain\f2\b\fs20 +n    \cf1 7\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 28\plain\f2\b\fs20 +EA+\cf1 4\plain\f2\b\fs20 n)
\par         reg,immed\cf1 8\plain\f2\b\fs20         -    \cf1 5\plain\f2\b\fs20 +n    \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         mem,immed\cf1 8\plain\f2\b\fs20         -    \cf1 8\plain\f2\b\fs20 +n    \cf1 7\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 5
\par \plain\fs20 
\par \f2\b         \cf3 D0\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  ROL r/m\cf1 8\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Rotate \cf1 8\plain\f2\b\fs20  bits r/m\cf1 8\plain\f2\b\fs20  left once
\par \pard         \cf3 D2\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  ROL r/m\cf1 8\plain\f2\b\fs20 ,CL Rotate \cf1 8\plain\f2\b\fs20  bits r/m\cf1 8\plain\f2\b\fs20  left CL times
\par         \cf3 C0\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  ib ROL r/m\cf1 8\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Rotate \cf1 8\plain\f2\b\fs20  bits r/m\cf1 8\plain\f2\b\fs20  left imm\cf1 8\plain\f2\b\fs20  times
\par         \cf3 D1\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  ROL r/m\cf1 16\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Rotate \cf1 16\plain\f2\b\fs20  bits r/m\cf1 16\plain\f2\b\fs20  left once
\par        \cf3  D3\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  ROL r/m\cf1 16\plain\f2\b\fs20 ,CL Rotate \cf1 16\plain\f2\b\fs20  bits r/m\cf1 16\plain\f2\b\fs20  left CL times
\par         \cf3 C1\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  ib ROL r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Rotate \cf1 16\plain\f2\b\fs20  bits r/m\cf1 16\plain\f2\b\fs20  left imm\cf1 8\plain\f2\b\fs20  times
\par \pard        \cf3  D1\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  ROL r/m\cf1 32\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Rotate \cf1 32\plain\f2\b\fs20  bits r/m\cf1 32\plain\f2\b\fs20  left once
\par         \cf3 D3\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  ROL r/m\cf1 32\plain\f2\b\fs20 ,CL Rotate \cf1 32\plain\f2\b\fs20  bits r/m\cf1 32\plain\f2\b\fs20  left CL times
\par         \cf3 C1\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  ib ROL r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Rotate \cf1 32\plain\f2\b\fs20  bits r/m\cf1 32\plain\f2\b\fs20  left imm\cf1 8\plain\f2\b\fs20  times
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0065}
{\up $}{\footnote\pard\plain{\up $} ROR}
{\up #}{\footnote\pard\plain{\up #} ROR}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} ROR}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 ROR \cf2 - Rotate Right
\par \plain\f2\b\fs20         Usage:  ROR     dest,count
\par         Modifies flags: CF OF
\par            .---------------.     .-.
\par         .->|\cf1 7\plain\f2\b\fs20  ----------> \cf1 0\plain\f2\b\fs20 |--.->|C|   
\par         |  '---------------'  |  '-'   
\par         '---------------------'        
\par         Rotates the bits in the destination to the right "count" times with
\par         all data pushed out the right side re-entering on the left.  The
\par         Carry Flag will contain the value of the last bit rotated out.
\par \pard                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,\cf1 1\plain\f2\b\fs20              \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20         mem,\cf1 1\plain\f2\b\fs20            \cf1 15\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 23\plain\f2\b\fs20 +EA)
\par         reg,CL           \cf1 8\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 n  \cf1 5\plain\f2\b\fs20 +n    \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 2
\par \pard \plain\f2\b\fs20         mem,CL        \cf1 20\plain\f2\b\fs20 +EA+\cf1 4\plain\f2\b\fs20 n \cf1 8\plain\f2\b\fs20 +n    \cf1 7\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 28\plain\f2\b\fs20 +EA+\cf1 4\plain\f2\b\fs20 n)
\par         reg,immed\cf1 8\plain\f2\b\fs20         -    \cf1 5\plain\f2\b\fs20 +n    \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         mem,immed\cf1 8\plain\f2\b\fs20         -    \cf1 8\plain\f2\b\fs20 +n    \cf1 7\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 5
\par \plain\fs20 
\par \f2\b         \cf3 D0\plain\f2\b\fs20  /\cf1 1\plain\f2\b\fs20  ROR r/m\cf1 8\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Rotate \cf1 8\plain\f2\b\fs20  bits r/m\cf1 8\plain\f2\b\fs20  right once
\par \pard         \cf3 D2\plain\f2\b\fs20  /\cf1 1\plain\f2\b\fs20  ROR r/m\cf1 8\plain\f2\b\fs20 ,CL Rotate \cf1 8\plain\f2\b\fs20  bits r/m\cf1 8\plain\f2\b\fs20  right CL times
\par         \cf3 C0\plain\f2\b\fs20  /\cf1 1\plain\f2\b\fs20  ib ROR r/m\cf1 8\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Rotate \cf1 8\plain\f2\b\fs20  bits r/m\cf1 16\plain\f2\b\fs20  right imm\cf1 8\plain\f2\b\fs20  times
\par         \cf3 D1\plain\f2\b\fs20  /\cf1 1\plain\f2\b\fs20  ROR r/m\cf1 16\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Rotate \cf1 16\plain\f2\b\fs20  bits r/m\cf1 16\plain\f2\b\fs20  right once
\par        \cf3  D3\plain\f2\b\fs20  /\cf1 1\plain\f2\b\fs20  ROR r/m\cf1 16\plain\f2\b\fs20 ,CL Rotate \cf1 16\plain\f2\b\fs20  bits r/m\cf1 16\plain\f2\b\fs20  right CL times
\par         \cf3 C1\plain\f2\b\fs20  /\cf1 1\plain\f2\b\fs20  ib ROR r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Rotate \cf1 16\plain\f2\b\fs20  bits r/m\cf1 16\plain\f2\b\fs20  right imm\cf1 8\plain\f2\b\fs20  times
\par \pard         \cf3 D1\plain\f2\b\fs20  /\cf1 1\plain\f2\b\fs20  ROR r/m\cf1 32\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Rotate \cf1 32\plain\f2\b\fs20  bits r/m\cf1 32\plain\f2\b\fs20  right once
\par         \cf3 D3\plain\f2\b\fs20  /\cf1 1\plain\f2\b\fs20  ROR r/m\cf1 32\plain\f2\b\fs20 ,CL Rotate \cf1 32\plain\f2\b\fs20  bits r/m\cf1 32\plain\f2\b\fs20  right CL times
\par        \cf3  C1\plain\f2\b\fs20  /\cf1 1\plain\f2\b\fs20  ib ROR r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Rotate \cf1 32\plain\f2\b\fs20  bits r/m\cf1 32\plain\f2\b\fs20  right imm\cf1 8\plain\f2\b\fs20  times
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0066}
{\up $}{\footnote\pard\plain{\up $} SAHF}
{\up #}{\footnote\pard\plain{\up #} SAHF}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SAHF}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 SAHF \cf2 - Store AH Register into FLAGS
\par \plain\f2\b\fs20         Usage:  SAHF
\par         Modifies flags: AF CF PF SF ZF
\par         Transfers bits \cf1 0\plain\f2\b\fs20 -\cf1 7\plain\f2\b\fs20  of AH into the Flags Register.  This includes
\par         AF, CF, PF, SF and ZF.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              \cf1 4\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20              \cf1 1
\par \pard \plain\fs20 
\par \f2\b         \cf3 9E\plain\f2\b\fs20  SAHF \cf1 2\plain\f2\b\fs20  Loads SF, ZF, AF, PF, and CF from AH into EFLAGS register
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0067}
{\up $}{\footnote\pard\plain{\up $} SALSHL}
{\up #}{\footnote\pard\plain{\up #} SALSHL}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SAL/SHL}

\par 
\par \pard \f2\b\cf1 SAL/SHL\cf2  - Shift Arithmetic Left / Shift Logical Left
\par \plain\f2\b\fs20         Usage:  SAL     dest,count
\par                 SHL     dest,count
\par         Modifies flags: CF OF PF SF ZF (AF undefined)
\par         .-.     .---------------.     .-.
\par         |C|<----|\cf1 7\plain\f2\b\fs20  <---------- \cf1 0\plain\f2\b\fs20 |<----|\cf1 0\plain\f2\b\fs20 |
\par         '-'     '---------------'     '-'
\par         Shifts the destination left by "count" bits with zeroes shifted
\par         in on right.  The Carry Flag contains the last bit shifted out.
\par \pard                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,\cf1 1\plain\f2\b\fs20              \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 2
\par \plain\f2\b\fs20         mem,\cf1 1\plain\f2\b\fs20            \cf1 15\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20            \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 23\plain\f2\b\fs20 +EA)
\par         reg,CL           \cf1 8\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 n  \cf1 5\plain\f2\b\fs20 +n    \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 2
\par \pard \plain\f2\b\fs20         mem,CL        \cf1 20\plain\f2\b\fs20 +EA+\cf1 4\plain\f2\b\fs20 n \cf1 8\plain\f2\b\fs20 +n    \cf1 7\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20            \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 28\plain\f2\b\fs20 +EA+\cf1 4\plain\f2\b\fs20 n)
\par         reg,immed\cf1 8\plain\f2\b\fs20         -    \cf1 5\plain\f2\b\fs20 +n    \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20             \cf1 3
\par \plain\f2\b\fs20         mem,immed\cf1 8\plain\f2\b\fs20         -    \cf1 8\plain\f2\b\fs20 +n    \cf1 7\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20            \cf1 3\plain\f2\b\fs20 -\cf1 5
\par \plain\fs20 
\par \f2\b         \cf3 D0\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  SAL r/m\cf1 8\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Multiply r/m\cf1 8\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , once
\par        \cf3  D2\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  SAL r/m\cf1 8\plain\f2\b\fs20 ,CL Multiply r/m\cf1 8\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , CL times
\par \pard         \cf3 C0\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  ib SAL r/m\cf1 8\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Multiply r/m\cf1 8\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , imm\cf1 8\plain\f2\b\fs20  times
\par        \cf3  D1\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  SAL r/m\cf1 16\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Multiply r/m\cf1 16\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , once
\par         \cf3 D3\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  SAL r/m\cf1 16\plain\f2\b\fs20 ,CL Multiply r/m\cf1 16\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , CL times
\par         \cf3 C1\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  ib SAL r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Multiply r/m\cf1 16\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , imm\cf1 8\plain\f2\b\fs20  times
\par         \cf3 D1\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  SAL r/m\cf1 32\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Multiply r/m\cf1 32\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , once
\par \pard        \cf3  D3\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  SAL r/m\cf1 32\plain\f2\b\fs20 ,CL Multiply r/m\cf1 32\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , CL times
\par         \cf3 C1\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  ib SAL r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Multiply r/m\cf1 32\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , imm\cf1 8\plain\f2\b\fs20  times
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0068}
{\up $}{\footnote\pard\plain{\up $} SAR}
{\up #}{\footnote\pard\plain{\up #} SAR}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SAR}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 SAR \cf2 - Shift Arithmetic Right
\par \plain\f2\b\fs20         Usage:  SAR     dest,count
\par         Modifies flags: CF OF PF SF ZF (AF undefined)
\par            .---------------.     .-.
\par         .--|\cf1 7\plain\f2\b\fs20  ----------> \cf1 0\plain\f2\b\fs20 |---->|C|
\par         |  '---------------'     '-'
\par         '---^
\par         Shifts the destination right by "count" bits with the current sign
\par         bit replicated in the leftmost bit.  The Carry Flag contains the
\par         last bit shifted out.
\par                                  Clocks                 Size
\par \pard         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,\cf1 1\plain\f2\b\fs20              \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20         mem,\cf1 1\plain\f2\b\fs20            \cf1 15\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 23\plain\f2\b\fs20 +EA)
\par         reg,CL           \cf1 8\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 n  \cf1 5\plain\f2\b\fs20 +n    \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20         mem,CL        \cf1 20\plain\f2\b\fs20 +EA+\cf1 4\plain\f2\b\fs20 n \cf1 8\plain\f2\b\fs20 +n    \cf1 7\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 28\plain\f2\b\fs20 +EA+\cf1 4\plain\f2\b\fs20 n)
\par \pard         reg,immed\cf1 8\plain\f2\b\fs20         -    \cf1 5\plain\f2\b\fs20 +n    \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         mem,immed\cf1 8\plain\f2\b\fs20         -    \cf1 8\plain\f2\b\fs20 +n    \cf1 7\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 5
\par \plain\fs20 
\par \f2\b         \cf3 D0\plain\f2\b\fs20  /\cf1 7\plain\f2\b\fs20  SAR r/m\cf1 8\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Signed divide* r/m\cf1 8\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , once
\par         \cf3 D2\plain\f2\b\fs20  /\cf1 7\plain\f2\b\fs20  SAR r/m\cf1 8\plain\f2\b\fs20 ,CL Signed divide* r/m\cf1 8\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , CL times
\par         \cf3 C0\plain\f2\b\fs20  /\cf1 7\plain\f2\b\fs20  ib SAR r/m\cf1 8\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Signed divide* r/m\cf1 8\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , imm\cf1 8\plain\f2\b\fs20  times
\par \pard         \cf3 D1\plain\f2\b\fs20  /\cf1 7\plain\f2\b\fs20  SAR r/m\cf1 16\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Signed divide* r/m\cf1 16\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , once
\par         \cf3 D3\plain\f2\b\fs20  /\cf1 7\plain\f2\b\fs20  SAR r/m\cf1 16\plain\f2\b\fs20 ,CL Signed divide* r/m\cf1 16\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , CL times
\par         \cf3 C1\plain\f2\b\fs20  /\cf1 7\plain\f2\b\fs20  ib SAR r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Signed divide* r/m\cf1 16\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , imm\cf1 8\plain\f2\b\fs20  times
\par        \cf3  D1\plain\f2\b\fs20  /\cf1 7\plain\f2\b\fs20  SAR r/m\cf1 32\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Signed divide* r/m\cf1 32\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , once
\par        \cf3  D3\plain\f2\b\fs20  /\cf1 7\plain\f2\b\fs20  SAR r/m\cf1 32\plain\f2\b\fs20 ,CL Signed divide* r/m\cf1 32\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , CL times
\par \pard         \cf3 C1\plain\f2\b\fs20  /\cf1 7\plain\f2\b\fs20  ib SAR r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Signed divide* r/m\cf1 32\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , imm\cf1 8\plain\f2\b\fs20  times
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0069}
{\up $}{\footnote\pard\plain{\up $} SBB}
{\up #}{\footnote\pard\plain{\up #} SBB}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SBB}

\par 
\par \pard 
\par \f2\b\cf1 SBB \cf2 - Subtract with Borrow/Carry
\par \plain\f2\b\fs20         Usage:  SBB     dest,src
\par         Modifies flags: AF CF OF PF SF ZF
\par         Subtracts the source from the destination, and subtracts \cf1 1\plain\f2\b\fs20  extra if
\par         the Carry Flag is set.   Results are returned in "dest".
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,reg           \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 2
\par \pard \plain\f2\b\fs20         mem,reg         \cf1 16\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 24\plain\f2\b\fs20 +EA)
\par         reg,mem          \cf1 9\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 13\plain\f2\b\fs20 +EA)
\par         reg,immed         \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 4
\par \plain\f2\b\fs20         mem,immed       \cf1 17\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 6\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 25\plain\f2\b\fs20 +EA)
\par \pard         accum,immed       \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 1C\plain\f2\b\fs20  ib SBB AL, imm\cf1 8\plain\f2\b\fs20  Subtract with borrow imm\cf1 8\plain\f2\b\fs20  from AL
\par         \cf3 1D\plain\f2\b\fs20  iw SBB AX, imm\cf1 16\plain\f2\b\fs20  Subtract with borrow imm\cf1 16\plain\f2\b\fs20  from AX
\par         \cf3 1D\plain\f2\b\fs20  id SBB EAX, imm\cf1 32\plain\f2\b\fs20  Subtract with borrow imm\cf1 32\plain\f2\b\fs20  from EAX
\par         \cf3 80\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  ib SBB r/m\cf1 8\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Subtract with borrow imm\cf1 8\plain\f2\b\fs20  from r/m\cf1 8
\par \pard \plain\f2\b\fs20         \cf3 81\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  iw SBB r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 16\plain\f2\b\fs20  Subtract with borrow imm\cf1 16\plain\f2\b\fs20  from r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 81\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  id SBB r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 32\plain\f2\b\fs20  Subtract with borrow imm\cf1 32\plain\f2\b\fs20  from r/m\cf1 32
\par \plain\f2\b\fs20         \cf3 83\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  ib SBB r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Subtract with borrow sign-extended imm\cf1 8\plain\f2\b\fs20  from r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 83\plain\f2\b\fs20  /\cf1 3\plain\f2\b\fs20  ib SBB r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Subtract with borrow sign-extended imm\cf1 8\plain\f2\b\fs20  from r/m\cf1 32
\par \pard \plain\f2\b\fs20         \cf3 18\plain\f2\b\fs20  / r SBB r/m\cf1 8\plain\f2\b\fs20 ,r\cf1 8\plain\f2\b\fs20  Subtract with borrow r\cf1 8\plain\f2\b\fs20  from r/m\cf1 8
\par \plain\f2\b\fs20         \cf3 19\plain\f2\b\fs20  / r SBB r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20  Subtract with borrow r\cf1 16\plain\f2\b\fs20  from r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 19\plain\f2\b\fs20  / r SBB r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20  Subtract with borrow r\cf1 32\plain\f2\b\fs20  from r/m\cf1 32
\par \plain\f2\b\fs20         \cf3 1A\plain\f2\b\fs20  / r SBB r\cf1 8\plain\f2\b\fs20 ,r/m\cf1 8\plain\f2\b\fs20  Subtract with borrow r/m\cf1 8\plain\f2\b\fs20  from r\cf1 8
\par \plain\f2\b\fs20         \cf3 1B\plain\f2\b\fs20  / r SBB r\cf1 16\plain\f2\b\fs20 ,r/m\cf1 16\plain\f2\b\fs20  Subtract with borrow r/m\cf1 16\plain\f2\b\fs20  from r\cf1 16
\par \pard \plain\f2\b\fs20         \cf3 1B\plain\f2\b\fs20  / r SBB r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 32\plain\f2\b\fs20  Subtract with borrow r/m\cf1 32\plain\f2\b\fs20  from r\cf1 32
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:006a}
{\up $}{\footnote\pard\plain{\up $} SCAS}
{\up #}{\footnote\pard\plain{\up #} SCAS}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SCAS}

\par 
\par \pard 
\par \f2\b\cf1 SCAS \cf2 - Scan String  (Byte, Word or Doubleword)
\par \plain\f2\b\fs20         Usage:  SCAS    string
\par                 SCASB
\par                 SCASW
\par                 SCASD   (\cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: AF CF OF PF SF ZF
\par         Compares value at ES:DI (even if operand is specified) from the
\par         accumulator and sets the flags similar to a subtraction.  DI is
\par         incremented/decremented based on the instruction format (or
\par         operand size) and the state of the Direction Flag.  Use with REP
\par \pard         prefixes.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         string            \cf1 15\plain\f2\b\fs20     \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20              \cf1 1\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 19\plain\f2\b\fs20 )
\par \plain\fs20 
\par \f2\b         \cf3 AE\plain\f2\b\fs20  SCAS m\cf1 8\plain\f2\b\fs20  Compare AL with byte at ES:(E)DI and set status flags
\par         \cf3 AF\plain\f2\b\fs20  SCAS m\cf1 16\plain\f2\b\fs20  Compare AX with word at ES:(E)DI and set status flags
\par \pard         \cf3 AF\plain\f2\b\fs20  SCAS m\cf1 32\plain\f2\b\fs20  Compare EAX with doubleword at ES(E)DI and set status flags
\par         \cf3 AE\plain\f2\b\fs20  SCASB Compare AL with byte at ES:(E)DI and set status flags
\par         \cf3 AF\plain\f2\b\fs20  SCASW Compare AX with word at ES:(E)DI and set status flags
\par         \cf3 AF\plain\f2\b\fs20  SCASD Compare EAX with doubleword at ES:(E)DI and set status flags
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:006b}
{\up $}{\footnote\pard\plain{\up $} SETAESETNB}
{\up #}{\footnote\pard\plain{\up #} SETAESETNB}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SETAE/SETNB}
\plain\fs20 
\par 
\par \pard \f2\b\cf1 SETAE/SETNB\cf2  - Set if Above or Equal / Set if Not Below (386+)
\par \plain\f2\b\fs20         Usage:  SETAE   dest
\par                 SETNB   dest
\par         (unsigned, \cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: none
\par         Sets the byte in the operand to \cf1 1\plain\f2\b\fs20  if the Carry Flag is clear
\par         otherwise sets the operand to \cf1 0\plain\f2\b\fs20 .
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         reg\cf1 8\plain\f2\b\fs20               -     -     \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20               -     -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 0F 97\plain\f2\b\fs20  SETA r/m\cf1 8\plain\f2\b\fs20  Set byte if above (CF=\cf1 0\plain\f2\b\fs20  and ZF=\cf1 0\plain\f2\b\fs20 )
\par         \cf3 0F 93\plain\f2\b\fs20  SETAE r/m\cf1 8\plain\f2\b\fs20  Set byte if above or equal (CF=\cf1 0\plain\f2\b\fs20 )
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:006c}
{\up $}{\footnote\pard\plain{\up $} SETBSETNAE}
{\up #}{\footnote\pard\plain{\up #} SETBSETNAE}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SETB/SETNAE}

\par 
\par \pard \f2\b\cf1 SETB/SETNAE\cf2  - Set if Below / Set if Not Above or Equal (386+)
\par \plain\f2\b\fs20         Usage:  SETB    dest
\par                 SETNAE  dest
\par         (unsigned, \cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: none
\par         Sets the byte in the operand to \cf1 1\plain\f2\b\fs20  if the Carry Flag is set
\par         otherwise sets the operand to \cf1 0\plain\f2\b\fs20 .
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         reg\cf1 8\plain\f2\b\fs20               -     -     \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20               -     -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 0F 92\plain\f2\b\fs20  SETB r/m\cf1 8\plain\f2\b\fs20  Set byte if below (CF=\cf1 1\plain\f2\b\fs20 )
\par         \cf3 0F 92\plain\f2\b\fs20  SETNAE r/m\cf1 8\plain\f2\b\fs20  Set byte if not above or equal (CF=\cf1 1\plain\f2\b\fs20 )
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:006d}
{\up $}{\footnote\pard\plain{\up $} SETBESETNA}
{\up #}{\footnote\pard\plain{\up #} SETBESETNA}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SETBE/SETNA}
\plain\fs20 
\par 
\par \pard \f2\b\cf1 SETBE/SETNA\cf2  - Set if Below or Equal / Set if Not Above (386+)
\par \plain\f2\b\fs20         Usage:  SETBE   dest
\par                 SETNA   dest
\par         (unsigned, \cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: none
\par         Sets the byte in the operand to \cf1 1\plain\f2\b\fs20  if the Carry Flag or the Zero
\par         Flag is set, otherwise sets the operand to \cf1 0\plain\f2\b\fs20 .
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         reg\cf1 8\plain\f2\b\fs20               -     -     \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20               -     -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 0F 96\plain\f2\b\fs20  SETBE r/m\cf1 8\plain\f2\b\fs20  Set byte if below or equal (CF=\cf1 1\plain\f2\b\fs20  or ZF=\cf1 1\plain\f2\b\fs20 )
\par         \cf3 0F 96\plain\f2\b\fs20  SETNA r/m\cf1 8\plain\f2\b\fs20  Set byte if not above (CF=\cf1 1\plain\f2\b\fs20  or ZF=\cf1 1\plain\f2\b\fs20 )
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:006e}
{\up $}{\footnote\pard\plain{\up $} SETESETZ}
{\up #}{\footnote\pard\plain{\up #} SETESETZ}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SETE/SETZ}

\par 
\par \pard \f2\b\cf1 SETE/SETZ\cf2  - Set if Equal / Set if Zero (386+)
\par \plain\f2\b\fs20         Usage:  SETE    dest
\par                 SETZ    dest
\par         Modifies flags: none
\par         Sets the byte in the operand to \cf1 1\plain\f2\b\fs20  if the Zero Flag is set,
\par         otherwise sets the operand to \cf1 0\plain\f2\b\fs20 .
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 8\plain\f2\b\fs20               -     -     \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 3
\par \pard \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20               -     -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 0F 94\plain\f2\b\fs20  SETE r/m\cf1 8\plain\f2\b\fs20  Set byte if equal (ZF=\cf1 1\plain\f2\b\fs20 )
\par         \cf3 0F 94\plain\f2\b\fs20  SETZ r/m\cf1 8\plain\f2\b\fs20  Set byte if zero (ZF=\cf1 1\plain\f2\b\fs20 )
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:006f}
{\up $}{\footnote\pard\plain{\up $} SETNESETNZ}
{\up #}{\footnote\pard\plain{\up #} SETNESETNZ}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SETNE/SETNZ}

\par 
\par \pard \f2\b\cf1 SETNE/SETNZ\cf2  - Set if Not Equal / Set if Not Zero (386+)
\par \plain\f2\b\fs20         Usage:  SETNE   dest
\par                 SETNZ   dest
\par         Modifies flags: none
\par         Sets the byte in the operand to \cf1 1\plain\f2\b\fs20  if the Zero Flag is clear,
\par         otherwise sets the operand to \cf1 0\plain\f2\b\fs20 .
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 8\plain\f2\b\fs20               -     -     \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 3
\par \pard \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20               -     -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 0F 95\plain\f2\b\fs20  SETNE r/m\cf1 8\plain\f2\b\fs20  Set byte if not equal (ZF=\cf1 0\plain\f2\b\fs20 )
\par         \cf3 0F 95\plain\f2\b\fs20  SETNZ r/m\cf1 8\plain\f2\b\fs20  Set byte if not zero (ZF=\cf1 0\plain\f2\b\fs20 )
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0070}
{\up $}{\footnote\pard\plain{\up $} SETLSETNGE}
{\up #}{\footnote\pard\plain{\up #} SETLSETNGE}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SETL/SETNGE}
\plain\fs20 
\par 
\par \pard \f2\b\cf1 SETL/SETNGE\cf2  - Set if Less / Set if Not Greater or Equal (386+)
\par \plain\f2\b\fs20         Usage:  SETL    dest
\par                 SETNGE  dest
\par         (signed, \cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: none
\par         Sets the byte in the operand to \cf1 1\plain\f2\b\fs20  if the Sign Flag is not equal
\par         to the Overflow Flag, otherwise sets the operand to \cf1 0\plain\f2\b\fs20 .
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         reg\cf1 8\plain\f2\b\fs20               -     -     \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20               -     -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 0F 9C\plain\f2\b\fs20  SETL r/m\cf1 8\plain\f2\b\fs20  Set byte if less (SF<>OF)
\par         \cf3 0F 9C\plain\f2\b\fs20  SETNGE r/m\cf1 8\plain\f2\b\fs20  Set if not greater or equal (SF<>OF)
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0071}
{\up $}{\footnote\pard\plain{\up $} SETGESETNL}
{\up #}{\footnote\pard\plain{\up #} SETGESETNL}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SETGE/SETNL}

\par 
\par \pard \f2\b\cf1 SETGE/SETNL\cf2  - Set if Greater or Equal / Set if Not Less (386+)
\par \plain\f2\b\fs20         Usage:  SETGE   dest
\par                 SETNL   dest
\par         (signed, \cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: none
\par         Sets the byte in the operand to \cf1 1\plain\f2\b\fs20  if the Sign Flag equals the
\par         Overflow Flag, otherwise sets the operand to \cf1 0\plain\f2\b\fs20 .
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         reg\cf1 8\plain\f2\b\fs20               -     -     \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20               -     -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 0F 9D\plain\f2\b\fs20  SETGE r/m\cf1 8\plain\f2\b\fs20  Set byte if greater or equal (SF=OF)
\par         \cf3 0F 9D\plain\f2\b\fs20  SETNL r/m\cf1 8\plain\f2\b\fs20  Set byte if not less (SF=OF)
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0072}
{\up $}{\footnote\pard\plain{\up $} SETLESETNG}
{\up #}{\footnote\pard\plain{\up #} SETLESETNG}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SETLE/SETNG}

\par 
\par \pard \f2\b\cf1 SETLE/SETNG\cf2  - Set if Less or Equal / Set if Not greater or Equal (386+)
\par \plain\f2\b\fs20         Usage:  SETLE   dest
\par                 SETNG   dest
\par         (signed, \cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: none
\par         Sets the byte in the operand to \cf1 1\plain\f2\b\fs20  if the Zero Flag is set or the
\par         Sign Flag is not equal to the Overflow Flag,  otherwise sets the
\par         operand to \cf1 0\plain\f2\b\fs20 .
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         reg\cf1 8\plain\f2\b\fs20               -     -     \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20               -     -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 0F 9E\plain\f2\b\fs20  SETLE r/m\cf1 8\plain\f2\b\fs20  Set byte if less or equal (ZF=\cf1 1\plain\f2\b\fs20  or SF<>OF)
\par         \cf3 0F 9E\plain\f2\b\fs20  SETNG r/m\cf1 8\plain\f2\b\fs20  Set byte if not greater (ZF=\cf1 1\plain\f2\b\fs20  or SF<>OF)
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0073}
{\up $}{\footnote\pard\plain{\up $} SETGSETNLE}
{\up #}{\footnote\pard\plain{\up #} SETGSETNLE}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SETG/SETNLE}
\plain\fs20 
\par 
\par \pard \f2\b\cf1 SETG/SETNLE\cf2  - Set if Greater / Set if Not Less or Equal (386+)
\par \plain\f2\b\fs20         Usage:  SETG    dest
\par                 SETNLE  dest
\par         (signed, \cf1 386\plain\f2\b\fs20 +)
\par         Modifies flags: none
\par         Sets the byte in the operand to \cf1 1\plain\f2\b\fs20  if the Zero Flag is clear or the
\par         Sign Flag equals to the Overflow Flag,  otherwise sets the operand
\par         to \cf1 0\plain\f2\b\fs20 .
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         reg\cf1 8\plain\f2\b\fs20               -     -     \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20               -     -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 0F 9F\plain\f2\b\fs20  SETG r/m\cf1 8\plain\f2\b\fs20  Set byte if greater (ZF=\cf1 0\plain\f2\b\fs20  and SF=OF)
\par         \cf3 0F 9F\plain\f2\b\fs20  SETNLE r/m\cf1 8\plain\f2\b\fs20  Set byte if not less or equal (ZF=\cf1 0\plain\f2\b\fs20  and SF=OF)
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0074}
{\up $}{\footnote\pard\plain{\up $} SETS}
{\up #}{\footnote\pard\plain{\up #} SETS}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SETS}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 SETS \cf2 - Set if Signed (386+)
\par \plain\f2\b\fs20         Usage:  SETS    dest
\par         Modifies flags: none
\par         Sets the byte in the operand to \cf1 1\plain\f2\b\fs20  if the Sign Flag is set, otherwise
\par         sets the operand to \cf1 0\plain\f2\b\fs20 .
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 8\plain\f2\b\fs20               -     -     \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20               -     -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 3
\par \pard \plain\fs20 
\par \f2\b         \cf3 0F 98\plain\f2\b\fs20  SETS r/m\cf1 8\plain\f2\b\fs20  Set byte if sign (SF=\cf1 1\plain\f2\b\fs20 )
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0075}
{\up $}{\footnote\pard\plain{\up $} SETNS}
{\up #}{\footnote\pard\plain{\up #} SETNS}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SETNS}

\par 
\par \pard 
\par \f2\b\cf1 SETNS \cf2 - Set if Not Signed (386+)
\par \plain\f2\b\fs20         Usage:  SETNS   dest
\par         Modifies flags: none
\par         Sets the byte in the operand to \cf1 1\plain\f2\b\fs20  if the Sign Flag is clear,
\par         otherwise sets the operand to \cf1 0\plain\f2\b\fs20 .
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 8\plain\f2\b\fs20               -     -     \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 3
\par \pard \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20               -     -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 0F 99\plain\f2\b\fs20  SETNS r/m\cf1 8\plain\f2\b\fs20  Set byte if not sign (SF=\cf1 0\plain\f2\b\fs20 )
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0076}
{\up $}{\footnote\pard\plain{\up $} SETC}
{\up #}{\footnote\pard\plain{\up #} SETC}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SETC}

\par 
\par \pard 
\par \f2\b\cf1 SETC \cf2 - Set if Carry (386+)
\par \plain\f2\b\fs20         Usage:  SETC    dest
\par         Modifies flags: none
\par         Sets the byte in the operand to \cf1 1\plain\f2\b\fs20  if the Carry Flag is set,
\par         otherwise sets the operand to \cf1 0\plain\f2\b\fs20 .
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 8\plain\f2\b\fs20               -     -     \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20               -     -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 3
\par \pard \plain\fs20 
\par \f2\b         \cf3 0F 92\plain\f2\b\fs20  SETC r/m\cf1 8\plain\f2\b\fs20  Set if carry (CF=\cf1 1\plain\f2\b\fs20 )
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0077}
{\up $}{\footnote\pard\plain{\up $} SETNC}
{\up #}{\footnote\pard\plain{\up #} SETNC}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SETNC}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 SETNC \cf2 - Set if Not Carry (386+)
\par \plain\f2\b\fs20         Usage:  SETNC   dest
\par         Modifies flags: none
\par         Sets the byte in the operand to \cf1 1\plain\f2\b\fs20  if the Carry Flag is clear,
\par         otherwise sets the operand to \cf1 0\plain\f2\b\fs20 .
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 8\plain\f2\b\fs20               -     -     \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 3
\par \pard \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20               -     -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 0F 93\plain\f2\b\fs20  SETNC r/m\cf1 8\plain\f2\b\fs20  Set byte if not carry (CF=\cf1 0\plain\f2\b\fs20 )
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0078}
{\up $}{\footnote\pard\plain{\up $} SETO}
{\up #}{\footnote\pard\plain{\up #} SETO}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SETO}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 SETO \cf2 - Set if Overflow (386+)
\par \plain\f2\b\fs20         Usage:  SETO    dest
\par         Modifies flags: none
\par         Sets the byte in the operand to \cf1 1\plain\f2\b\fs20  if the Overflow Flag is set,
\par         otherwise sets the operand to \cf1 0\plain\f2\b\fs20 .
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 8\plain\f2\b\fs20               -     -     \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 3
\par \pard \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20               -     -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 0F 90\plain\f2\b\fs20  SETO r/m\cf1 8\plain\f2\b\fs20  Set byte if overflow (OF=\cf1 1\plain\f2\b\fs20 )
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0079}
{\up $}{\footnote\pard\plain{\up $} SETNO}
{\up #}{\footnote\pard\plain{\up #} SETNO}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SETNO}

\par 
\par \pard 
\par \f2\b\cf1 SETNO \cf2 - Set if Not Overflow (386+)
\par \plain\f2\b\fs20         Usage:  SETNO   dest
\par         Modifies flags: none
\par         Sets the byte in the operand to \cf1 1\plain\f2\b\fs20  if the Overflow Flag is clear,
\par         otherwise sets the operand to \cf1 0\plain\f2\b\fs20 .
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 8\plain\f2\b\fs20               -     -     \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 3
\par \pard \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20               -     -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 0F 91\plain\f2\b\fs20  SETNO r/m\cf1 8\plain\f2\b\fs20  Set byte if not overflow (OF=\cf1 0\plain\f2\b\fs20 )
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:007a}
{\up $}{\footnote\pard\plain{\up $} SETPSETPE}
{\up #}{\footnote\pard\plain{\up #} SETPSETPE}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SETP/SETPE}
\plain\fs20 
\par 
\par \pard \f2\b\cf1 SETP/SETPE\cf2  - Set if Parity / Set if Parity Even  (386+)
\par \plain\f2\b\fs20         Usage:  SETP    dest
\par                 SETPE   dest
\par         Modifies flags: none
\par         Sets the byte in the operand to \cf1 1\plain\f2\b\fs20  if the Parity Flag is set,
\par         otherwise sets the operand to \cf1 0\plain\f2\b\fs20 .
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 8\plain\f2\b\fs20               -     -     \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 3
\par \pard \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20               -     -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 0F 9A\plain\f2\b\fs20  SETP r/m\cf1 8\plain\f2\b\fs20  Set byte if parity (PF=\cf1 1\plain\f2\b\fs20 )
\par         \cf3 0F 9A\plain\f2\b\fs20  SETPE r/m\cf1 8\plain\f2\b\fs20  Set byte if parity even (PF=\cf1 1\plain\f2\b\fs20 )
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:007b}
{\up $}{\footnote\pard\plain{\up $} SETNPSETPO}
{\up #}{\footnote\pard\plain{\up #} SETNPSETPO}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SETNP/SETPO}

\par 
\par \pard \f2\b\cf1 SETNP/SETPO\cf2  - Set if No Parity / Set if Parity Odd (386+)
\par \plain\f2\b\fs20         Usage:  SETNP   dest
\par                 SETPO   dest
\par         Modifies flags: none
\par         Sets the byte in the operand to \cf1 1\plain\f2\b\fs20  if the Parity Flag is clear,
\par         otherwise sets the operand to \cf1 0\plain\f2\b\fs20 .
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 8\plain\f2\b\fs20               -     -     \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 3
\par \pard \plain\f2\b\fs20         mem\cf1 8\plain\f2\b\fs20               -     -     \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 0F 9B\plain\f2\b\fs20  SETNP r/m\cf1 8\plain\f2\b\fs20  Set byte if not parity (PF=\cf1 0\plain\f2\b\fs20 )
\par         \cf3 0F 9B\plain\f2\b\fs20  SETPO r/m\cf1 8\plain\f2\b\fs20  Set byte if parity odd (PF=\cf1 0\plain\f2\b\fs20 )
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:007c}
{\up $}{\footnote\pard\plain{\up $} SGDT}
{\up #}{\footnote\pard\plain{\up #} SGDT}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SGDT}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 SGDT \cf2 - Store Global Descriptor Table (286+ privileged)
\par \plain\f2\b\fs20         Usage:  SGDT    dest
\par         Modifies flags: none
\par         Stores the Global Descriptor Table (GDT) Register into the
\par         specified operand.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         mem\cf1 64\plain\f2\b\fs20               -    \cf1 11\plain\f2\b\fs20     \cf1 9\plain\f2\b\fs20      \cf1 10\plain\f2\b\fs20             \cf1 5
\par \pard \plain\fs20 
\par \f2\b         \cf3 0F 01\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  SGDT m Store GDTR to m
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:007d}
{\up $}{\footnote\pard\plain{\up $} SIDT}
{\up #}{\footnote\pard\plain{\up #} SIDT}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SIDT}

\par 
\par \pard 
\par \f2\b\cf1 SIDT \cf2 - Store Interrupt Descriptor Table (286+ privileged)
\par \plain\f2\b\fs20         Usage:  SIDT    dest
\par         Modifies flags: none
\par         Stores the Interrupt Descriptor Table (IDT) Register into the
\par         specified operand.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         mem\cf1 64\plain\f2\b\fs20               -    \cf1 12\plain\f2\b\fs20     \cf1 9\plain\f2\b\fs20      \cf1 10\plain\f2\b\fs20             \cf1 5
\par \pard \plain\fs20 
\par \f2\b         \cf3 0F 01\plain\f2\b\fs20  /\cf1 1\plain\f2\b\fs20  SIDT m Store IDTR to m
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:007e}
{\up $}{\footnote\pard\plain{\up $} SHL}
{\up #}{\footnote\pard\plain{\up #} SHL}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SHL}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 SHL \cf2 - Shift Logical Left
\par \plain\fs20 
\par \f2\b         Usage:  SAL     dest,count
\par                 SHL     dest,count
\par         Modifies flags: CF OF PF SF ZF (AF undefined)
\par         .-.     .---------------.     .-.
\par         |C|<----|\cf1 7\plain\f2\b\fs20  <---------- \cf1 0\plain\f2\b\fs20 |<----|\cf1 0\plain\f2\b\fs20 |
\par         '-'     '---------------'     '-'
\par         Shifts the destination left by "count" bits with zeroes shifted
\par         in on right.  The Carry Flag contains the last bit shifted out.
\par                                  Clocks                 Size
\par \pard         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,\cf1 1\plain\f2\b\fs20              \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 2
\par \plain\f2\b\fs20         mem,\cf1 1\plain\f2\b\fs20            \cf1 15\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20            \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 23\plain\f2\b\fs20 +EA)
\par         reg,CL           \cf1 8\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 n  \cf1 5\plain\f2\b\fs20 +n    \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 2
\par \plain\f2\b\fs20         mem,CL        \cf1 20\plain\f2\b\fs20 +EA+\cf1 4\plain\f2\b\fs20 n \cf1 8\plain\f2\b\fs20 +n    \cf1 7\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20            \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 28\plain\f2\b\fs20 +EA+\cf1 4\plain\f2\b\fs20 n)
\par \pard         reg,immed\cf1 8\plain\f2\b\fs20         -    \cf1 5\plain\f2\b\fs20 +n    \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20             \cf1 3
\par \plain\f2\b\fs20         mem,immed\cf1 8\plain\f2\b\fs20         -    \cf1 8\plain\f2\b\fs20 +n    \cf1 7\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20            \cf1 3\plain\f2\b\fs20 -\cf1 5
\par \plain\fs20 
\par \f2\b         \cf3 D0\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  SHL r/m\cf1 8\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Multiply r/m\cf1 8\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , once
\par         \cf3 D2\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  SHL r/m\cf1 8\plain\f2\b\fs20 ,CL Multiply r/m\cf1 8\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , CL times
\par         \cf3 C0\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  ib SHL r/m\cf1 8\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Multiply r/m\cf1 8\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , imm\cf1 8\plain\f2\b\fs20  times
\par \pard         \cf3 D1\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  SHL r/m\cf1 16\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Multiply r/m\cf1 16\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , once
\par         \cf3 D3\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  SHL r/m\cf1 16\plain\f2\b\fs20 ,CL Multiply r/m\cf1 16\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , CL times
\par         \cf3 C1\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  ib SHL r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Multiply r/m\cf1 16\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , imm\cf1 8\plain\f2\b\fs20  times
\par         \cf3 D1\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  SHL r/m\cf1 32\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Multiply r/m\cf1 32\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , once
\par         \cf3 D3\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  SHL r/m\cf1 32\plain\f2\b\fs20 ,CL Multiply r/m\cf1 32\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , CL times
\par \pard         \cf3 C1\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  ib SHL r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Multiply r/m\cf1 32\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , imm\cf1 8\plain\f2\b\fs20  times
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:007f}
{\up $}{\footnote\pard\plain{\up $} SHR}
{\up #}{\footnote\pard\plain{\up #} SHR}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SHR}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 SHR \cf2 - Shift Logical Right
\par \plain\f2\b\fs20         Usage:  SHR     dest,count
\par         Modifies flags: CF OF PF SF ZF (AF undefined)
\par         .-.     .---------------.     .-.
\par         |\cf1 0\plain\f2\b\fs20 |---->|\cf1 7\plain\f2\b\fs20  ----------> \cf1 0\plain\f2\b\fs20 |---->|C|
\par         '-'     '---------------'     '-'
\par         Shifts the destination right by "count" bits with zeroes shifted
\par         in on the left.  The Carry Flag contains the last bit shifted out.
\par                                  Clocks                 Size
\par \pard         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,\cf1 1\plain\f2\b\fs20              \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20                    \cf1 2
\par \plain\f2\b\fs20         mem,\cf1 1\plain\f2\b\fs20            \cf1 15\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20                   \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20    (W\cf1 88\plain\f2\b\fs20 =\cf1 23\plain\f2\b\fs20 +EA)
\par         reg,CL           \cf1 8\plain\f2\b\fs20 +\cf1 4\plain\f2\b\fs20 n  \cf1 5\plain\f2\b\fs20 +n    \cf1 3\plain\f2\b\fs20                    \cf1 2
\par \plain\f2\b\fs20         mem,CL        \cf1 20\plain\f2\b\fs20 +EA+\cf1 4\plain\f2\b\fs20 n \cf1 8\plain\f2\b\fs20 +n    \cf1 7\plain\f2\b\fs20                   \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20    (W\cf1 88\plain\f2\b\fs20 =\cf1 28\plain\f2\b\fs20 +EA+\cf1 4\plain\f2\b\fs20 n)
\par \pard         reg,immed\cf1 8\plain\f2\b\fs20         -    \cf1 5\plain\f2\b\fs20 +n    \cf1 3\plain\f2\b\fs20                    \cf1 3
\par \plain\f2\b\fs20         mem,immed\cf1 8\plain\f2\b\fs20         -    \cf1 8\plain\f2\b\fs20 +n    \cf1 7\plain\f2\b\fs20                   \cf1 3\plain\f2\b\fs20 -\cf1 5
\par \plain\fs20 
\par \f2\b         \cf3 D0\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  SHR r/m\cf1 8\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Unsigned divide r/m\cf1 8\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , once
\par         \cf3 D2\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  SHR r/m\cf1 8\plain\f2\b\fs20 ,CL Unsigned divide r/m\cf1 8\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , CL times
\par         \cf3 C0\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  ib SHR r/m\cf1 8\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Unsigned divide r/m\cf1 8\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , imm\cf1 8\plain\f2\b\fs20  times
\par \pard         \cf3 D1\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  SHR r/m\cf1 16\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Unsigned divide r/m\cf1 16\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , once
\par         \cf3 D3\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  SHR r/m\cf1 16\plain\f2\b\fs20 ,CL Unsigned divide r/m\cf1 16\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , CL times
\par         \cf3 C1\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  ib SHR r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Unsigned divide r/m\cf1 16\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , imm\cf1 8\plain\f2\b\fs20  times
\par         \cf3 D1\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  SHR r/m\cf1 32\plain\f2\b\fs20 ,\cf1 1\plain\f2\b\fs20  Unsigned divide r/m\cf1 32\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , once
\par         \cf3 D3\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  SHR r/m\cf1 32\plain\f2\b\fs20 ,CL Unsigned divide r/m\cf1 32\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , CL times
\par \pard         \cf3 C1\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  ib SHR r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Unsigned divide r/m\cf1 32\plain\f2\b\fs20  by \cf1 2\plain\f2\b\fs20 , imm\cf1 8\plain\f2\b\fs20  times
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0080}
{\up $}{\footnote\pard\plain{\up $} SHLDSHRD}
{\up #}{\footnote\pard\plain{\up #} SHLDSHRD}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SHLD/SHRD}

\par 
\par \pard \f2\b\cf1 SHLD/SHRD\cf2  - Double Precision Shift (386+)
\par \plain\f2\b\fs20         Usage:  SHLD    dest,src,count
\par                 SHRD    dest,src,count
\par         Modifies flags: CF PF SF ZF (OF,AF undefined)
\par         SHLD shifts "dest" to the left "count" times and the bit positions
\par         opened are filled with the most significant bits of "src".  SHRD
\par         shifts "dest" to the right "count" times and the bit positions
\par         opened are filled with the least significant bits of the second
\par \pard         operand.  Only the \cf1 5\plain\f2\b\fs20  lower bits of "count" are used.
\par                                         Clocks                  Size
\par         Operands                \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20            Bytes
\par         reg\cf1 16\plain\f2\b\fs20 ,reg\cf1 16\plain\f2\b\fs20 ,immed\cf1 8\plain\f2\b\fs20        -     -     \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20               \cf1 4
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,reg\cf1 32\plain\f2\b\fs20 ,immed\cf1 8\plain\f2\b\fs20        -     -     \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20               \cf1 4
\par \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20 ,reg\cf1 16\plain\f2\b\fs20 ,immed\cf1 8\plain\f2\b\fs20        -     -     \cf1 7\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20               \cf1 6
\par \pard \plain\f2\b\fs20         mem\cf1 32\plain\f2\b\fs20 ,reg\cf1 32\plain\f2\b\fs20 ,immed\cf1 8\plain\f2\b\fs20        -     -     \cf1 7\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20               \cf1 6
\par \plain\f2\b\fs20         reg\cf1 16\plain\f2\b\fs20 ,reg\cf1 16\plain\f2\b\fs20 ,CL           -     -     \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20               \cf1 3
\par \plain\f2\b\fs20         reg\cf1 32\plain\f2\b\fs20 ,reg\cf1 32\plain\f2\b\fs20 ,CL           -     -     \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20               \cf1 3
\par \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20 ,reg\cf1 16\plain\f2\b\fs20 ,CL           -     -     \cf1 7\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20               \cf1 5
\par \plain\f2\b\fs20         mem\cf1 32\plain\f2\b\fs20 ,reg\cf1 32\plain\f2\b\fs20 ,CL           -     -     \cf1 7\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20               \cf1 5
\par \pard \plain\fs20 
\par \f2\b         \cf3 0F A4\plain\f2\b\fs20  SHLD r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20 ,imm\cf1 8
\par \plain\f2\b\fs20         \cf3 0F A5\plain\f2\b\fs20  SHLD r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20 ,CL
\par         \cf3 0F A4\plain\f2\b\fs20  SHLD r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20 ,imm\cf1 8
\par \plain\f2\b\fs20         \cf3 0F A5\plain\f2\b\fs20  SHLD r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20 ,CL
\par         \cf3 0F AC\plain\f2\b\fs20  SHRD r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20 ,imm\cf1 8
\par \plain\f2\b\fs20         \cf3 0F AD\plain\f2\b\fs20  SHRD r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20 ,CL
\par         \cf3 0F AC\plain\f2\b\fs20  SHRD r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20 ,imm\cf1 8
\par \plain\f2\b\fs20         \cf3 0F AD\plain\f2\b\fs20  SHRD r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20 ,CL
\par \pard \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0081}
{\up $}{\footnote\pard\plain{\up $} SLDT}
{\up #}{\footnote\pard\plain{\up #} SLDT}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SLDT}

\par 
\par \pard 
\par \f2\b\cf1 SLDT \cf2 - Store Local Descriptor Table (286+ privileged)
\par \plain\f2\b\fs20         Usage:  SLDT    dest
\par         Modifies flags: none
\par         Stores the Local Descriptor Table (LDT) Register into the
\par         specified operand.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 16\plain\f2\b\fs20              -     \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20              \cf1 3
\par \pard \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20              -     \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 5
\par \plain\fs20 
\par \f2\b         \cf3 0F 00\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  SLDT r/m\cf1 16\plain\f2\b\fs20  Stores segment selector from LDTR in r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 0F 00\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  SLDT r/m\cf1 32\plain\f2\b\fs20  Store segment selector from LDTR in low-order \cf1 16\plain\f2\b\fs20  bits of
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0082}
{\up $}{\footnote\pard\plain{\up $} SMSW}
{\up #}{\footnote\pard\plain{\up #} SMSW}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SMSW}

\par 
\par \pard 
\par \f2\b\cf1 SMSW \cf2 - Store Machine Status Word (286+ privileged)
\par \plain\f2\b\fs20         Usage:  SMSW    dest
\par         Modifies flags: none
\par         Store Machine Status Word (MSW) into "dest".
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 16\plain\f2\b\fs20              -     \cf1 2\plain\f2\b\fs20      \cf1 10\plain\f2\b\fs20     \cf1 2\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20              -     \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 5
\par \pard \plain\fs20 
\par \f2\b         \cf3 0F 01\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  SMSW r/m\cf1 16\plain\f2\b\fs20  Store machine status word to r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 0F 01\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  SMSW r\cf1 32\plain\f2\b\fs20 /m\cf1 16\plain\f2\b\fs20  Store machine status word in low-order \cf1 16\plain\f2\b\fs20  bits of r\cf1 32\plain\f2\b\fs20 /m\cf1 16\plain\f2\b\fs20 ;
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0083}
{\up $}{\footnote\pard\plain{\up $} STC}
{\up #}{\footnote\pard\plain{\up #} STC}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} STC}

\par 
\par \pard 
\par \f2\b\cf1 STC \cf2 - Set Carry
\par \plain\f2\b\fs20         Usage:  STC
\par         Modifies flags: CF
\par         Sets the Carry Flag to \cf1 1\plain\f2\b\fs20 .
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20              \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 F9\plain\f2\b\fs20  STC Set CF flag
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0084}
{\up $}{\footnote\pard\plain{\up $} STD}
{\up #}{\footnote\pard\plain{\up #} STD}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} STD}

\par 
\par \pard 
\par \f2\b\cf1 STD \cf2 - Set Direction Flag
\par \plain\f2\b\fs20         Usage:  STD
\par         Modifies flags: DF
\par         Sets the Direction Flag to \cf1 1\plain\f2\b\fs20  causing string instructions to
\par         auto-decrement SI and DI instead of auto-increment.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none              \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20              \cf1 1
\par \pard \plain\fs20 
\par \f2\b         \cf3 FD\plain\f2\b\fs20  STD Set DF flag
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0085}
{\up $}{\footnote\pard\plain{\up $} STI}
{\up #}{\footnote\pard\plain{\up #} STI}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} STI}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 STI \cf2 - Set Interrupt Flag  (Enable Interrupts)
\par \plain\f2\b\fs20         Usage:  STI
\par         Modifies flags: IF
\par         Sets the Interrupt Flag to \cf1 1\plain\f2\b\fs20 , which enables recognition of all
\par         hardware interrupts.  If an interrupt is generated by a hardware
\par         device, an End of Interrupt (EOI) must also be issued to enable
\par         other hardware interrupts of the same or lower priority.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         none               \cf1 2\plain\f2\b\fs20     \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20              \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 FB\plain\f2\b\fs20  STI Set interrupt flag; external, maskable interrupts enabled at the end of the next instruction
\par         
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0086}
{\up $}{\footnote\pard\plain{\up $} STOS}
{\up #}{\footnote\pard\plain{\up #} STOS}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} STOS}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 STOS \cf2 - Store String  (Byte, Word or Doubleword)
\par \plain\f2\b\fs20         Usage:  STOS    dest
\par                 STOSB
\par                 STOSW
\par                 STOSD
\par         Modifies flags: None
\par         Stores value in accumulator to location at ES:(E)DI (even if operand
\par         is given).  (E)DI is incremented/decremented based on the size of
\par         the operand (or instruction format) and the state of the Direction
\par         Flag.   Use with REP prefixes.
\par                                  Clocks                 Size
\par \pard         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         dest              \cf1 11\plain\f2\b\fs20     \cf1 3\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20              \cf1 1\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 15\plain\f2\b\fs20 )
\par \plain\fs20 
\par \f2\b         \cf3 AA\plain\f2\b\fs20  STOS m\cf1 8\plain\f2\b\fs20  Store AL at address ES:(E)DI
\par         \cf3 AB\plain\f2\b\fs20  STOS m\cf1 16\plain\f2\b\fs20  Store AX at address ES:(E)DI
\par         \cf3 AB\plain\f2\b\fs20  STOS m\cf1 32\plain\f2\b\fs20  Store EAX at address ES:(E)DI
\par         \cf3 AA\plain\f2\b\fs20  STOSB Store AL at address ES:(E)DI
\par \pard         \cf3 AB\plain\f2\b\fs20  STOSW Store AX at address ES:(E)DI
\par        \cf3  AB\plain\f2\b\fs20  STOSD Store EAX at address ES:(E)DI
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0087}
{\up $}{\footnote\pard\plain{\up $} STR}
{\up #}{\footnote\pard\plain{\up #} STR}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} STR}

\par 
\par \pard 
\par \f2\b\cf1 STR \cf2 - Store Task Register (286+ privileged)
\par \plain\f2\b\fs20         Usage:  STR     dest
\par         Modifies flags: None
\par         Stores the current Task Register to the specified operand.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 16\plain\f2\b\fs20              -     \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20              \cf1 3
\par \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20              -     \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 5
\par \pard \plain\fs20 
\par \f2\b         \cf3 0F 00\plain\f2\b\fs20  /\cf1 1\plain\f2\b\fs20  STR r/m\cf1 16\plain\f2\b\fs20  Stores segment selector from TR in r/m\cf1 16
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0088}
{\up $}{\footnote\pard\plain{\up $} SUB}
{\up #}{\footnote\pard\plain{\up #} SUB}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} SUB}

\par 
\par \pard 
\par \f2\b\cf1 SUB \cf2 - Subtract
\par \plain\f2\b\fs20         Usage:  SUB     dest,src
\par         Modifies flags: AF CF OF PF SF ZF
\par         The source is subtracted from the destination and the result is
\par         stored in the destination.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,reg           \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20         mem,reg         \cf1 16\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 24\plain\f2\b\fs20 +EA)
\par \pard         reg,mem          \cf1 9\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 13\plain\f2\b\fs20 +EA)
\par         reg,immed         \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 4
\par \plain\f2\b\fs20         mem,immed       \cf1 17\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 6\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 25\plain\f2\b\fs20 +EA)
\par         accum,immed       \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 3
\par \pard \plain\fs20 
\par \f2\b         \cf3 2C\plain\f2\b\fs20  ib SUB AL, imm\cf1 8\plain\f2\b\fs20  Subtract imm\cf1 8\plain\f2\b\fs20  from AL
\par         \cf3 2D\plain\f2\b\fs20  iw SUB AX, imm\cf1 16\plain\f2\b\fs20  Subtract imm\cf1 16\plain\f2\b\fs20  from AX
\par         \cf3 2D\plain\f2\b\fs20  id SUB EAX, imm\cf1 32\plain\f2\b\fs20  Subtract imm\cf1 32\plain\f2\b\fs20  from EAX
\par         \cf3 80\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  ib SUB r/m\cf1 8\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Subtract imm\cf1 8\plain\f2\b\fs20  from r/m\cf1 8
\par \plain\f2\b\fs20         \cf3 81\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  iw SUB r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 16\plain\f2\b\fs20  Subtract imm\cf1 16\plain\f2\b\fs20  from r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 81\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  id SUB r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 32\plain\f2\b\fs20  Subtract imm\cf1 32\plain\f2\b\fs20  from r/m\cf1 32
\par \pard \plain\f2\b\fs20         \cf3 83\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  ib SUB r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Subtract sign-extended imm\cf1 8\plain\f2\b\fs20  from r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 83\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  ib SUB r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  Subtract sign-extended imm\cf1 8\plain\f2\b\fs20  from r/m\cf1 32
\par \plain\f2\b\fs20         \cf3 28\plain\f2\b\fs20  / r SUB r/m\cf1 8\plain\f2\b\fs20 ,r\cf1 8\plain\f2\b\fs20  Subtract r\cf1 8\plain\f2\b\fs20  from r/m\cf1 8
\par \plain\f2\b\fs20         \cf3 29\plain\f2\b\fs20  / r SUB r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20  Subtract r\cf1 16\plain\f2\b\fs20  from r/m\cf1 16
\par \plain\f2\b\fs20         \cf3 29\plain\f2\b\fs20  / r SUB r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20  Subtract r\cf1 32\plain\f2\b\fs20  from r/m\cf1 32
\par \pard \plain\f2\b\fs20         \cf3 2A\plain\f2\b\fs20  / r SUB r\cf1 8\plain\f2\b\fs20 ,r/m\cf1 8\plain\f2\b\fs20  Subtract r/m\cf1 8\plain\f2\b\fs20  from r\cf1 8
\par \plain\f2\b\fs20         \cf3 2B\plain\f2\b\fs20  / r SUB r\cf1 16\plain\f2\b\fs20 ,r/m\cf1 16\plain\f2\b\fs20  Subtract r/m\cf1 16\plain\f2\b\fs20  from r\cf1 16
\par \plain\f2\b\fs20         \cf3 2B\plain\f2\b\fs20  / r SUB r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 32\plain\f2\b\fs20  Subtract r/m\cf1 32\plain\f2\b\fs20  from r\cf1 32
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0089}
{\up $}{\footnote\pard\plain{\up $} TEST}
{\up #}{\footnote\pard\plain{\up #} TEST}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} TEST}

\par 
\par \pard 
\par \f2\b\cf1 TEST \cf2 - Test For Bit Pattern
\par \plain\f2\b\fs20         Usage:  TEST    dest,src
\par         Modifies flags: CF OF PF SF ZF (AF undefined)
\par         Performs a logical AND of the two operands updating the flags
\par         register without saving the result.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,reg           \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 2
\par \pard \plain\f2\b\fs20         reg,mem          \cf1 9\plain\f2\b\fs20 +EA   \cf1 6\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 13\plain\f2\b\fs20 +EA)
\par         mem,reg          \cf1 9\plain\f2\b\fs20 +EA   \cf1 6\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 13\plain\f2\b\fs20 +EA)
\par         reg,immed         \cf1 5\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 4
\par \plain\f2\b\fs20         mem,immed       \cf1 11\plain\f2\b\fs20 +EA   \cf1 6\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 6
\par \pard \plain\f2\b\fs20         accum,immed       \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 A8\plain\f2\b\fs20  ib TEST AL, imm\cf1 8\plain\f2\b\fs20  AND imm\cf1 8\plain\f2\b\fs20  with AL; set SF, ZF, PF according to result
\par         \cf3 A9\plain\f2\b\fs20  iw TEST AX, imm\cf1 16\plain\f2\b\fs20  AND imm\cf1 16\plain\f2\b\fs20  with AX; set SF, ZF, PF according to result
\par         \cf3 A9\plain\f2\b\fs20  id TEST EAX, imm\cf1 32\plain\f2\b\fs20  AND imm\cf1 32\plain\f2\b\fs20  with EAX; set SF, ZF, PF according to result
\par         \cf3 F6\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  ib TEST r/m\cf1 8\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  AND imm\cf1 8\plain\f2\b\fs20  with r/m\cf1 8\plain\f2\b\fs20 ; set SF, ZF, PF according to result
\par \pard         \cf3 F7\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  iw TEST r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 16\plain\f2\b\fs20  AND imm\cf1 16\plain\f2\b\fs20  with r/m\cf1 16\plain\f2\b\fs20 ; set SF, ZF, PF according to result
\par         \cf3 F7\plain\f2\b\fs20  /\cf1 0\plain\f2\b\fs20  id TEST r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 32\plain\f2\b\fs20  AND imm\cf1 32\plain\f2\b\fs20  with r/m\cf1 32\plain\f2\b\fs20 ; set SF, ZF, PF according to result
\par         \cf3 84\plain\f2\b\fs20  / r TEST r/m\cf1 8\plain\f2\b\fs20 ,r\cf1 8\plain\f2\b\fs20  AND r\cf1 8\plain\f2\b\fs20  with r/m\cf1 8\plain\f2\b\fs20 ; set SF, ZF, PF according to result
\par         \cf3 85\plain\f2\b\fs20  / r TEST r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20  AND r\cf1 16\plain\f2\b\fs20  with r/m\cf1 16\plain\f2\b\fs20 ; set SF, ZF, PF according to result
\par \pard         \cf3 85\plain\f2\b\fs20  / r TEST r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20  AND r\cf1 32\plain\f2\b\fs20  with r/m\cf1 32\plain\f2\b\fs20 ; set SF, ZF, PF according to result
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:008a}
{\up $}{\footnote\pard\plain{\up $} VERR}
{\up #}{\footnote\pard\plain{\up #} VERR}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} VERR}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 VERR \cf2 - Verify Read (286+ protected)
\par \plain\f2\b\fs20         Usage:  VERR    src
\par         Modifies flags: ZF
\par         Verifies the specified segment selector is valid and is readable
\par         at the current privilege level.  If the segment is readable,
\par         the Zero Flag is set, otherwise it is cleared.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 16\plain\f2\b\fs20              -     \cf1 14\plain\f2\b\fs20     \cf1 10\plain\f2\b\fs20     \cf1 11\plain\f2\b\fs20             \cf1 3
\par \pard \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20              -     \cf1 16\plain\f2\b\fs20     \cf1 11\plain\f2\b\fs20     \cf1 11\plain\f2\b\fs20             \cf1 5
\par \plain\fs20 
\par \f2\b         \cf3 0F 00\plain\f2\b\fs20  /\cf1 4\plain\f2\b\fs20  VERR r/m\cf1 16\plain\f2\b\fs20  Set ZF=\cf1 1\plain\f2\b\fs20  if segment specified with r/m\cf1 16\plain\f2\b\fs20  can be read
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:008b}
{\up $}{\footnote\pard\plain{\up $} VERW}
{\up #}{\footnote\pard\plain{\up #} VERW}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} VERW}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 VERW \cf2 - Verify Write (286+ protected)
\par \plain\f2\b\fs20         Usage:  VERW    src
\par         Modifies flags: ZF
\par         Verifies the specified segment selector is valid and is ratable
\par         at the current privilege level.  If the segment is writable,
\par         the Zero Flag is set, otherwise it is cleared.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg\cf1 16\plain\f2\b\fs20              -     \cf1 14\plain\f2\b\fs20     \cf1 15\plain\f2\b\fs20     \cf1 11\plain\f2\b\fs20             \cf1 3
\par \pard \plain\f2\b\fs20         mem\cf1 16\plain\f2\b\fs20              -     \cf1 16\plain\f2\b\fs20     \cf1 16\plain\f2\b\fs20     \cf1 11\plain\f2\b\fs20             \cf1 5
\par \plain\fs20 
\par \f2\b         \cf3 0F 00\plain\f2\b\fs20  /\cf1 5\plain\f2\b\fs20  VERW r/m\cf1 16\plain\f2\b\fs20  Set ZF=\cf1 1\plain\f2\b\fs20  if segment specified with r/m\cf1 16\plain\f2\b\fs20  can be written
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:008c}
{\up $}{\footnote\pard\plain{\up $} WAITFWAIT}
{\up #}{\footnote\pard\plain{\up #} WAITFWAIT}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} WAIT/FWAIT}

\par 
\par \pard \f2\b\cf1 WAIT/FWAIT\cf2  - Event Wait
\par \plain\f2\b\fs20         Usage:  WAIT
\par                 FWAIT
\par         Modifies flags: None
\par         CPU enters wait state until the coprocessor signals it has finished
\par         its operation.  This instruction is used to prevent the CPU from
\par         accessing memory that may be temporarily in use by the coprocessor.
\par         WAIT and FWAIT are identical.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         none               \cf1 4\plain\f2\b\fs20     \cf1 3\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20 +   \cf1 1\plain\f2\b\fs20 -\cf1 3\plain\f2\b\fs20             \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 9B\plain\f2\b\fs20  WAIT Check pending unmasked floating-point exceptions.
\par         \cf3 9B\plain\f2\b\fs20  FWAIT Check pending unmasked floating-point exceptions.
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:008d}
{\up $}{\footnote\pard\plain{\up $} WBINVD}
{\up #}{\footnote\pard\plain{\up #} WBINVD}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} WBINVD}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 WBINVD \cf2 - Write-Back and Invalidate Cache (486+)
\par \plain\f2\b\fs20         Usage:  WBINVD
\par         Modifies flags: None
\par         Flushes internal cache, then signals the external cache to write
\par         back current data followed by a signal to flush the external cache.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         none               -    -     -     \cf1 5\plain\f2\b\fs20              \cf1 2
\par \pard \plain\fs20 
\par \f2\b         \cf3 0F 09\plain\f2\b\fs20  WBINVD Write back and flush Internal caches; initiate writing-back
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:008e}
{\up $}{\footnote\pard\plain{\up $} XCHG}
{\up #}{\footnote\pard\plain{\up #} XCHG}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} XCHG}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 XCHG \cf2 - Exchange
\par \plain\f2\b\fs20         Usage:  XCHG    dest,src
\par         Modifies flags: None
\par         Exchanges contents of source and destination.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,reg           \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 2
\par \plain\f2\b\fs20         mem,reg         \cf1 17\plain\f2\b\fs20 +EA   \cf1 5\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 25\plain\f2\b\fs20 +EA)
\par \pard         reg,mem         \cf1 17\plain\f2\b\fs20 +EA   \cf1 5\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 25\plain\f2\b\fs20 +EA)
\par         accum,reg         \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 1
\par \plain\f2\b\fs20         reg,accum         \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20              \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 90\plain\f2\b\fs20 + rw XCHG AX, r\cf1 16\plain\f2\b\fs20  Exchange r\cf1 16\plain\f2\b\fs20  with AX
\par         \cf3 90\plain\f2\b\fs20 + rw XCHG r\cf1 16\plain\f2\b\fs20 ,AX Exchange AX with r\cf1 16
\par \pard \plain\f2\b\fs20         \cf3 90\plain\f2\b\fs20 + rd XCHG EAX, r\cf1 32\plain\f2\b\fs20  Exchange r\cf1 32\plain\f2\b\fs20  with EAX
\par         \cf3 90\plain\f2\b\fs20 + rd XCHG r\cf1 32\plain\f2\b\fs20 ,EAX Exchange EAX with r\cf1 32
\par \plain\f2\b\fs20         \cf3 86\plain\f2\b\fs20  / r XCHG r/m\cf1 8\plain\f2\b\fs20 ,r\cf1 8\plain\f2\b\fs20  Exchange r\cf1 8\plain\f2\b\fs20  (byte register) with byte from r/m\cf1 8
\par \plain\f2\b\fs20         \cf3 86\plain\f2\b\fs20  / r XCHG r\cf1 8\plain\f2\b\fs20 ,r/m\cf1 8\plain\f2\b\fs20  Exchange byte from r/m\cf1 8\plain\f2\b\fs20  with r\cf1 8\plain\f2\b\fs20  (byte register)
\par         \cf3 87\plain\f2\b\fs20  / r XCHG r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20  Exchange r\cf1 16\plain\f2\b\fs20  with word from r/m\cf1 16
\par \pard \plain\f2\b\fs20         \cf3 87\plain\f2\b\fs20  / r XCHG r\cf1 16\plain\f2\b\fs20 ,r/m\cf1 16\plain\f2\b\fs20  Exchange word from r/m\cf1 16\plain\f2\b\fs20  with r\cf1 16
\par \plain\f2\b\fs20         \cf3 87\plain\f2\b\fs20  / r XCHG r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20  Exchange r\cf1 32\plain\f2\b\fs20  with doubleword from r/m\cf1 32
\par \plain\f2\b\fs20         \cf3 87\plain\f2\b\fs20  / r XCHG r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 32\plain\f2\b\fs20  Exchange doubleword from r/m\cf1 32\plain\f2\b\fs20  with r\cf1 32
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:008f}
{\up $}{\footnote\pard\plain{\up $} XLATXLATB}
{\up #}{\footnote\pard\plain{\up #} XLATXLATB}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} XLAT/XLATB}
\plain\fs20 
\par 
\par \pard \f2\b\cf1 XLAT/XLATB\cf2  - Translate
\par \plain\f2\b\fs20         Usage:  XLAT    translation-table
\par                 XLATB   (masm \cf1 5\plain\f2\b\fs20 .x)
\par         Modifies flags: None
\par         Replaces the byte in AL with byte from a user table addressed by
\par         BX.  The original value of AL is the index into the translate table.
\par         The best way to discripe this is MOV AL,[BX+AL]
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par \pard         table offset      \cf1 11\plain\f2\b\fs20     \cf1 5\plain\f2\b\fs20      \cf1 5\plain\f2\b\fs20      \cf1 4\plain\f2\b\fs20              \cf1 1
\par \plain\fs20 
\par \f2\b         \cf3 D7\plain\f2\b\fs20  XLAT m\cf1 8\plain\f2\b\fs20  Set AL to memory byte DS:[(E)BX + unsigned AL]
\par         \cf3 D7\plain\f2\b\fs20  XLATB Set AL to memory byte DS:[(E)BX + unsigned AL]
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0090}
{\up $}{\footnote\pard\plain{\up $} XOR}
{\up #}{\footnote\pard\plain{\up #} XOR}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} XOR}
\plain\fs20 
\par 
\par \pard 
\par \f2\b\cf1 XOR \cf2 - Exclusive OR
\par \plain\f2\b\fs20         Usage:  XOR     dest,src
\par         Modifies flags: CF OF PF SF ZF (AF undefined)
\par         Performs a bitwise exclusive OR of the operands and returns
\par         the result in the destination.
\par                                  Clocks                 Size
\par         Operands         \cf1 808\plain\f2\b\fs20 x  \cf1 286\plain\f2\b\fs20    \cf1 386\plain\f2\b\fs20    \cf1 486\plain\f2\b\fs20           Bytes
\par         reg,reg           \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20              \cf1 2
\par \pard \plain\f2\b\fs20         mem,reg         \cf1 16\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 6\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 24\plain\f2\b\fs20 +EA)
\par         reg,mem          \cf1 9\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 4\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 13\plain\f2\b\fs20 +EA)
\par         reg,immed         \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 4
\par \plain\f2\b\fs20         mem,immed       \cf1 17\plain\f2\b\fs20 +EA   \cf1 7\plain\f2\b\fs20      \cf1 7\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20             \cf1 3\plain\f2\b\fs20 -\cf1 6\plain\f2\b\fs20   (W\cf1 88\plain\f2\b\fs20 =\cf1 25\plain\f2\b\fs20 +EA)
\par \pard         accum,immed       \cf1 4\plain\f2\b\fs20      \cf1 3\plain\f2\b\fs20      \cf1 2\plain\f2\b\fs20      \cf1 1\plain\f2\b\fs20             \cf1 2\plain\f2\b\fs20 -\cf1 3
\par \plain\fs20 
\par \f2\b         \cf3 34\plain\f2\b\fs20  ib XOR AL, imm\cf1 8\plain\f2\b\fs20  AL XOR imm\cf1 8
\par \plain\f2\b\fs20         \cf3 35\plain\f2\b\fs20  iw XOR AX, imm\cf1 16\plain\f2\b\fs20  AX XOR imm\cf1 16
\par \plain\f2\b\fs20         \cf3 35\plain\f2\b\fs20  id XOR EAX, imm\cf1 32\plain\f2\b\fs20  EAX XOR imm\cf1 32
\par \plain\f2\b\fs20         \cf3 80\plain\f2\b\fs20  /\cf1 6\plain\f2\b\fs20  ib XOR r/m\cf1 8\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  r/m\cf1 8\plain\f2\b\fs20  XOR imm\cf1 8
\par \plain\f2\b\fs20         \cf3 81\plain\f2\b\fs20  /\cf1 6\plain\f2\b\fs20  iw XOR r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 16\plain\f2\b\fs20  r/m\cf1 16\plain\f2\b\fs20  XOR imm\cf1 16
\par \pard \plain\f2\b\fs20         \cf3 81\plain\f2\b\fs20  /\cf1 6\plain\f2\b\fs20  id XOR r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 32\plain\f2\b\fs20  r/m\cf1 32\plain\f2\b\fs20  XOR imm\cf1 32
\par \plain\f2\b\fs20         \cf3 83\plain\f2\b\fs20  /\cf1 6\plain\f2\b\fs20  ib XOR r/m\cf1 16\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  r/m\cf1 16\plain\f2\b\fs20  XOR imm\cf1 8\plain\f2\b\fs20  (sign-extended)
\par         \cf3 83\plain\f2\b\fs20  /\cf1 6\plain\f2\b\fs20  ib XOR r/m\cf1 32\plain\f2\b\fs20 ,imm\cf1 8\plain\f2\b\fs20  r/m\cf1 32\plain\f2\b\fs20  XOR imm\cf1 8\plain\f2\b\fs20  (sign-extended)
\par         \cf3 30\plain\f2\b\fs20  / r XOR r/m\cf1 8\plain\f2\b\fs20 ,r\cf1 8\plain\f2\b\fs20  r/m\cf1 8\plain\f2\b\fs20  XOR r\cf1 8
\par \plain\f2\b\fs20         \cf3 31\plain\f2\b\fs20  / r XOR r/m\cf1 16\plain\f2\b\fs20 ,r\cf1 16\plain\f2\b\fs20  r/m\cf1 16\plain\f2\b\fs20  XOR r\cf1 16
\par \pard \plain\f2\b\fs20         \cf3 31\plain\f2\b\fs20  / r XOR r/m\cf1 32\plain\f2\b\fs20 ,r\cf1 32\plain\f2\b\fs20  r/m\cf1 32\plain\f2\b\fs20  XOR r\cf1 32
\par \plain\f2\b\fs20         \cf3 32\plain\f2\b\fs20  / r XOR r\cf1 8\plain\f2\b\fs20 ,r/m\cf1 8\plain\f2\b\fs20  r\cf1 8\plain\f2\b\fs20  XOR r/m\cf1 8
\par \plain\f2\b\fs20         \cf3 33\plain\f2\b\fs20  / r XOR r\cf1 16\plain\f2\b\fs20 ,r/m\cf1 16\plain\f2\b\fs20  r\cf1 8\plain\f2\b\fs20  XOR r/m\cf1 8
\par \plain\f2\b\fs20         \cf3 33\plain\f2\b\fs20  / r XOR r\cf1 32\plain\f2\b\fs20 ,r/m\cf1 32\plain\f2\b\fs20  r\cf1 8\plain\f2\b\fs20  XOR r/m\cf1 8
\par \plain\fs20 
\par 
\par \page
{\up +}{\footnote\pard\plain{\up +} BROWSE0001:0091}
{\up $}{\footnote\pard\plain{\up $} BareHexOpcodesAndMnemonics}
{\up #}{\footnote\pard\plain{\up #} BareHexOpcodesAndMnemonics}
\pard\keepn {\up K}{\footnote\pard\plain{\up K} Bare Hex Opcodes And Mnemonics}

\par 
\par \pard \f1\b\fs30\cf1 Bare Hex Opcodes And Mnemonics
\par \plain\fs20 
\par \f1\b\fs24 This list include opcodes that are not in the main listing.
\par \plain\fs20 
\par \f1\b\fs30\cf3 NOTE :\plain\f1\b\fs24  There are redundancies in the Intel instruction set which show in this list as duplication of both hex opcodes and mnemonics.
\par \plain\fs20 
\par \f1\b\fs24 More detailed reference can be found in the \cf1 Intel Architecture Software Developer\'92s Manual Volume 2 : Instruction Set Reference\plain\f1\b\fs24  found in the file "\cf3 24319101.PDF\plain\f1\b\fs24 " from Intel.
\par \plain\fs20 
\par \f2\b\fs24             00 ADD
\par \pard             01 ADD
\par             02 ADD
\par             03 ADD
\par             04 ADD
\par             05 ADD
\par             06 PUSH
\par             07 POP
\par             08 OR
\par             09 OR
\par             0A OR
\par             0B OR
\par             0C OR
\par             0D OR
\par             0E PUSH
\par             0F 00 LLDT
\par             0F 00 LTR
\par             0F 00 SLDT
\par             0F 00 STR
\par             0F 00 VERR
\par             0F 00 VERW
\par             0F 01 INVLPG
\par             0F 01 LGDT
\par             0F 01 LIDT
\par \pard             0F 01 LMSW
\par             0F 01 SGDT
\par             0F 01 SIDT
\par             0F 01 SMSW
\par             0F 01 SMSW 
\par             0F 02 LAR
\par             0F 03 LSL
\par             0F 08 INVD
\par             0F 09 WBINVD
\par             0F 0B UD2
\par             0F 20 MOV
\par             0F 21 MOV
\par             0F 22 MOV
\par             0F 23 MOV
\par             0F 30 WRMSR
\par             0F 31 RDTSC
\par             0F 32 RDMSR
\par             0F 33 RDPMC
\par             0F 40 CMOVO
\par             0F 41 CMOVNO
\par \pard             0F 42 CMOVB
\par             0F 42 CMOVC
\par             0F 42 CMOVNAE
\par             0F 43 CMOVAE
\par             0F 43 CMOVNB
\par             0F 43 CMOVNC
\par             0F 44 CMOVE
\par             0F 44 CMOVZ
\par             0F 45 CMOVNE
\par             0F 45 CMOVNZ
\par             0F 46 CMOVBE
\par             0F 46 CMOVNA
\par             0F 47 CMOVA
\par             0F 47 CMOVNBE
\par             0F 48 CMOVS
\par             0F 49 CMOVNS
\par             0F 4A CMOVP
\par             0F 4A CMOVPE
\par             0F 4B CMOVNP
\par \pard             0F 4B CMOVPO
\par             0F 4C CMOVL
\par             0F 4C CMOVNGE
\par             0F 4D CMOVGE
\par             0F 4D CMOVNL
\par             0F 4E CMOVLE
\par             0F 4E CMOVNG
\par             0F 4F CMOVG
\par             0F 4F CMOVNLE
\par             0F 60 PUNPCKLBW
\par             0F 61 PUNPCKLWD
\par             0F 62 PUNPCKLDQ
\par             0F 63 PACKSSWB
\par             0F 64 PCMPGTB
\par             0F 65 PCMPGTW 
\par             0F 66 PCMPGTD
\par             0F 67 PACKUSWB
\par             0F 68 PUNPCKHBW
\par \pard             0F 69 PUNPCKHWD
\par             0F 6A PUNPCKHDQ
\par             0F 6B PACKSSDW 
\par             0F 6E MOVD
\par             0F 6F MOVQ
\par             0F 71 PSLLW 
\par             0F 71 PSRAW
\par             0F 71 PSRLW
\par             0F 72 PSLLD
\par             0F 72 PSRAD
\par             0F 72 PSRLD
\par             0F 73 PSLLQ
\par             0F 73 PSRLQ
\par             0F 74 PCMPEQB
\par             0F 75 PCMPEQW
\par             0F 76 PCMPEQD
\par             0F 77 EMMS
\par             0F 7E MOVD
\par             0F 7F MOVQ
\par \pard             0F 80 JO
\par             0F 81 JNO
\par             0F 82 JB
\par             0F 82 JC
\par             0F 82 JNAE
\par             0F 83 JAE
\par             0F 83 JNB
\par             0F 83 JNC
\par             0F 84 JE
\par             0F 84 JZ
\par             0F 85 JNE
\par             0F 85 JNZ
\par             0F 86 JBE
\par             0F 86 JNA
\par             0F 87 JA
\par             0F 87 JNBE
\par             0F 88 JS
\par             0F 89 JNS
\par             0F 8A JP
\par             0F 8A JPE
\par             0F 8B JNP
\par \pard             0F 8B JPO
\par             0F 8C JL
\par             0F 8C JNGE
\par             0F 8D JGE
\par             0F 8D JNL
\par             0F 8E JLE
\par             0F 8E JNG
\par             0F 8F JG
\par             0F 8F JNLE
\par             0F 90 SETO
\par             0F 91 SETNO
\par             0F 92 SETB
\par             0F 92 SETC
\par             0F 92 SETNAE
\par             0F 93 SETAE
\par             0F 93 SETNB
\par             0F 93 SETNC
\par             0F 94 SETE
\par             0F 94 SETZ
\par             0F 95 SETNE
\par \pard             0F 95 SETNZ
\par             0F 96 SETBE
\par             0F 96 SETNA
\par             0F 97 SETA
\par             0F 97 SETNBE
\par             0F 98 SETS
\par             0F 99 SETNS
\par             0F 9A SETP
\par             0F 9A SETPE
\par             0F 9B SETNP
\par             0F 9B SETPO
\par             0F 9C SETL
\par             0F 9C SETNGE
\par             0F 9D SETGE
\par             0F 9D SETNL
\par             0F 9E SETLE
\par             0F 9E SETNG
\par             0F 9F SETG
\par             0F 9F SETNLE
\par             0F A0 PUSH
\par \pard             0F A1 POP
\par             0F A3 BT
\par             0F A4 SHLD
\par             0F A5 SHLD
\par             0F A8 PUSH
\par             0F A9 POP
\par             0F AA RSM
\par             0F AB BTS
\par             0F AC SHRD
\par             0F AD SHRD
\par             0F AF IMUL
\par             0F B0 CMPXCHG
\par             0F B1 CMPXCHG
\par             0F B2 LSS
\par             0F B3 BTR
\par             0F B4 LFS
\par             0F B5 LGS
\par             0F B6 MOVZX
\par             0F B7 MOVZX
\par             0F BA BT
\par             0F BA BTC
\par \pard             0F BA BTR
\par             0F BA BTS
\par             0F BB BTC
\par             0F BC BSF
\par             0F BD BSR
\par             0F BE MOVSX
\par             0F BF MOVSX
\par             0F C0 XADD
\par             0F C1 XADD
\par             0F C7 CMPXCHG8B
\par             0F C8 BSWAP
\par             0F D1 PSRLW
\par             0F D2 PSRLD
\par             0F D3 PSRLQ
\par             0F D8 PSUBUSB
\par             0F D9 PSUBUSW
\par             0F DB PAND
\par             0F DC PADDUSB
\par             0F DD PADDUSW
\par             0F DF PANDN
\par \pard             0F E1 PSRAW
\par             0F E2 PSRAD
\par             0F E5 PMULHW 
\par             0F E8 PSUBSB
\par             0F E9 PSUBSW
\par             0F EB POR
\par             0F EC PADDSB
\par             0F ED PADDSW 
\par             0F EF PXOR
\par             0F F1 PSLLW 
\par             0F F2 PSLLD
\par             0F F3 PSLLQ 
\par             0F F5 PMADDWD
\par             0F F8 PSUBB
\par             0F F9 PSUBW
\par             0F FA PSUBD
\par             0F FC PADDB
\par             0F FD PADDW 
\par             0F FE PADDD
\par \pard             10 ADC
\par             11 ADC
\par             12 ADC
\par             13 ADC
\par             14 ADC
\par             15 ADC
\par             16 PUSH
\par             17 POP
\par             18 SBB
\par             19 SBB
\par             1A SBB
\par             1B SBB
\par             1C SBB
\par             1D SBB
\par             1E PUSH
\par             1F POP
\par             20 AND
\par             21 AND
\par             22 AND
\par             23 AND
\par             24 AND
\par             25 AND
\par             27 DAA
\par             28 SUB
\par \pard             29 SUB
\par             2A SUB
\par             2B SUB
\par             2C SUB
\par             2D SUB
\par             2F DAS
\par             30 XOR
\par             31 XOR
\par             32 XOR
\par             33 XOR
\par             34 XOR
\par             35 XOR
\par             37 AAA
\par             38 CMP
\par             39 CMP
\par             3A CMP
\par             3B CMP
\par             3C CMP
\par             3D CMP
\par             3F AAS
\par             40 INC
\par             48 DEC
\par             50 PUSH
\par             58 POP
\par \pard             60 PUSHA
\par             60 PUSHAD
\par             61 POPA
\par             61 POPAD
\par             62 BOUND
\par             63 ARPL
\par             68 PUSH
\par             69 IMUL
\par             6A PUSH
\par             6B IMUL
\par             6C INS
\par             6C INSB
\par             6D INS
\par             6D INSD
\par             6D INSW
\par             6E OUTS
\par             6E OUTSB
\par             6F OUTS
\par             6F OUTSD
\par             6F OUTSW
\par             70 JO
\par             71 JNO
\par             72 JB
\par \pard             72 JC
\par             72 JNAE
\par             73 JAE
\par             73 JNB
\par             73 JNC
\par             74 JE
\par             74 JZ
\par             75 JNE
\par             75 JNZ
\par             76 JBE
\par             76 JNA
\par             77 JA
\par             77 JNBE
\par             78 JS
\par             79 JNS
\par             7A JP
\par             7A JPE
\par             7B JNP
\par             7B JPO
\par             7C JL
\par             7C JNGE
\par             7D JGE
\par             7D JNL
\par             7E JLE
\par             7E JNG
\par \pard             7F JG
\par             7F JNLE
\par             80 ADC
\par             80 ADD
\par             80 AND
\par             80 CMP
\par             80 OR
\par             80 SBB
\par             80 SUB
\par             80 XOR
\par             81 ADC
\par             81 ADD
\par             81 AND
\par             81 CMP
\par             81 OR
\par             81 SBB
\par             81 SUB
\par             81 XOR
\par             83 ADC
\par             83 ADD
\par             83 AND
\par             83 CMP
\par             83 OR
\par             83 SBB
\par \pard             83 SUB
\par             83 XOR
\par             84 TEST
\par             85 TEST
\par             86 XCHG
\par             87 XCHG
\par             88 MOV
\par             89 MOV
\par             8A MOV
\par             8B MOV
\par             8B MOV 
\par             8C MOV
\par             8D LEA
\par             8E MOV
\par             8F POP
\par             90 NOP
\par             90 XCHG
\par             98 CBW
\par             98 CWDE
\par             99 CDQ
\par             99 CWD
\par             9A CALL
\par             9A CALL
\par             9B D9 FSTCW
\par \pard             9B D9 FSTENV
\par             9B DB E2 FCLEX
\par             9B DB E3 FINIT
\par             9B DD FSAVE
\par             9B DD FSTSW
\par             9B DF E0 FSTSW
\par             9B FWAIT
\par             9B WAIT
\par             9C PUSHF
\par             9C PUSHFD
\par             9D POPF
\par             9D POPFD
\par             9E SAHF
\par             9F LAHF
\par             A0 MOV
\par             A1 MOV
\par             A2 MOV
\par             A3 MOV
\par             A4 MOVS
\par             A4 MOVSB 
\par             A5 MOVS
\par \pard             A5 MOVSD
\par             A5 MOVSW 
\par             A6 CMPS
\par             A6 CMPSB
\par             A7 CMPS
\par             A7 CMPSD
\par             A7 CMPSW
\par             A8 TEST
\par             A9 TEST
\par             AA STOS 
\par             AA STOSB
\par             AB STOS
\par             AB STOSD
\par             AB STOSW
\par             AC LODS
\par             AC LODSB
\par             AD LODS
\par             AD LODSD
\par             AD LODSW
\par             AE SCAS
\par             AE SCASB
\par             AF SCAS
\par             AF SCASD
\par \pard             AF SCASW
\par             B0 MOV
\par             B8 MOV
\par             C0 RCL
\par             C0 RCR
\par             C0 ROL
\par             C0 ROR
\par             C0 SAL
\par             C0 SAR
\par             C0 SHL
\par             C0 SHR
\par             C1 RCL
\par             C1 RCR
\par             C1 ROL
\par             C1 ROR
\par             C1 SAL
\par             C1 SAR
\par             C1 SHL
\par             C1 SHR
\par             C2 RET
\par             C3 RET
\par             C4 LES
\par             C5 LDS
\par             C6 MOV
\par \pard             C7 MOV
\par             C8 00 ENTER
\par             C8 01 ENTER
\par             C8 ENTER
\par             C9 LEAVE
\par             CA RET
\par             CC INT
\par             CD INT
\par             CE INTO
\par             CF IRET
\par             CF IRETD
\par             D0 RCL
\par             D0 RCR
\par             D0 ROL
\par             D0 ROR
\par             D0 SAL
\par             D0 SAR
\par             D0 SHL
\par             D0 SHR
\par             D1 RCL
\par             D1 RCR
\par             D1 ROL
\par             D1 ROR
\par \pard             D1 SAL
\par             D1 SAR
\par             D1 SHL
\par             D1 SHR
\par             D2 RCL
\par             D2 RCR
\par             D2 ROL
\par             D2 ROR
\par             D2 SAL
\par             D2 SAR
\par             D2 SHL
\par             D2 SHR
\par             D3 RCL
\par             D3 RCR
\par             D3 ROL
\par             D3 ROR
\par             D3 SAL
\par             D3 SAR
\par             D3 SHL
\par             D3 SHR
\par             D4 (No mnemonic)
\par             D4 0A AAM
\par             D5 (No mnemonic)
\par \pard             D5 0A AAD
\par             D7 XLAT
\par             D7 XLATB
\par             D8 C0 FADD
\par             D8 C8 FMUL
\par             D8 D0 FCOM
\par             D8 D1 FCOM
\par             D8 D8 FCOMP
\par             D8 D9 FCOMP
\par             D8 E0 FSUB
\par             D8 E8 FSUBR
\par             D8 F0 FDIV
\par             D8 F8 FDIVR
\par             D8 FADD
\par             D8 FCOM
\par             D8 FCOMP
\par             D8 FDIV
\par             D8 FDIVR
\par             D8 FMUL
\par             D8 FSUB
\par             D8 FSUBR
\par \pard             D9 C0 FLD
\par             D9 C8 FXCH
\par             D9 C9 FXCH
\par             D9 D0 FNOP
\par             D9 E0 FCHS
\par             D9 E1 FABS
\par             D9 E4 FTST
\par             D9 E8 FLD1
\par             D9 E9 FLDL2T
\par             D9 EA FLDL2E
\par             D9 EB FLDPI
\par             D9 EC FLDLG2
\par             D9 ED FLDLN2
\par             D9 EE FLDZ
\par             D9 F0 F2XM1
\par             D9 F2 FPTAN
\par             D9 F3 FPATAN 
\par             D9 F4 FXTRACT
\par             D9 F5 FPREM1
\par             D9 F6 FDECSTP
\par \pard             D9 F7 FINCSTP
\par             D9 F9 FYL2XP1
\par             D9 FA FSQRT
\par             D9 FB FSINCOS
\par             D9 FC FRNDINT
\par             D9 FD FSCALE
\par             D9 FE FSIN 
\par             D9 FF FCOS
\par             D9 FLD
\par             D9 FLDCW 
\par             D9 FLDENV
\par             D9 FNSTCW
\par             D9 FNSTENV
\par             D9 FST
\par             D9 FSTP
\par             DA C0 FCMOVB
\par             DA C8 FCMOVE
\par             DA D0 FCMOVBE
\par             DA D8 FCMOVU
\par             DA E9 FUCOMPP
\par \pard             DA FIADD
\par             DA FICOM
\par             DA FICOMP
\par             DA FIDIV
\par             DA FIDIVR
\par             DA FIMUL
\par             DA FISUB
\par             DA FISUBR
\par             DB C0 FCMOVNB
\par             DB C8 FCMOVNE
\par             DB D0 FCMOVNBE
\par             DB D8 FCMOVNU
\par             DB E2 FNCLEX
\par             DB E3 FNINIT
\par             DB E8 FUCOMI
\par             DB F0 FCOMI
\par             DB FILD
\par             DB FIST
\par             DB FISTP
\par             DB FLD
\par             DB FSTP
\par \pard             DC C0 FADD
\par             DC C8 FMUL
\par             DC E0 FSUBR
\par             DC E8 FSUB
\par             DC F0 FDIVR
\par             DC F8 FDIV
\par             DC FADD
\par             DC FCOM
\par             DC FCOMP
\par             DC FDIV
\par             DC FDIVR
\par             DC FMUL
\par             DC FSUB
\par             DC FSUBR
\par             DD C0 FFREE
\par             DD D0 FST
\par             DD D8 FSTP
\par             DD E0 FUCOM
\par             DD E1 FUCOM
\par             DD E8 FUCOMP
\par             DD E9 FUCOMP
\par \pard             DD FLD
\par             DD FNSAVE
\par             DD FNSTSW
\par             DD FRSTOR
\par             DD FST
\par             DD FSTP
\par             DE C0 FADDP
\par             DE C1 FADDP
\par             DE C8 FMULP
\par             DE C9 FMULP
\par             DE D9 FCOMPP
\par             DE E0 FSUBRP
\par             DE E1 FSUBRP
\par             DE E8 FSUBP
\par             DE E9 FSUBP
\par             DE F0 FDIVRP
\par             DE F1 FDIVRP
\par             DE F8 FDIVP
\par             DE F9 FDIVP
\par             DE FIADD
\par \pard             DE FICOM
\par             DE FICOMP
\par             DE FIDIV
\par             DE FIDIVR
\par             DE FIMUL
\par             DE FISUB
\par             DE FISUBR
\par             DF E0 FNSTSW
\par             DF E8 FUCOMIP
\par             DF F0 FCOMIP
\par             DF FBLD
\par             DF FBSTP
\par             DF FILD
\par             DF FIST
\par             DF FISTP
\par             E0 LOOPNE
\par             E0 LOOPNZ
\par             E1 LOOPE
\par             E1 LOOPZ
\par             E2 LOOP
\par             E3 JCXZ
\par             E3 JECXZ
\par \pard             E4 IN
\par             E5 IN
\par             E6 OUT
\par             E7 OUT
\par             E8 CALL
\par             E9 JMP
\par             EA JMP
\par             EB JMP
\par             EC IN
\par             ED IN
\par             EE OUT
\par             EF OUT
\par             F0 LOCK
\par             F2 A6 REPNE
\par             F2 A7 REPNE
\par             F2 AE REPNE
\par             F2 AF REPNE
\par             F3 6C REP
\par             F3 6D REP
\par             F3 6E REP
\par             F3 6F REP
\par             F3 A4 REP
\par             F3 A5 REP
\par \pard             F3 A6 REPE
\par             F3 A7 REPE
\par             F3 AA REP
\par             F3 AB REP
\par             F3 AC REP
\par             F3 AD REP
\par             F3 AE REPE
\par             F3 AF REPE
\par             F4 HLT
\par             F5 CMC
\par             F6 DIV
\par             F6 IDIV
\par             F6 IMUL
\par             F6 MUL 
\par             F6 NEG
\par             F6 NOT
\par             F6 TEST
\par             F7 DIV
\par             F7 IDIV
\par             F7 IMUL
\par             F7 MUL
\par             F7 NEG
\par             F7 NOT
\par \pard             F7 TEST
\par             F8 CLC
\par             F9 STC
\par             FA CLI
\par             FC CLD
\par             FD STD
\par             FE DEC
\par             FE INC
\par             FF CALL
\par             FF DEC
\par             FF INC
\par             FF JMP
\par             FF PUSH
\par             
\par \plain\fs20 
\par 
\par }